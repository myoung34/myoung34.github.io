<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Marcus Young]]></title>
  <link href="https://marcyoung.us/atom.xml" rel="self"/>
  <link href="https://marcyoung.us/"/>
  <updated>2019-11-21T21:27:59+00:00</updated>
  <id>https://marcyoung.us/</id>
  <author>
    <name><![CDATA[Marcus Young]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Barcaderator - Building An Arcade Kegerator]]></title>
    <link href="https://marcyoung.us/post/barcade"/>
    <updated>2019-11-20T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/Barcaderator</id>
    <content type="html"><![CDATA[<p>Introducing a modular arcade kegerator  <!-- more --></p>

<h3>The Backstory</h3>

<p>I recenly got into doing random stuff with arcades.
In October 2018 I got ahold of a completely ripped apart San Fransisco Rush cabinet.
I redid some of the wood, built a computer into it, reversed all the controls into a teensy and made it play Rocket League.
My tattoo shop is currently painting it (build log to come when I have it back).</p>

<p>In trade, I&rsquo;m fixing their arcade machine.</p>

<p>So now apparently I like real arcade machines <a href="https://marcyoung.us/post/mame-cabinet/">and not my now-broken table top</a>.</p>

<p>I also brew beer. Why not combine the two?!</p>

<p>So I introduce to you:</p>

<p><img src="https://marcyoung.us/images/barcade1.jpg">
<img src="https://marcyoung.us/images/barcade2.jpg">
<img src="https://marcyoung.us/images/barcade3.jpg">
<img src="https://marcyoung.us/images/barcade2.gif">
<img src="https://marcyoung.us/images/marquee.gif"></p>

<h3>The Hardware</h3>

<ul>
<li>The Marquee is a custom &ldquo;vintage style neon light&rdquo; from a company on alibaba.</li>
<li>The Computer is a <a href="https://www.dfrobot.com/product-1727.html?search=lattepanda%20alpha&amp;description=true">lattepanda alpha</a></li>
<li>The LED Buttons are <a href="https://groovygamegear.com/webstore/index.php?main_page=product_info&amp;products_id=408">spectra eclipse</a></li>
<li>The LED controller is an <a href="https://www.arcaderenovations.com/ultimarc-pacled64.html">Ultimarc pacled64</a></li>
<li>The Cabinet was custom cut on a CNC</li>
<li>The &ldquo;split&rdquo; frame is based on <a href="https://cdn11.bigcommerce.com/s-ecrovlce13/images/stencil/500x659/products/10801/13177/pygcjgwqewky6od7qomr__54105.1563214651.png?c=2">this style of aluminum tongue/receiver</a> from TCH hardware</li>
<li>The &ldquo;latches&rdquo; and the handles for the split top are from TCH Hardware</li>
</ul>


<h3>The Software</h3>

<p>The lattepanda runs Ubuntu with MAME. I originally chose windows, but LEDBlinky is <em>awful</em>. Just awful.
So instead I&rsquo;ve been working with <a href="https://sourceforge.net/p/ledspicer/wiki/Home/">LEDSpicer by Patricio Rossi</a>. The software worked nearly out of the box and he&rsquo;s been super helpful for getting me up and running.</p>

<h3>Build Pics</h3>

<p><img src="https://marcyoung.us/images/barcade/build2.jpg">
<img src="https://marcyoung.us/images/barcade/build3.jpg">
<img src="https://marcyoung.us/images/barcade/build4.jpg">
<img src="https://marcyoung.us/images/barcade/build5.jpg">
<img src="https://marcyoung.us/images/barcade/build6.jpg">
<img src="https://marcyoung.us/images/barcade/build7.jpg">
<img src="https://marcyoung.us/images/barcade/build8.jpg">
<img src="https://marcyoung.us/images/barcade/build9.jpg">
<img src="https://marcyoung.us/images/barcade/build10.jpg">
<img src="https://marcyoung.us/images/barcade/build11.jpg">
<img src="https://marcyoung.us/images/barcade/build12.jpg">
<img src="https://marcyoung.us/images/barcade/build13.jpg">
<img src="https://marcyoung.us/images/barcade/build14.jpg">
<img src="https://marcyoung.us/images/barcade/build15.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacking "Aviary" Scooters]]></title>
    <link href="https://marcyoung.us/post/scooters"/>
    <updated>2018-12-22T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/scooters</id>
    <content type="html"><![CDATA[<p>Hacking &ldquo;aviary&rdquo; scooters for fun.  <!-- more --></p>

<p><img src="https://marcyoung.us/images/scooters.jpg" title="scooters" ></p>

<p>I recently came across some neglected and forgotten &ldquo;Aviary&rdquo; scooters and wanted to see what could be done.</p>

<h2>Segway ES2/4</h2>

<p><img src="https://marcyoung.us/images/es4.jpg" title="es4" ></p>

<p>This was the easiest hack I&rsquo;ve ever done. Remove the top panel with security bits, and replace the board with one from ebay similar <a href="https://i.ebayimg.com/images/g/EUUAAOSwH2Vb7453/s-l300.jpg">to this</a></p>

<p>Plug it in and go. Done.
Cost: ~$40</p>

<h2>Xiaomi Mijia M365</h2>

<p>This one was much more fun.</p>

<p><img src="https://marcyoung.us/images/m365_1.jpg" title="m365" >
<img src="https://marcyoung.us/images/m365_2.jpg" title="m365" >
<img src="https://marcyoung.us/images/m365_3.jpg" title="m365" >
<img src="https://marcyoung.us/images/m365_4.jpg" title="m365" >
<img src="https://marcyoung.us/images/m365_5.png" title="m365" >
<img src="https://marcyoung.us/images/m365_6.jpg" title="m365" ></p>

<h3>Firmware</h3>

<p>This one was easy. Apparently the Xiaomi Mijia m365 is very commonly hacked already. They&rsquo;re extremely popular overseas, and people have already dedicated their time to reverse engineering the firmware. So much so that you can just use a <a href="https://m365.botox.bz/">webpage to change the settings and download a binary file to upload</a>.</p>

<p>Just download your bin file there, upload <a href="https://m365.botox.bz/static/com.m365downgrade-v7_PATCHED.apk?q=1531494897">with the android app</a> connect to your scooter and go.</p>

<h3>Display</h3>

<p>This one was also slightly trivial.</p>

<p>First thing I did was 3D printed one of <a href="https://www.thingiverse.com/thing:3064321">these bad boys</a>.</p>

<p>Then I ordered a <a href="https://www.amazon.com/Dorhea-Display-3-3V-5V-Arduino-Raspberry/dp/B07FK8GB8T">0.96&#8221; screen (4 pin i2C <em>not</em> 7 pin SPI)</a></p>

<p>Next you&rsquo;ll need an <a href="https://www.amazon.com/HiLetgo-Atmega32U4-Bootloadered-Development-Microcontroller/dp/B01MTU9GOB">arduino micro pro</a> and an <a href="https://www.amazon.com/HiLetgo-FT232RL-Converter-Adapter-Breakout/dp/B00IJXZQ7C">FTD1232 flasher</a> as well as a <a href="https://www.amazon.com/100-Pieces-1N4148-Switching-High-Speed/dp/B079KJ91JZ">diode</a>.</p>

<p>Using <a href="https://github.com/augisbud/m365_dashboard">this code</a> flash the arduino, wire it according to his guides below.</p>

<p>Note: I modified the <a href="https://github.com/augisbud/m365_dashboard/blob/master/M365/language.h">locale files with some maths</a> along with other tweaks I&rsquo;m not publishing to do miles instead of kilometers, change the intro logo and colors.</p>

<p>Cover it using any m365 button cover via ebay.</p>

<p>Done.</p>

<p><img src="https://marcyoung.us/images/m365_7.jpg" title="m365" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slack Is Not Your Bash Prompt]]></title>
    <link href="https://marcyoung.us/post/slack-not-bash"/>
    <updated>2018-11-26T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/Slack-Bash</id>
    <content type="html"><![CDATA[<p>A video of my first and likely last conference talk (lightning talk) about chatops  <!-- more --></p>

<p><a href="https://www.youtube.com/watch?v=Z6LrwUchRaE&amp;list=PLte_zIBj3fx6gNyC_8sleIFAYOvQhXemC&amp;index=7">Video here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hulk-Smash Production]]></title>
    <link href="https://marcyoung.us/post/hulk-smash"/>
    <updated>2018-05-20T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/Hulk-Smash-Prod</id>
    <content type="html"><![CDATA[<p>I one-upped my own bad idea with more badness. Don&rsquo;t do this.  <!-- more --></p>

<p>I, uh. Yeah.</p>

<p>I assume you <a href="https://marcyoung.us/post/deploy-production-button">read my previous post about my physical deploy button</a>. Well: I one-upped it.</p>

<p>Let me explain. Nah let&rsquo;s cut to it. I wanted to play with <a href="https://aws.amazon.com/iot-core/">AWS IoT</a> and I did so shamelessly with much architecture.</p>

<h3>The architecture</h3>

<p>I had a spare Raspberry Pi Zero W with a camera. So I did what any reasonable person would do. Used it with no end-goal.</p>

<p>I hooked it up to AWS IoT and made it <a href="https://docs.aws.amazon.com/iot/latest/developerguide/using-device-shadows.html">listen to the shadow delta MQTT queue</a></p>

<p>Basically whenever it saw a change to the shadow it would:</p>

<ol>
<li>Spin a <a href="https://www.amazon.com/Stepper-Bipolar-4-lead-Connector-Printer/dp/B00PNEQKC0">stepper motor</a> that landed a <a href="https://www.amazon.com/Marvel-Avengers-Gamma-Grip-Fists/dp/B072QMZTZ4">hulk hand</a> on my deploy production button.</li>
<li>Thanks to py3 <a href="https://docs.python.org/3/library/threading.html">threads</a> it would also start the rasp pi camera to watch the hulk smash and send it to <a href="https://www.giphy.com">giphy</a>.</li>
<li>After the gif is done uploading it would send a gif of the hulk smash back to the user in slack.</li>
</ol>


<h3>The finale</h3>

<p>Without further ado I give you: Hulk Smash Production.</p>

<p><img src="https://marcyoung.us/images/hulksmash.png" title="hulksmash" ></p>

<p>The <a href="https://giphy.com/embed/xuW89v9kQXMeQ">initial gif</a></p>

<p>And the final gif (yes the hulk hand is duct taped to a bamboo skewer to a stepper motor):</p>

<p><img src="https://marcyoung.us/images/hulksmash.gif" title="hulksmash" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Physical Deploy-Production Button]]></title>
    <link href="https://marcyoung.us/post/deploy-production-button"/>
    <updated>2018-05-19T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/deploy-production-button</id>
    <content type="html"><![CDATA[<p>I made a physical button to deploy production and regret nothing.  <!-- more --></p>

<p>Over the last few weeks I&rsquo;ve been looking for a project.</p>

<p>I currently work for a python shop and have really taken a liking to it. Simultaneously, I keep seeing new hardware <a href="https://micropython.org">supporting micropython</a>. I&rsquo;m not against the C&#8217;ish language that the arduino type stuff pushes for, but it&rsquo;s nice to get the best of both worlds: an abstracted language with nice syntax and the ability to do dumb stuff with voltage. So: I did just that.</p>

<h3>The Controller</h3>

<p>I&rsquo;ve really wanted to play with the ESP8266 after seeing some cool projects cross over my feeds. I decided also to kill two birds with one stone and try the Huzzah board <a href="https://www.adafruit.com/product/2821">from adafruit</a> that includes onboard wifi because I hate money. The board itself was fantastic out of the box.</p>

<h3>The Learning Curve</h3>

<p>Without doing any whatsoever much research my brain really thought that micropython was going to be a &ldquo;drop in replacement&rdquo; for the UX of programming a board in the arduino IDE. It&rsquo;s not. This is actually my biggest complaint about micropython. The code itself was very very very straightforward. Write a <code>main.py</code> that does your stuff, and profit. You can load libraries that support micropython, etc.</p>

<p>Getting there? Meh.</p>

<p>First: you have to flash your esp with <a href="https://micropython.org/download">the micropython firmware</a>.</p>

<p>Next: you have to get your code onto the board. The feedback loop for this is the annoying part. The first time you flash the firmware you have to <a href="https://learn.adafruit.com/micropython-basics-esp8266-webrepl/access-webrepl">enable WebREPL</a>. It&rsquo;s a one-time cost but it&rsquo;s smelly. This enables a wifi broadcast from the board that you can then access from webrepl with a password.</p>

<p>If you make it past the previous step you can make <code>main.py</code> join your wireless network (note: 5ghz is not supported) with something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import network
</span><span class='line'>
</span><span class='line'>sta_if = network.WLAN(network.STA_IF)
</span><span class='line'>
</span><span class='line'>def do_connect():
</span><span class='line'>    if not sta_if.isconnected():
</span><span class='line'>        print('connecting to network...')
</span><span class='line'>        sta_if.active(True)
</span><span class='line'>        sta_if.connect('The LAN Before Time', 'hunter2')
</span><span class='line'>        while not sta_if.isconnected():
</span><span class='line'>            print('waiting to connect...')
</span><span class='line'>            sleep(5)
</span><span class='line'>            pass
</span><span class='line'>
</span><span class='line'>print('connecting...')
</span><span class='line'>do_connect()
</span><span class='line'>print('network config:', sta_if.ifconfig())</span></code></pre></td></tr></table></div></figure>


<p>Now that it&rsquo;s on the network you can use webrepl to the local address of the huzzah. But it still sucks compared to the typical UX of: select board, click compile.</p>

<h3>What You Came To See</h3>

<p>If you&rsquo;re still reading I&rsquo;m sure you want to see what I did. Basically I took 4 mechanical keyboard switches (I have a lot OK?!), wired them to the huzzah, and made it send a slack command to our internal slack bot to <em>force</em> deploy production (ignore all locks, send a message to yours truly).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>while True:
</span><span class='line'>    buttons = [
</span><span class='line'>        machine.Pin(4,  machine.Pin.IN, machine.Pin.PULL_UP),
</span><span class='line'>        machine.Pin(5,  machine.Pin.IN, machine.Pin.PULL_UP),
</span><span class='line'>        machine.Pin(2,  machine.Pin.IN, machine.Pin.PULL_UP),
</span><span class='line'>        machine.Pin(15, machine.Pin.IN, machine.Pin.PULL_UP),
</span><span class='line'>    ]
</span><span class='line'>
</span><span class='line'>    _sum = 0
</span><span class='line'>    for button in buttons:
</span><span class='line'>        _sum += button.value()
</span><span class='line'>    if (_sum == 0):
</span><span class='line'>        print('generating request')
</span><span class='line'>        print(urequests.post(webhook_url, json={'text': ":alert: DEPLOY BUTTON PRESSED. KLAXON: ACTIVATED :alert:"}, headers={'Content-Type': 'application/json'}).status_code)
</span><span class='line'>        print(urequests.post(webhook_url, json={'text': "!deploy prod master -f"}, headers={'Content-Type': 'application/json'}).status_code)</span></code></pre></td></tr></table></div></figure>


<p><img src="https://marcyoung.us/images/huzzah1.jpg" title="huzzah1" >
<img src="https://marcyoung.us/images/huzzah2.png" title="huzzah2" ></p>

<p>It works and it&rsquo;s pretty empowering to smash. We deployed to production a record number of times that day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Let's Rethink Jenkins]]></title>
    <link href="https://marcyoung.us/post/lets-rethink-jenkins"/>
    <updated>2018-01-29T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/lets-rethink-jenkins</id>
    <content type="html"><![CDATA[<p>I lose all data from jenkins every time I deploy it. And that&rsquo;s OK.  <!-- more --></p>

<h2>Background: a rant</h2>

<p>Let me start off by saying: I&rsquo;ve done <em>a lot</em> of Jenkins.</p>

<ul>
<li>Exhibit A (super old jenkins with fake pipelines): <img class="right" src="https://marcyoung.us/images/jenkins-old.png" title="jenkins 1.4" ></li>
</ul>


<p>I&rsquo;ve done new Jenkins (I love 2.0 and love Jenkinsfile&rsquo;s).</p>

<p>I&rsquo;ve worked with <a href="https://jenkins.ovirt.org">large jenkins installs</a>.
I&rsquo;ve worked with small jenkins at multiple shops.</p>

<p>I&rsquo;ve automated backups with S3 tarballs:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>backup_dir=/var/lib/jenkins/backup
</span><span class='line'>if [[ -d $backup_dir ]]; then
</span><span class='line'>  rm -rf $backup_dir/*.tar.gz
</span><span class='line'>else
</span><span class='line'>  mkdir -p $backup_dir
</span><span class='line'>fi
</span><span class='line'>archive_name=jenkins-backup-$(date +%Y-%m-%d-%H_%M_%S).tar.gz
</span><span class='line'>filename=$backup_dir/$archive_name
</span><span class='line'>tar --exclude=backup --exclude=backups -czf $filename --warning=no-file-changed /var/lib/jenkins
</span><span class='line'>aws s3 cp $filename s3://$backup_bucket/backups/$backup_name</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve automated backups with <a href="https://plugins.jenkins.io/thinBackup">thin backup</a>.</p>

<p>I&rsquo;ve automated creating jobs with <a href="https://github.com/jenkinsci/job-dsl-plugin">job-dsl</a></p>

<p>I&rsquo;ve automated creating jobs with straight XML.</p>

<p>I&rsquo;ve automated creating jobs with <a href="https://docs.openstack.org/infra/jenkins-job-builder/">jenkins job builder</a>.</p>

<p>They all suck. I&rsquo;m sorry. But they&rsquo;re complex and require a lot of orchestration and customization to work.</p>

<h2>Im gonna do worse</h2>

<p>My problem with all these previous methods is they require a hybrid suck. You have to automate the jobs and mix that with retaining your backups.</p>

<p><em>I&rsquo;m tired of things using the filesystem as a database.</em></p>

<p>These things are complex because the data lives in the same place as the jobs. When you build up your jobs they contain metadata about build history. So you end up with these nasty complicated methods of pulling down and merging the filesystem.</p>

<p>My hypothesis: #(@$ that. Lets use a real database and artifact store for the data and just not care. Crazy Right?!</p>

<p>I&rsquo;ve <a href="https://github.com/myoung34/docker-jenkins">got some demo code</a> to prove to you how easy it is. It&rsquo;s 100% groovy. No job dsl, no nothing. Just groovy and java methods.
The one I posted shows how I automated groovy to set up:</p>

<ol>
<li><a href="https://github.com/myoung34/docker-jenkins/blob/master/jenkins/ad.groovy">Active directory</a></li>
<li><a href="https://github.com/myoung34/docker-jenkins/blob/master/jenkins/ecs.groovy">AWS ECS agents</a></li>
<li><a href="https://github.com/myoung34/docker-jenkins/blob/master/jenkins/github.groovy">Github organizations (includes webhooks!)</a></li>
<li><a href="https://github.com/myoung34/docker-jenkins/blob/master/jenkins/slack.groovy">Slack</a></li>
<li><a href="https://github.com/myoung34/docker-jenkins/blob/master/jenkins.properties">Libraries like better slack messages and jobs defined in a java properties file</a></li>
<li><a href="https://github.com/myoung34/docker-jenkins/blob/master/jenkins/logstash.groovy">Logstash for the real meat of this post</a></li>
</ol>


<h2>The real reason youre here</h2>

<p>My jenkins master is docker. Its volatile. And its stateless.</p>

<p>So how do I do it? In production my docker hosts listen to UDP port 555 with Logstash for syslog and forward them to ELK (because SSL, and other reasons).
<a href="https://github.com/myoung34/docker-jenkins/blob/master/jenkins/logstash.groovy">In my example the logstash plugin just sends directly to elasticsearch</a>.
All the env vars are pulled from <a href="https://www.vaultproject.io">vault</a> at run time and I get to manage the data like my other data from ELK.</p>

<p>My artifacts go to someting like <a href="https://www.jfrog.com/artifactory">artifactory</a>.</p>

<p>And guess what? It&rsquo;s fantastic. Automation is dead simple. And I put the data in a real database. which lets me do things like see build times across projects, see deployments, etc.</p>

<p><img class="left" src="https://marcyoung.us/images/jenkins1.png" title="jenkins" >
<img class="left" src="https://marcyoung.us/images/jenkins3.png" title="jenkins" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vault as a CA for ECS containers using Terraform (Part 2)]]></title>
    <link href="https://marcyoung.us/post/docker-vault-ca-part2"/>
    <updated>2017-12-24T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/docker-vault-ca-part2</id>
    <content type="html"><![CDATA[<p>Now for some cool snippets on how to automatically request certs from the Intermediary we created in Part 1<!-- more --></p>

<h2>Dockerfile</h2>

<p>An example of how I typically get Vault into my base Container:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FROM debian:jessie
</span><span class='line'>ENV VAULT_VERSION 0.8.1
</span><span class='line'>ENV DUMBINIT_VERSION 1.2.0
</span><span class='line'>
</span><span class='line'>RUN apt-get update && apt-get install -y \
</span><span class='line'>      apt-transport-https \
</span><span class='line'>      ca-certificates \
</span><span class='line'>      wget \
</span><span class='line'>      unzip \
</span><span class='line'>      jq \
</span><span class='line'>      curl \
</span><span class='line'>    nginx \
</span><span class='line'>  --no-install-recommends && rm -rf /var/lib/apt/lists/*
</span><span class='line'>
</span><span class='line'>RUN curl -L --silent -o vault.zip https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip && \
</span><span class='line'>  unzip vault.zip && \
</span><span class='line'>  mv vault /usr/local/bin/vault && \
</span><span class='line'>  chmod +x /usr/local/bin/vault
</span><span class='line'>
</span><span class='line'>RUN curl -L --silent -o /usr/local/bin/dumb-init https://github.com/Yelp/dumb-init/releases/download/v${DUMBINIT_VERSION}/dumb-init_${DUMBINIT_VERSION}_amd64 && \
</span><span class='line'>  chmod +x /usr/local/bin/dumb-init
</span><span class='line'>
</span><span class='line'>RUN mkdir -p /opt/ssl
</span><span class='line'>COPY docker-entrypoint.sh /
</span><span class='line'>RUN chmod +x /docker-entrypoint.sh
</span><span class='line'>ENTRYPOINT ["/usr/local/bin/dumb-init", "--"]
</span><span class='line'>CMD ["/docker-entrypoint.sh"]</span></code></pre></td></tr></table></div></figure>


<h2>The Entrypoint</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'>export SSL_PATH=/opt/ssl
</span><span class='line'>
</span><span class='line'>EC2_AVAIL_ZONE=$(curl -s --max-time 5 https://169.254.169.254/latest/meta-data/placement/availability-zone)
</span><span class='line'>if [[ $? -eq 0 ]]; then
</span><span class='line'>  # shellcheck disable=SC2001,SC2006
</span><span class='line'>  EC2_REGION="`echo \"$EC2_AVAIL_ZONE\" | sed -e 's:\([0-9][0-9]*\)[a-z]*\$:\\1:'`"
</span><span class='line'>  export AWS_DEFAULT_REGION=$EC2_REGION
</span><span class='line'>  export AWS_REGION=$EC2_REGION
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>[[ -z "${VAULT_TOKEN}" ]] && vault auth -method=aws &gt;/dev/null
</span><span class='line'>
</span><span class='line'>VAULT_JSON="$(vault write -format=json cuddletech_ops/issue/jenkins common_name=jenkins ttl=15551999)"
</span><span class='line'>
</span><span class='line'>echo "$VAULT_JSON" | jq -r .data.private_key &gt; ${SSL_PATH}/key.pem
</span><span class='line'>echo "$VAULT_JSON" | jq -r .data.certificate &gt; ${SSL_PATH}/cert.pem
</span><span class='line'>echo "$VAULT_JSON" | jq -r .data.issuing_ca  &gt; ${SSL_PATH}/ca.pem
</span><span class='line'>cat ${SSL_PATH}/cert.pem ${SSL_PATH}/ca.pem  &gt; ${SSL_PATH}/bundle.pem
</span><span class='line'>
</span><span class='line'># run your command and point to the certs generated above. Example in nginx:
</span><span class='line'>#        ssl                  on;
</span><span class='line'>#        ssl_certificate      /opt/ssl/bundle.pem;
</span><span class='line'>#        ssl_certificate_key  /opt/ssl/key.pem;</span></code></pre></td></tr></table></div></figure>


<h2>Terraforming the certificate issuer</h2>

<p>If you somehow get the previous part to run, it will fail because you have to create the role in Vault before you can just start generating certs off it. In the <a href="https://cuddletech.com/?p=959">cuddletech guide</a> this is under <code>Requesting a Certificate for a Web Server</code> as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault write cuddletech_ops/roles/web_server \
</span><span class='line'>&gt; key_bits=2048 \
</span><span class='line'>&gt; max_ttl=8760h \
</span><span class='line'>&gt; allow_any_name=true
</span><span class='line'>Success! Data written to: cuddletech_ops/roles/web_server</span></code></pre></td></tr></table></div></figure>


<p>But what if I told you, you could do that in terraform?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>variable "role" {
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>resource "vault_generic_secret" "pki_role" {
</span><span class='line'>  path = "cuddletech_ops/roles/${var.role}"
</span><span class='line'>
</span><span class='line'>  data_json = &lt;&lt;EOT
</span><span class='line'>{
</span><span class='line'>  "key_bits": "2048",
</span><span class='line'>  "max_ttl": "8760h",
</span><span class='line'>  "allow_any_name": "true"
</span><span class='line'>}
</span><span class='line'>EOT
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>If you add that with your ECS task along with the vault role and policy from the previous post about Vault Anything in Terraform, all your dependencies are met and kept in code!</p>

<p>You can now generate certificates off your PKI backend and grab secrets all in one go!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vault as a CA for ECS containers using Terraform (Part 1)]]></title>
    <link href="https://marcyoung.us/post/docker-vault-ca-part1"/>
    <updated>2017-12-24T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/docker-vault-ca-part1</id>
    <content type="html"><![CDATA[<p>In this I&rsquo;ll show some examples on how to leverage HashiCorp Vault as an awesome CA. Note this part is boring and 80% copy/paste from a cuddletech blog. <!-- more --></p>

<h2>Prerequisites</h2>

<ol>
<li>Vault running as a server</li>
<li>Vault CLI to match the server</li>
</ol>


<h2>Create the Root cert/key</h2>

<p>(This is actually mostly a clone from <a href="https://cuddletech.com/?p=959">here</a> but I want to make sure it never disappears)</p>

<p><em>Note</em>: You should not let the vault server generate the root CA, you should generate it and import it. I just havent figured out how to do that yet. I will update this post when I get around to it. <a href="https://en.wikipedia.org/wiki/Offline_root_certificate_authority">More info on that here</a></p>

<ol>
<li>Mount the PKI backend for the root</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault mount -path=cuddletech -description="Cuddletech Root CA" -max-lease-ttl=87600h pki
</span><span class='line'>Successfully mounted 'pki' at 'cuddletech'!
</span><span class='line'>$ vault mounts
</span><span class='line'>Path         Type       Default TTL  Max TTL    Description
</span><span class='line'>cubbyhole/   cubbyhole  n/a          n/a        per-token private secret storage
</span><span class='line'>cuddletech/  pki        system       315360000  Cuddletech Root CA
</span><span class='line'>secret/      generic    system       system     generic secret storage
</span><span class='line'>sys/         system     n/a          n/a        system endpoints used for control, policy and debugging </span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault write cuddletech/root/generate/internal \
</span><span class='line'>&gt; common_name="Cuddletech Root CA" \
</span><span class='line'>&gt; ttl=87600h \
</span><span class='line'>&gt; key_bits=4096 \
</span><span class='line'>&gt; exclude_cn_from_sans=true
</span><span class='line'>Key             Value
</span><span class='line'>---             -----
</span><span class='line'>certificate     -----BEGIN CERTIFICATE-----
</span><span class='line'>MIIFKzCCAxOgAwIBAgIUDXiI3GDzP2IbQ9IatFSCv9Pq/lgwDQYJKoZIhvcNAQEL
</span><span class='line'>BQAwHTEbMBkGA1UEAxMSQ3VkZGxldGVjaCBSb290IENBMB4XDTE2MDcwOTA4MTIz
</span><span class='line'>..
</span><span class='line'>axscmLdVE2HTB87W1H77iKKN8n9Xne//LUidxVX0Kg==
</span><span class='line'>-----END CERTIFICATE-----
</span><span class='line'>expiration      1783411981
</span><span class='line'>issuing_ca      -----BEGIN CERTIFICATE-----
</span><span class='line'>MIIFKzCCAxOgAwIBAgIUDXiI3GDzP2IbQ9IatFSCv9Pq/lgwDQYJKoZIhvcNAQEL
</span><span class='line'>BQAwHTEbMBkGA1UEAxMSQ3VkZGxldGVjaCBSb290IENBMB4XDTE2MDcwOTA4MTIz
</span><span class='line'>...
</span><span class='line'>axscmLdVE2HTB87W1H77iKKN8n9Xne//LUidxVX0Kg==
</span><span class='line'>-----END CERTIFICATE-----
</span><span class='line'>serial_number   0d:78:88:dc:60:f3:3f:62:1b:43:d2:1a:b4:54:82:bf:d3:ea:fe:58</span></code></pre></td></tr></table></div></figure>


<p>Verify</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s https://localhost:8200/v1/cuddletech/ca/pem | openssl x509 -text
</span><span class='line'>Certificate:
</span><span class='line'>    Data:
</span><span class='line'>        Version: 3 (0x2)
</span><span class='line'>        Serial Number:
</span><span class='line'>            0d:78:88:dc:60:f3:3f:62:1b:43:d2:1a:b4:54:82:bf:d3:ea:fe:58
</span><span class='line'>    Signature Algorithm: sha256WithRSAEncryption
</span><span class='line'>        Issuer: CN=Cuddletech Root CA
</span><span class='line'>        Validity
</span><span class='line'>            Not Before: Jul  9 08:12:31 2016 GMT
</span><span class='line'>            Not After : Jul  7 08:13:01 2026 GMT
</span><span class='line'>        Subject: CN=Cuddletech Root CA
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Fix the URL for accessing the CA/CRL URLs</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault write cuddletech/config/urls issuing_certificates="https://10.0.0.22:8200/v1/cuddletech
</span><span class='line'>Success! Data written to: cuddletech/config/urls</span></code></pre></td></tr></table></div></figure>


<h2>Create the Intermediate cert/key</h2>

<p>Mount the PKI for the Intermediate (similar to root)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vault mount -path=cuddletech_ops -description="Cuddletech Ops Intermediate CA" -max-lease-ttl=26280h pki
</span><span class='line'>Successfully mounted 'pki' at 'cuddletech_ops'!
</span><span class='line'>
</span><span class='line'>$ vault mounts
</span><span class='line'>Path             Type       Default TTL  Max TTL    Description
</span><span class='line'>cubbyhole/       cubbyhole  n/a          n/a        per-token private secret storage
</span><span class='line'>cuddletech/      pki        system       315360000  Cuddletech Root CA
</span><span class='line'>cuddletech_ops/  pki        system       94608000   Cuddletech Ops Intermediate CA</span></code></pre></td></tr></table></div></figure>


<p>Generate the intermediate CSR</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault write cuddletech_ops/intermediate/generate/internal \
</span><span class='line'>&gt;  common_name="Cuddletech Operations Intermediate CA"
</span><span class='line'>&gt;  ttl=26280h \
</span><span class='line'>&gt;  key_bits=4096 \
</span><span class='line'>&gt;  exclude_cn_from_sans=true
</span><span class='line'>Key     Value
</span><span class='line'>---     -----
</span><span class='line'>csr     -----BEGIN CERTIFICATE REQUEST-----
</span><span class='line'>MIICuDCCAaACAQAwMDEuMCwGA1UEAxMlQ3VkZGxldGVjaCBPcGVyYXRpb25zIElu
</span><span class='line'>dGVybWVkaWF0ZSBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALt8
</span><span class='line'>...
</span><span class='line'>hD8cpHTXqjKExYWKc/rQDgjw9+RNDdb45xszDagrgFgNPqI9i0fNh9jViMmjUiTc
</span><span class='line'>PQTZS4XxIoRrx1/xVHJ4Qm++ntLPVCvzjMZafg==
</span><span class='line'>-----END CERTIFICATE REQUEST-----</span></code></pre></td></tr></table></div></figure>


<p>Cut and paste that CSR into a new file cuddletech_ops.csr. The reason we output the file here is so we can get it out of one backend and into another and then back out.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault write cuddletech/root/sign-intermediate \
</span><span class='line'>&gt;  csr=@cuddletech_ops.csr \
</span><span class='line'>&gt;  common_name="Cuddletech Ops Intermediate CA" \
</span><span class='line'>&gt;  ttl=8760h
</span><span class='line'>Key             Value
</span><span class='line'>---             -----
</span><span class='line'>certificate     -----BEGIN CERTIFICATE-----
</span><span class='line'>MIIEZDCCAkygAwIBAgIUHuIhRF3tYtfoZiAFdjcCtQpMR+cwDQYJKoZIhvcNAQEL
</span><span class='line'>BQAwHTEbMBkGA1UEAxMSQ3VkZGxldGVjaCBSb290IENBMB4XDTE2MDcwOTA4Mjkz
</span><span class='line'>...
</span><span class='line'>UtI2b/AamAqf340eRKmSdEh4WypB4JR+t259YA45w2j4mS+rxREycEk4YosR/vUs
</span><span class='line'>jekMiq57yNq7h8eOTrnOulJxazbVrYGb
</span><span class='line'>-----END CERTIFICATE-----
</span><span class='line'>expiration      1470645002
</span><span class='line'>issuing_ca      -----BEGIN CERTIFICATE-----
</span><span class='line'>MIIFKzCCAxOgAwIBAgIUDXiI3GDzP2IbQ9IatFSCv9Pq/lgwDQYJKoZIhvcNAQEL
</span><span class='line'>BQAwHTEbMBkGA1UEAxMSQ3VkZGxldGVjaCBSb290IENBMB4XDTE2MDcwOTA4MTIz
</span><span class='line'>..
</span><span class='line'>1FRGlwHUg+6IIZBVIapzivLc6pAvLFPxQlQvT5CNHPk91zwyNQ9ZX2PzatdajUnd
</span><span class='line'>axscmLdVE2HTB87W1H77iKKN8n9Xne//LUidxVX0Kg==
</span><span class='line'>-----END CERTIFICATE-----
</span><span class='line'>serial_number   1e:e2:21:44:5d:ed:62:d7:e8:66:20:05:76:37:02:b5:0a:4c:47:e7</span></code></pre></td></tr></table></div></figure>


<p>Now that we have a Root CA signed cert, we’ll need to cut-n-paste this certificate into a file we’ll name cuddletech_ops.crt and then import it into our Intermediate CA backend:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault write cuddletech_ops/intermediate/set-signed \
</span><span class='line'>&gt; certificate=@cuddletech_ops.crt
</span><span class='line'>Success! Data written to: cuddletech_ops/intermediate/set-signed</span></code></pre></td></tr></table></div></figure>


<p>Awesome! Lets verify:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -s https://localhost:8200/v1/cuddletech_ops/ca/pem | openssl x509 -text | head -20
</span><span class='line'>Certificate:
</span><span class='line'>    Data:
</span><span class='line'>        Version: 3 (0x2)
</span><span class='line'>        Serial Number:
</span><span class='line'>            76:12:53:41:be:18:98:2c:a1:51:4a:f8:f0:bd:b4:a3:44:7e:74:59
</span><span class='line'>    Signature Algorithm: sha256WithRSAEncryption
</span><span class='line'>        Issuer: CN=Cuddletech Root CA
</span><span class='line'>        Validity
</span><span class='line'>            Not Before: Jul  9 09:23:39 2016 GMT
</span><span class='line'>            Not After : Jul  9 09:24:09 2017 GMT
</span><span class='line'>        Subject: CN=Cuddletech Ops Intermediate CA
</span><span class='line'> ...</span></code></pre></td></tr></table></div></figure>


<p>The last thing we need to do is set the CA &amp; CRL URL’s for accessing the CA:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vault write cuddletech_ops/config/urls \
</span><span class='line'>&gt; issuing_certificates="https://10.0.0.22:8200/v1/cuddletech_ops/ca" \
</span><span class='line'>&gt; crl_distribution_points="https://10.0.0.22:8200/v1/cuddletech_ops/crl"
</span><span class='line'>Success! Data written to: cuddletech_ops/config/urls</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vault Roles/Policies in Terraform]]></title>
    <link href="https://marcyoung.us/post/vault-anything-in-terraform"/>
    <updated>2017-12-23T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/vault-anything-in-terraform</id>
    <content type="html"><![CDATA[<p>Now we get to the fun part and put everything we need from Vault in terraform. <!-- more --></p>

<p>If you&rsquo;ve used ECS and Vault with the <a href="https://www.vaultproject.io/docs/auth/aws.html">aws auth backend</a> you may have found a bit of a snag in terms of automation.</p>

<p>Lets say you want to create a new ECS container to run. You want that task to get specific secrets in vault by role. You write the code, terraform, etc and when it runs you get:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>URL: GET https://server:8200/v1/auth/aws-ec2/role/somerole
</span><span class='line'>Code: 400. Errors:
</span><span class='line'>
</span><span class='line'>* entry for role somerole not found</span></code></pre></td></tr></table></div></figure>


<p>So you deployed something but now you have to create a policy, a role, etc in vault via the CLI, all the while your task is throttling.</p>

<p>Little known fact: the terribly-named <code>vault_generic_secret</code> from the <a href="https://www.terraform.io/docs/providers/vault/index.html">provider docs</a> can do create roles/policies in addition to secrets (hence the bad name).</p>

<p>In this part 2 I&rsquo;ll show you how to automate the next step of your ECS task into terraform so there&rsquo;s no race condition.</p>

<h2>Prerequisites</h2>

<ol>
<li>Vault running as a server</li>
<li>Vault CLI to match the server</li>
<li>Terraform</li>
</ol>


<h2>Create a vault policy in terraform</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>resource "vault_generic_secret" "policy" {
</span><span class='line'>  path = "sys/policy/${aws_iam_role.neutrona_wand.name}"
</span><span class='line'>
</span><span class='line'>  data_json = &lt;&lt;EOT
</span><span class='line'>{
</span><span class='line'>  "name": "${aws_iam_role.neutrona_wand.name}",
</span><span class='line'>  "rules": "path \"secret/ops/*\" {\n  policy = \"read\"\n}\n\npath \"secret/common/*\" {\n  policy = \"read\"\n}"
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>EOT
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Create an AWS auth role in terraform</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>provider "vault" {}
</span><span class='line'>
</span><span class='line'>resource "aws_iam_role" "neutrona_wand" {
</span><span class='line'>  name = "neutrona_wand"
</span><span class='line'>  path = "/lambda/"
</span><span class='line'>
</span><span class='line'>  assume_role_policy = &lt;&lt;POLICY
</span><span class='line'>{
</span><span class='line'>  "Version": "2012-10-17",
</span><span class='line'>  "Statement": [
</span><span class='line'>    {
</span><span class='line'>      "Sid": "",
</span><span class='line'>      "Effect": "Allow",
</span><span class='line'>      "Principal": {
</span><span class='line'>        "Service": [
</span><span class='line'>          "lambda.amazonaws.com"
</span><span class='line'>        ]
</span><span class='line'>      },
</span><span class='line'>      "Action": "sts:AssumeRole"
</span><span class='line'>    }
</span><span class='line'>  ]
</span><span class='line'>}
</span><span class='line'>POLICY
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'># The ugly replace in 'bound_iam_principal_arn' is to account for removing the path from the role. 
</span><span class='line'># If you look, my IAM role is /lambda/, so the arn would be 'arn:aws:iam::1234567890:role/lambda/neutrona_wand'
</span><span class='line'># While the 'bound_iam_principal_arn' wants the non-path version: 'arn:aws:iam::1234567890:role/neutrona_wand'
</span><span class='line'>resource "vault_generic_secret" "role" {
</span><span class='line'>  path = "auth/aws/role/${aws_iam_role.neutrona_wand.name}"
</span><span class='line'>
</span><span class='line'>  data_json = &lt;&lt;EOT
</span><span class='line'>{
</span><span class='line'>  "bound_iam_principal_arn": "${replace(aws_iam_role.neutrona_wand.arn, "/:role\\/[a-zA-Z\\/]*\\//", ":role\\/")}",
</span><span class='line'>  "policies": "default,${aws_iam_role.neutrona_wand.name},slack",
</span><span class='line'>  "max_ttl":"300",
</span><span class='line'>  "resolve_aws_unique_ids": "false"
</span><span class='line'>}
</span><span class='line'>EOT
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[re:Invent 2017 (never again)]]></title>
    <link href="https://marcyoung.us/post/reinvent-2017"/>
    <updated>2017-12-22T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/reinvent-2017</id>
    <content type="html"><![CDATA[<p>This was my worst overall conference experience to date. <!-- more --></p>

<p>Along with many others, I had my share of complaints, but this one takes the cake.</p>

<p>This conference had an estimated 43,000 people. It was yuge. And it was actually well-run. Everything &ldquo;ran&rdquo; smoothly overall, but the experiences varied wildly from person to person. I&rsquo;ll sum mine up:</p>

<ol>
<li>I registered for talks only 2-3 days after it opened. I was &ldquo;confirmed&rdquo; for 3. All others for 6 days were walk up only.</li>
<li>We were told to get to walk ups at least 30min early. The rooms were guaranteed 80% reserved with 20% for walk ups. I was at multiple over an hour early at 3 and sat outside and worked, no big deal. I was in the 20% buffer each time, confirmed by the person counting the line. At all 3 I was turned away within 15 people of the door for &ldquo;fire code&rdquo;. So the math: An hour sitting, turned away. The next talk is in 30 min, so that&rsquo;s a no go. So waste 30 minutes or and spend an hour waiting at next one to get in. Turned away there as well, with nothing to do for the next 30min. That&rsquo;s 3 hours of sitting.</li>
<li>Each full room has &lsquo;overflow&rsquo;. One was great, it was a big auditorium with bluetooth headsets and limited capacity, which I was able to get into. The others were a big shared room using a special WiFi hotspot to listen in on an app you download to your phone. It was oversaturated by all of the overflow so it kept cutting out. That happened twice.</li>
<li>The main talks were spread across 3-4 hotels, the main ones being MGM Grand and the Venetian, which are not near each other. So you walk or take the provided buses. The buses are great, but they didnt travel the strip and took about 20 minutes to make the 1.5 mile distance. Next: all of the buses load and unload at the same spot. So you end up waiting an extra 15-20min in a busline waiting for the other multiple buses to  unload then fully (or partially) load back. So ~45minutes for a 1.5mile ride.</li>
</ol>


<p>So after 6 days I got to see 3 talks. I asked for a refund and was given the approval, but was told that &ldquo;a few thousand people are having similar complaints. management is already looking at how to improve the 2018 version based on feedback.&rdquo;</p>

<p>Notable annoyances on the trip not related to amazon but added to the overall experience:</p>

<ol>
<li>The MGM grand was full and I obviously got the &lsquo;under construction&rsquo; room. There was no placard (number) so it was hard to find (especially if drinking). The entertainment center was completely busted with wood that fell when I tried to use it. The wall safe was closed/locked and management could not get it to open, so I couldn&rsquo;t use it for my cash. My keycards didnt work, and it&rsquo;s on the other side of the hotel from the lobby (~10min walk). When it&rsquo;s late: walk 10 min to the room. Cards dont work. Walk 10 min to lobby to get new one. Walk 10 min back to get into room. This happened 4 times to the point where they  waived all of my fees and changed the lock on day 4 to an upgraded RFID version (so kudos there).</li>
<li>American airlines keeps changing my name to Marcus AMERICANAIRLINES Young. TSA precheck checks against your full name so I have to get it printed at counter (waiting in that line negates the bonus of having TSA precheck). They couldnt get it to go through even after confirming my KTN and said &ldquo;all they can do is keep printing my ticket to see if it gets TSA&rdquo;. So after spending an hour to not get that to work I just go through the normal line (why did I pay for TSA precheck?)</li>
</ol>


<p>I used up my entire conference budget for re:Invent. Never again.</p>

<p> /rant</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ergoslider Review]]></title>
    <link href="https://marcyoung.us/post/ergoslider-review"/>
    <updated>2017-10-09T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/ergoslider-review</id>
    <content type="html"><![CDATA[<p>Another ergonomic mouse review I gone and did <!-- more --></p>

<p>Recently I&rsquo;ve been on an ergo kick (no pain, just realized how much more efficient I am).</p>

<p>I reached out to a company selling a product much like the ContourMouse ergo mice but at a <a href="https://www.amazon.com/Ergoslider-Plus-Ergonomic-Roller-Bar-Tendinitis/dp/B071JNSD9Z/ref=sr_1_1?ie=UTF8&amp;qid=1507601165&amp;sr=8-1&amp;keywords=ergoslider">much lower price</a>.</p>

<p>My assumption was that it would be ergo&#8217;ish but clunky. I was wrong. This thing is great!</p>

<p>The first thing I realized, and drove me crazy for a few minutes, is that the roller bar is not attached. The documents don&rsquo;t say much, so I first thought I was missing a part. It says it&rsquo;s detached, but it didnt make sense to my brain. So after finding nothing in the booklet I just dropped it in its place and it was working. Strange. The contourmouse ones have it on a metal bar, this doenst pretend that. If you&rsquo;ve cleaned a contourmouse bar, its pretty awful. Requires bending metal, etc. This thing is cool, just remove it and rub it down with an alcohol wipe, done. I did wish it locked into place somehow though, because the drive to work involved it getting wedged under something in my backpack.</p>

<p>In terms of usage, this thing is very much what I expected, plus some. Its very fluid, feels solid, and works great. The OS (mac + windows) worked immediately with it and didn&rsquo;t require pulling any software/drivers down.</p>

<p>After using it for about 30 days now, I can say that if you&rsquo;re looking for an ergo mouse at a small price, look no further. This has been my go-to and will likely stay that way. It&rsquo;s been at our &ldquo;standing desk&rdquo; area for about two weeks and has prompted quite a few questions and quite a bit of usage.</p>

<p>My only cons:</p>

<ol>
<li>The detachable mouse is both a pro and a con. It&rsquo;s great because it&rsquo;s detachable, but it&rsquo;s not because it&rsquo;s detached. It&rsquo;s not actually detachable, because it&rsquo;s literally always loose. Can probably get lost easily.</li>
<li>The drivers are non-customizable. You can&rsquo;t map the buttons  to anything else, they are what they say they are. The biggest plus to contour mouse is that the keys are 100% mappable through software.</li>
</ol>


<p>The pros:</p>

<ol>
<li>Pretty much anything you can imagine about an ergo mouse: comfort, quality, usage, ease.</li>
</ol>


<p>Overall: buy this if you want to save a bit of cash.</p>

<p>Pics below</p>

<p><img class="left" src="https://marcyoung.us/images/ergoslider1.jpg">
<img class="left" src="https://marcyoung.us/images/ergoslider2.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ergonomic Mouse Review]]></title>
    <link href="https://marcyoung.us/post/ergo-mouse-review"/>
    <updated>2017-06-26T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/ergo-mouse-review</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve Recently been really into ergonomic mice, and wanted to give my thoughts on a few after going all in. <!-- more --></p>

<p>In the last few months, I&rsquo;ve been pretty into mechanical keyboards and form factor. I&rsquo;ve been using an original (very old) Rollermouse for about 2 years now and was looking to upgrade it (the thing is huge).</p>

<p>My current home setup is a Contour Rollermouse free2 and a pok3r (Cherry MX Clears) and a Logitech G700s for gaming.
<img class="left" src="https://marcyoung.us/images/free1.jpg"></p>

<p>My work set up is a TechKeys JD40 on a 1up case (80g Cherry MX browns) and a Contour Rollermouse Red.
<img class="left" src="https://marcyoung.us/images/red1.jpg"></p>

<p>While shopping around, I came upon the <a href="https://amzn.to/2tguHYQ">Penclic NiceTouch t2</a>. It caught my eye because it&rsquo;s <em>exactly</em> the same size as my pok3r. The original contourmouse is hilariously larger than my keyboard, so that&rsquo;s a huge draw.
They sent me one to sample, so I decided to do a pro/con of my setups.</p>

<h2>Contourmouse Red</h2>

<p>This is by far the most sturdy of all of the mice. It&rsquo;s made of stainless steel, and could be used as a bludgeon. It doesnt move, and the rollerbar at the top is very thick with a grippy surface area to it.
My biggest complaint with the original contourmouse was that you ran out of horizontal space. You&rsquo;d have to hold it far left to let the mouse slowly track over, or right because there was no physical space for the mouse to go left or right anymore.
I got adjusted to it but it happened often enough to notice. With the red, this is gone. I&rsquo;m not sure if it&rsquo;s smarter or if the acceleration takes care of it, but it never happens, or just happens far less.</p>

<p>All the buttons are 100% programmable in OSX/Windows via their driver. I havent tried on linux, but I&rsquo;m sure it is. The bar itself has a physical tensioner as well which is nice to add resistance. And as far as usability: it&rsquo;s great. The roller bar
is a physical left click if you press, and everything is in the right place. I dont have to move my hands <em>at all</em> to use it.</p>

<p><img class="left" src="https://marcyoung.us/images/red1.jpg">
<img class="left" src="https://marcyoung.us/images/red2.jpg"></p>

<p>The drawback is price. It&rsquo;s crazy expensive, and I got lucky to find it on ebay after months of searching/bidding for a low price. I&rsquo;m not sure it&rsquo;s worth the original MSRP, but I love it.</p>

<h2>Contourmouse Free2</h2>

<p>This one has most of the same pros as the Red, but I find myself getting annoyed at the physical bar occasionally. It&rsquo;s smaller than the red in terms of diameter, it&rsquo;s closer to the original contourmouse. It makes it a little harder to get your thumb on
and move freely just because it&rsquo;s thinner. The tensioner isnt that great, so sometimes after a long coding session when my hands get a little stiff the mouse shows my thumb shakiness a little on &ldquo;exact&rdquo; clicks like on small buttons. That&rsquo;s when I can tell
I&rsquo;ve been at it too long. And the original complaint about physical left/right exists here. I find myself out of space to go left or right and have to break focus to move the mouse over. If I were trying to do exact work like CAD/3d modelling I&rsquo;d probably
throw it out the window by this point. It&rsquo;s great, but it&rsquo;s not worth the price considering how much nicer the Red is. Also, after only a few weeks, the palm rest started coming apart, and I used a sticker to prevent it from spreading. I can tell you right
now though, the sticker is functionally part of it now. If I pull it off, the padding will come with it. They  call the pads replaceable, but that assumes you can find it. I can&rsquo;t find replacement pads that dont come with a full keyboard.</p>

<p><img class="left" src="https://marcyoung.us/images/free1.jpg">
<img class="left" src="https://marcyoung.us/images/free2.jpg"></p>

<p>This one is not worth the price, but I&rsquo;d buy it again if it were &lt; $60.</p>

<h2>Penclic NiceTouce T2</h2>

<p>This is the one I was iffy about. Functionally, it&rsquo;s great. They sent me the matching keyboard, the Penclic NiceTouch C2, which is a chiclet key style keyboard. Together they work fine. If you like chiclets it types and works great.
However, my biggest problem is not with the keyboard, but with the trackpad. As a trackpad, it&rsquo;s fine, but it doesn&rsquo;t support gestures or multi-finger. I&rsquo;ve become so used to being able to do two-finger scroll that it&rsquo;s frustrating to not have it.
There is a physical rotating key that lets you scroll left right, but the right side of my palm kept touching it and making my cursor jump in vim.</p>

<p><img class="left" src="https://marcyoung.us/images/t2_1.jpg">
<img class="left" src="https://marcyoung.us/images/t2_4.jpg">
<img class="left" src="https://marcyoung.us/images/t2_5.jpg">
<img class="left" src="https://marcyoung.us/images/t2_6.jpg"></p>

<p>My other complaint is with the buttons. They&rsquo;re not labeled or programmable so you <em>have</em> to read the booklet to know what buttons &frac34; do. They&rsquo;re also impossible to reach. The draw to the contourmouse design is that the bar clicks but also those buttons
are very reachable by your thumbs. You can put your hands on the Home keys and not  have to move your hands at all to be efficient. With the T2 the buttons are so far down that they&rsquo;re not reachable, meaning I have to move my hands to click them. At that
point I&rsquo;d rather have a mouse. Without two-finger scroll it means that I cant do anything except move my mouse up/down/left/right without moving my hands around.</p>

<p><img class="left" src="https://marcyoung.us/images/t2_3.jpg"></p>

<p>The only other complaint I have is that if you use the trackpad with a different keyboard (like my pok3r), it&rsquo;s too low and leave a huge gap vertically. There are no risers (like on most keyboard) to raise the trackpad, so I stuffed a piece of cardboard
under it, but that made it a bit wobbly. I could probably 3d print something, but that&rsquo;s pretty intense for an out-of-the-box experience. Lastly, the trackpad is <em>very</em> light. So light that it moves around while using it.  It probably only weighs a few
ounces which gives it a flemsy breakable feel. Having something that light on top of a  piece of cardboard created a very unstable setup.</p>

<p><img class="left" src="https://marcyoung.us/images/t2_2.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Up and Running With Bless and Enforced MFA - Part 2]]></title>
    <link href="https://marcyoung.us/post/bless-part2"/>
    <updated>2017-06-20T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/bless-part2</id>
    <content type="html"><![CDATA[<p>Part 2 of deploying Bless will focus on enforcing MFA and using Lyft’s client. <!-- more --></p>

<p>The problem at this point is that anyone in the ops group can bounce without MFA enforced. We can set up the lyft client, which enforces MFA, but if we dont make other changes, there’s no enforcement of MFA. ie you can still call the netflix client and bounce right in.</p>

<p>The other issue is that Netflix’s bless holds true the idea of a bastion host. In-house, we have IPSec tunnels from our VPC’s to our internal network, so I dont need to bounce through a bastion. So I want anyone to be able to bounce, given that they have permissions (ops) and they used MFA. Lyft’s doesn’t enforce the bastion concept, which is nice.</p>

<h1>Prerequisites</h1>

<p>In the IAM console in AWS, enable an MFA device for your user.</p>

<h2>Setting up the client</h2>

<p>I wrote a wrapper to simplify this. Feel free to not like it, but I put this in my <code>~/.bash_aliases</code> to make it easier:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function bounce() {
</span><span class='line'>  if [[ ! -d ~/.blessclient ]]; then
</span><span class='line'>    pushd . &gt;/dev/null
</span><span class='line'>    git clone https://github.com/lyft/python-blessclient.git ~/.blessclient
</span><span class='line'>    cd $_
</span><span class='line'>    make
</span><span class='line'>    popd &gt;/dev/null
</span><span class='line'>  fi
</span><span class='line'>  INTERNAL_IP=$(ifconfig | grep inet | grep 192 | awk '{ print $2}')
</span><span class='line'>  # This gets weird if you have wired and wifi hooked up (sometimes i do). It might allow the wrong IP and give you a crap error messsage.
</span><span class='line'>  if [[ $(ifconfig | grep inet | grep 192 | awk '{ print $2}' | wc -l) -gt 1 ]] && [[ -z ${BLESSFIXEDIP} ]]; then
</span><span class='line'>    echo "More than one internal ip found. Disable a network interface or provide it manually via env var 'BLESSFIXEDIP'"
</span><span class='line'>  else
</span><span class='line'>    FILE="$(mktemp)"
</span><span class='line'>    rm -rf ${FILE}*
</span><span class='line'>    ssh-keygen -f ${FILE} -N ""
</span><span class='line'>    BLESS_IDENTITYFILE=${FILE} BLESSFIXEDIP=${BLESSFIXEDIP:-${INTERNAL_IP}} ~/.blessclient/blessclient.run --host $1 --nocache --config ~/.blessclient/blessclient.cfg --region EAST && ssh -i ${FILE} ec2-user@$1
</span><span class='line'>  fi
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Now you can bounce with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bounce 10.0.3.7
</span><span class='line'>Generating public/private rsa key pair.
</span><span class='line'>Your identification has been saved in /var/folders/5j/n9trdvbn3qqdtkshkpvnrkhh0000gp/T/tmp.s2ZdeuJD.
</span><span class='line'>Your public key has been saved in /var/folders/5j/n9trdvbn3qqdtkshkpvnrkhh0000gp/T/tmp.s2ZdeuJD.pub.
</span><span class='line'>The key fingerprint is:
</span><span class='line'>SHA256:CizQBI/ROY8QIeiRjt7rY65jPc/oJDL3MA marcyoung@Admins-MacBook-Pro.local
</span><span class='line'>The key's randomart image is:
</span><span class='line'>+---[RSA 2048]----+
</span><span class='line'>|B*+.             |
</span><span class='line'>|++o              |
</span><span class='line'>|=..              |
</span><span class='line'>|.o.*.            |
</span><span class='line'>|. o  S           |
</span><span class='line'>|...+ . .         |
</span><span class='line'>| E .o.           |
</span><span class='line'>|oo= + .          |
</span><span class='line'>|.=*              |
</span><span class='line'>+----[SHA256]-----+
</span><span class='line'>Enter your AWS MFA code: 477821
</span><span class='line'>Requesting certificate for your public key (set BLESSQUIET=1 to suppress these messages)
</span><span class='line'>Finished getting certificate.
</span><span class='line'>Last login: Fri Jun 16 20:14:52 2017 from ip-192-168-1-124.ec2.internal
</span><span class='line'>
</span><span class='line'>       __|  __|_  )
</span><span class='line'>       _|  (     /   Amazon Linux AMI
</span><span class='line'>      ___|\___|___|
</span><span class='line'>
</span><span class='line'>https://aws.amazon.com/amazon-linux-ami/2017.03-release-notes/
</span><span class='line'>No packages needed for security; 2 packages available
</span><span class='line'>Run "sudo yum update" to apply all updates.
</span><span class='line'>[marc@server ~]$</span></code></pre></td></tr></table></div></figure>


<p>Nice! But again, MFA is used, not enforced. Lets change that.</p>

<p>I hinted at my group policy in part 1 for <code>ops</code> that looked like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>resource "aws_iam_group_policy" "bless-client" {
</span><span class='line'>    name = "bless-client_iam_policy"
</span><span class='line'>    group = "${aws_iam_group.ops.id}"
</span><span class='line'>    policy = &lt;&lt;EOF
</span><span class='line'>{
</span><span class='line'>    "Version": "2012-10-17",
</span><span class='line'>    "Statement": [
</span><span class='line'>      {
</span><span class='line'>        "Effect": "Allow",
</span><span class='line'>        "Action": "sts:AssumeRole",
</span><span class='line'>        "Resource": [
</span><span class='line'>          "${data.terraform_remote_state.bless_client_iam.bless-client-role-arn}"
</span><span class='line'>        ]
</span><span class='line'>      },
</span><span class='line'>      {
</span><span class='line'>        "Action": "kms:Encrypt",
</span><span class='line'>        "Effect": "Allow",
</span><span class='line'>        "Resource": [
</span><span class='line'>          "${data.terraform_remote_state.kms.ops_bless_arn}"
</span><span class='line'>        ],
</span><span class='line'>        "Condition": {
</span><span class='line'>          "StringEquals": {
</span><span class='line'>            "kms:EncryptionContext:user_type": "user",
</span><span class='line'>            "kms:EncryptionContext:from": "$${aws:username}"
</span><span class='line'>          }
</span><span class='line'>        }
</span><span class='line'>      }
</span><span class='line'>    ]
</span><span class='line'>}
</span><span class='line'>EOF
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>But in actuality, it should look more like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>resource "aws_iam_group_policy" "bless-client" {
</span><span class='line'>    name = "assume-bless-role"
</span><span class='line'>    group = "${aws_iam_group.ops.id}"
</span><span class='line'>    policy = &lt;&lt;EOF
</span><span class='line'>{
</span><span class='line'>  "Version": "2012-10-17",
</span><span class='line'>  "Statement": [
</span><span class='line'>    {
</span><span class='line'>      "Effect": "Allow",
</span><span class='line'>      "Action": "sts:AssumeRole",
</span><span class='line'>      "Resource": [
</span><span class='line'>        "${data.terraform_remote_state.bless_client_iam.bless-client-role-arn}"
</span><span class='line'>      ],
</span><span class='line'>      "Condition": {
</span><span class='line'>        "Bool": {
</span><span class='line'>          "aws:MultiFactorAuthPresent": "true"
</span><span class='line'>        }
</span><span class='line'>      }
</span><span class='line'>    },
</span><span class='line'>    {
</span><span class='line'>      "Effect": "Deny",
</span><span class='line'>      "Action": "sts:AssumeRole",
</span><span class='line'>      "Resource": [
</span><span class='line'>        "${data.terraform_remote_state.bless_client_iam.bless-client-role-arn}"
</span><span class='line'>      ],
</span><span class='line'>      "Condition": {"BoolIfExists": {"aws:MultiFactorAuthPresent": false}}
</span><span class='line'>    },
</span><span class='line'>    {
</span><span class='line'>      "Action": "kms:Encrypt",
</span><span class='line'>      "Effect": "Allow",
</span><span class='line'>      "Resource": [
</span><span class='line'>        "${data.terraform_remote_state.kms.ops_bless_arn}"
</span><span class='line'>      ],
</span><span class='line'>      "Condition": {
</span><span class='line'>        "StringEquals": {
</span><span class='line'>          "kms:EncryptionContext:user_type": "user",
</span><span class='line'>          "kms:EncryptionContext:from": "$${aws:username}"
</span><span class='line'>        },
</span><span class='line'>        "Bool": {
</span><span class='line'>          "aws:MultiFactorAuthPresent": "true"
</span><span class='line'>        }
</span><span class='line'>      }
</span><span class='line'>    },
</span><span class='line'>    {
</span><span class='line'>      "Action": "kms:Encrypt",
</span><span class='line'>      "Effect": "Deny",
</span><span class='line'>      "Resource": [
</span><span class='line'>        "${data.terraform_remote_state.kms.ops_bless_arn}"
</span><span class='line'>      ],
</span><span class='line'>      "Condition": {
</span><span class='line'>        "StringEquals": {
</span><span class='line'>          "kms:EncryptionContext:user_type": "user",
</span><span class='line'>          "kms:EncryptionContext:from": "$${aws:username}"
</span><span class='line'>        },
</span><span class='line'>        "BoolIfExists": {
</span><span class='line'>          "aws:MultiFactorAuthPresent": false
</span><span class='line'>        }
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>  ]
</span><span class='line'>}
</span><span class='line'>EOF
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>What did we do? We basically said ops users can assume the bless-client role or call kms:Encrypt on that key, but only if they used MFA. If you try the original bless client now, it will fail.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Up and Running With Bless and Enforced MFA - Part 1]]></title>
    <link href="https://marcyoung.us/post/bless-part1"/>
    <updated>2017-06-20T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/bless-part1</id>
    <content type="html"><![CDATA[<p>I finally got Netflix’s <a href="https://github.com/netflix/bless">Bless</a> running in production using a forked version of Lyft’s <a href="https://github.com/lyft/python-blessclient">client</a>. This post will focus on the first and easier portion: Bless in Lambda <!-- more --></p>

<h1>Prerequisites</h1>

<p>Time and terraform. I like terraform because I dislike cloudformation. Feel free to adapt.</p>

<h2>Installing Bless</h2>

<p>This is actually the easiest part, because it’s straight forward. Side note: I like bless because of its simplicity. It uses lambda + KMS and nothing more. The permissions are stupid simple. The purpose, after talking to one of the guys behind it, was to make it feel native and un-intrusive. It works.</p>

<h2>Setup Config</h2>

<p>This was the hardest to get going, because configuration always is. The readme says to paste in a function to lambda to generate your password. But thats not needed with the super awesome lambda container from <a href="https://github.com/lambci/docker-lambda">lambci</a>. To do this, create a file function.py with the contents:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import boto3
</span><span class='line'>import base64
</span><span class='line'>import os
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>def lambda_handler(event, context):
</span><span class='line'>    region = os.environ['AWS_REGION']
</span><span class='line'>    client = boto3.client('kms', region_name=region)
</span><span class='line'>    response = client.encrypt(
</span><span class='line'>    KeyId='kms_key_id',
</span><span class='line'>    Plaintext='totallysecure'
</span><span class='line'>    )
</span><span class='line'>
</span><span class='line'>    ciphertext = response['CiphertextBlob']
</span><span class='line'>    return base64.b64encode(ciphertext)</span></code></pre></td></tr></table></div></figure>


<p>Now lets run that without using the real lambda. Make sure your access key/id have the required permissions to do <code>kms:Encrypt</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=AWS_SECRET_ACCESS_KEY -e AWS_REGION=us-east-1 -v "$PWD":/var/task lambci/lambda:python2.7 function.lambda_handler
</span><span class='line'>START RequestId: 42f85048-91e1-4b48-9376-0563722616f0 Version: $LATEST
</span><span class='line'>END RequestId: 42f85048-91e1-4b48-9376-0563722616f0
</span><span class='line'>REPORT RequestId: 42f85048-91e1-4b48-9376-0563722616f0 Duration: 733 ms Billed Duration: 800 ms Memory Size: 1536 MB Max Memory Used: 25 MB
</span><span class='line'>"some base64 encoded key"</span></code></pre></td></tr></table></div></figure>


<h2>The Config</h2>

<p>This is an example of a finished config. Save it as <code>lambda_configs/bless_deploy.cfg</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Bless Options]
</span><span class='line'>certificate_validity_after_seconds = 120
</span><span class='line'>certificate_validity_before_seconds = 120
</span><span class='line'>entropy_minimum_bits = 2048
</span><span class='line'>random_seed_bytes = 256
</span><span class='line'>logging_level = INFO
</span><span class='line'>
</span><span class='line'>[Bless CA]
</span><span class='line'>
</span><span class='line'>us-east-1_password = some base64 encoded key from lambci/lambda
</span><span class='line'>ca_private_key_file = foo1.pem
</span><span class='line'>
</span><span class='line'>[KMS Auth]</span></code></pre></td></tr></table></div></figure>


<h2>Build</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ virtualenv venv
</span><span class='line'>$ . venv/bin/activate
</span><span class='line'>$ pip install -r requirements.txt
</span><span class='line'>$ make publish </span></code></pre></td></tr></table></div></figure>


<h1>Deploy</h1>

<h2>IAM</h2>

<p>The first piece is the IAM portion for Bless. I need to allow it to:</p>

<ol>
<li>Generate random keys from KMS (obvious)</li>
<li>Decrypt the KMS key that’s the password for Bless. This is generated and</li>
<li>Create the log group (maybe not necesary since Lambda does that for you?)</li>
<li>Push logs</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>resource "aws_iam_role" "bless_lambda" {
</span><span class='line'>    name = "bless_lambda"
</span><span class='line'>    assume_role_policy = &lt;&lt;EOF
</span><span class='line'>{
</span><span class='line'>  "Version": "2012-10-17",
</span><span class='line'>  "Statement": [
</span><span class='line'>    {
</span><span class='line'>      "Action": "sts:AssumeRole",
</span><span class='line'>      "Principal": {
</span><span class='line'>        "Service": "lambda.amazonaws.com"
</span><span class='line'>      },
</span><span class='line'>      "Effect": "Allow",
</span><span class='line'>      "Sid": ""
</span><span class='line'>    }
</span><span class='line'>  ]
</span><span class='line'>}
</span><span class='line'>EOF
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>resource "aws_iam_role_policy" "bless_lambda" {
</span><span class='line'>    name = "bless_lambda"
</span><span class='line'>    role = "${aws_iam_role.bless_lambda.id}"
</span><span class='line'>    policy = &lt;&lt;EOF
</span><span class='line'>{
</span><span class='line'>    "Version": "2012-10-17",
</span><span class='line'>    "Statement": [
</span><span class='line'>        {
</span><span class='line'>          "Sid": "Stmt1443036478000",
</span><span class='line'>          "Effect": "Allow",
</span><span class='line'>          "Action": [
</span><span class='line'>              "kms:GenerateRandom",
</span><span class='line'>              "kms:Decrypt"
</span><span class='line'>          ],
</span><span class='line'>          "Resource": [
</span><span class='line'>              "${data.terraform_remote_state.kms.ops_bless_arn}"
</span><span class='line'>          ]
</span><span class='line'>        },
</span><span class='line'>        {
</span><span class='line'>            "Effect": "Allow",
</span><span class='line'>            "Action": "logs:CreateLogGroup",
</span><span class='line'>            "Resource": "arn:aws:logs:us-east-1:*:*"
</span><span class='line'>        },
</span><span class='line'>        {
</span><span class='line'>            "Effect": "Allow",
</span><span class='line'>            "Action": [
</span><span class='line'>                "logs:CreateLogStream",
</span><span class='line'>                "logs:PutLogEvents"
</span><span class='line'>            ],
</span><span class='line'>            "Resource": [
</span><span class='line'>                "arn:aws:logs:us-east-1:*:log-group:/aws/lambda/*"
</span><span class='line'>            ]
</span><span class='line'>        }
</span><span class='line'>    ]
</span><span class='line'>}
</span><span class='line'>EOF
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>KMS</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>resource "aws_kms_key" "ops-bless" {
</span><span class='line'>    description             = "KMS key for Bless"
</span><span class='line'>    deletion_window_in_days = 7
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>resource "aws_kms_alias" "ops-bless" {
</span><span class='line'>    name          = "alias/ops/bless"
</span><span class='line'>    target_key_id = "${aws_kms_key.ops-bless.key_id}"
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>output "ops_bless_arn" {
</span><span class='line'>  value = "${aws_kms_key.ops-bless.arn}"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h1>Client</h1>

<h2>Client IAM role to assume</h2>

<p>It basically just allows the invocation of our deployed function:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>resource "aws_iam_role" "bless-client" {
</span><span class='line'>    name               = "bless-client"
</span><span class='line'>    path               = "/"
</span><span class='line'>    assume_role_policy = &lt;&lt;EOF
</span><span class='line'>{
</span><span class='line'>    "Version": "2012-10-17",
</span><span class='line'>    "Statement": [
</span><span class='line'>        {
</span><span class='line'>            "Action": "lambda:InvokeFunction",
</span><span class='line'>            "Effect": "Allow",
</span><span class='line'>            "Resource": [
</span><span class='line'>                "${data.terraform_remote_state.lambda-bless.bless_arn}"
</span><span class='line'>            ]
</span><span class='line'>        }
</span><span class='line'>    ]
</span><span class='line'>}
</span><span class='line'>EOF
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>I added this to our <code>ops</code> IAM group so that any ops person can assume the role or use <code>kms:Encrypt</code> from the bless KMS key:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>resource "aws_iam_group_policy" "bless-client" {
</span><span class='line'>    name = "bless-client_iam_policy"
</span><span class='line'>    group = "${aws_iam_group.ops.id}"
</span><span class='line'>    policy = &lt;&lt;EOF
</span><span class='line'>{
</span><span class='line'>    "Version": "2012-10-17",
</span><span class='line'>    "Statement": [
</span><span class='line'>      {
</span><span class='line'>        "Effect": "Allow",
</span><span class='line'>        "Action": "sts:AssumeRole",
</span><span class='line'>        "Resource": [
</span><span class='line'>          "${data.terraform_remote_state.bless_client_iam.bless-client-role-arn}"
</span><span class='line'>        ]
</span><span class='line'>      },
</span><span class='line'>      {
</span><span class='line'>        "Action": "kms:Encrypt",
</span><span class='line'>        "Effect": "Allow",
</span><span class='line'>        "Resource": [
</span><span class='line'>          "${data.terraform_remote_state.kms.ops_bless_arn}"
</span><span class='line'>        ],
</span><span class='line'>        "Condition": {
</span><span class='line'>          "StringEquals": {
</span><span class='line'>            "kms:EncryptionContext:user_type": "user",
</span><span class='line'>            "kms:EncryptionContext:from": "$${aws:username}"
</span><span class='line'>          }
</span><span class='line'>        }
</span><span class='line'>      }
</span><span class='line'>    ]
</span><span class='line'>}
</span><span class='line'>EOF
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Client config</h2>

<p>This is an example of what my client config looks like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[MAIN]
</span><span class='line'>region_aliases: east
</span><span class='line'>kms_service_name: bless
</span><span class='line'>bastion_ips: 192.168.1.6
</span><span class='line'>remote_user: ec2-user
</span><span class='line'>
</span><span class='line'>[CLIENT]
</span><span class='line'>domain_regex: (.*\.mycompany\.com|.*\.example\.net|\A10\.[0-9](?:\.[0-9]{1,3}){2}\Z)$
</span><span class='line'>cache_dir: .bless/session
</span><span class='line'>cache_file: bless_cache.json
</span><span class='line'>mfa_cache_dir: .aws/session
</span><span class='line'>mfa_cache_file: token_cache.json
</span><span class='line'>ip_urls: https://api.ipify.org, https://canihazip.com
</span><span class='line'>update_script: update_blessclient.sh
</span><span class='line'>
</span><span class='line'>[LAMBDA]
</span><span class='line'>user_role: bless-client
</span><span class='line'>account_id: my account id
</span><span class='line'>functionname: bless
</span><span class='line'>functionversion: $LATEST
</span><span class='line'>certlifetime: 120
</span><span class='line'>ipcachelifetime: 120
</span><span class='line'>timeout_connect: 30
</span><span class='line'>timeout_read: 30
</span><span class='line'>
</span><span class='line'>[REGION_EAST]
</span><span class='line'>awsregion: us-east-1
</span><span class='line'>kmsauthkey: my kms id that i used for the original password encrypt</span></code></pre></td></tr></table></div></figure>


<h1>Test</h1>

<p>You should now have a lambda that can generate certificates to use. You’ll need to put the public keys from <code>foo1.pub</code> and <code>foo2.pub</code> into your servers at <code>/etc/ssh/cas.pub</code> and add <code>TrustedUserCAKeys /etc/ssh/cas.pub</code> to <code>/etc/ssh/sshd_config</code> You can test this with their client:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function bounce () {
</span><span class='line'>  FILE="$(mktemp)"
</span><span class='line'>  rm -rf ${FILE}
</span><span class='line'>  ssh-keygen -f ${FILE} -N ""
</span><span class='line'>  ./bless_client.py \
</span><span class='line'>    us-east-1 \
</span><span class='line'>    bless \
</span><span class='line'>    testdev $(curl --silent https://ipecho.net/plain) \
</span><span class='line'>    ec2-user $(ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1') \
</span><span class='line'>    "" \
</span><span class='line'>    ${FILE}.pub ${FILE}-cert.pub
</span><span class='line'>  ssh -i ${FILE} ec2-user@$1 "${@:2}"
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>$ bounce 10.0.0.19</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[oVirt and Vagrant]]></title>
    <link href="https://marcyoung.us/post/ovirt4-vagrant"/>
    <updated>2017-02-10T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/ovirt-vagrant</id>
    <content type="html"><![CDATA[<p>I wrote a <a href="https://www.ovirt.org/blog/2017/02/using-oVirt-vagrant/">blog post</a> over on oVirt about how to use the most recent release of my new vagrant oVirt v4 provider.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homemade planck]]></title>
    <link href="https://marcyoung.us/post/planck"/>
    <updated>2017-01-18T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/planck</id>
    <content type="html"><![CDATA[<p>I made a super tedious keyboard.<!-- more --></p>

<p>I’ve owned a Das Keyboard Model S Ultimate for about 3 years now. It was mostly to get into keyboards and try out a nice mechanical one. I still love it, but after getting more interested in them, I decided to build a planck.</p>

<p>A planck is basically an ortholinear keyboard (meaning the keys are in perfect columns and rows) and has 47-48 keys (4x12 called a 40%).</p>

<p>Basically your fingers do the work and your thumbs toggle the keyboard to differently layers.</p>

<p>I 3d printed the case, then wired up the columns and rows using 1N4148 diodes to a teensy. My first iteration used what looked like a really awesome 3d printed base, but it ended up overwhelming me because the wires had to be routed through very very tiny spaces, and my soldering iron: a) needed some love and b) kept melting the 3d printed base (because of all the tight spots). I then printed a much different and standard base and things went smoother.</p>

<p>I also got overwhelmed with the <a href="https://github.com/tmk/tmk_keyboard">TMK firmware</a>. Everyone says it’s easy, and you’d think as a programmer I’d have some ease with it, but it’s super confusing and talks about bit shifting like it’s just adding numbers and you should be able to do it in your sleep. Then I found <a href="https://kb.sized.io/">this site</a> and was done in under an hour. Obligatory pictures.</p>

<p><img class="left" src="https://marcyoung.us/images/IMG_20160927_062158.jpg" title="keyboard 1" >
<img class="left" src="https://marcyoung.us/images/IMG_20161224_143647.jpg" title="keyboard 1" >
<img class="left" src="https://marcyoung.us/images/IMG_20161225_050545.jpg" title="keyboard 1" >
<img class="left" src="https://marcyoung.us/images/IMG_20170104_145354.jpg" title="keyboard 1" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS ECS Hot/Warm ELK + Curator Part 4 - Curator]]></title>
    <link href="https://marcyoung.us/post/dockerized-elk-part-4"/>
    <updated>2016-08-08T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/dockerized-elk-part4</id>
    <content type="html"><![CDATA[<p>The previous part focused on getting Kibana up. This one focuses on getting Curator <!-- more --></p>

<h1>Disclaimer</h1>

<p>I&rsquo;m redacting any information that might seem sensitive such as account numbers. Use your discretion and make sure you use values that make sense for things blacked out in images or in <code>{}</code> notation.</p>

<h1>Part 2 - Curator</h1>

<p>This is the coolest part of the whole stack.</p>

<p>We&rsquo;re basically going to build/deploy a docker image for Curator, then upload a cloudformation template that creates a Lambda function to run it.</p>

<p>The lambda function will have a trigger of your choice (probably a scheduled event for once a day if I had to guess) and will run two tasks.</p>

<p>Task 1 is a rotate warm task that will tell Elasticsearch to move any indexes to warm that (in this case) are 0 days old (for demo purposes).
Task 2 is a delete task that tells Elasticsearch to delete any indexes older than 14 days.</p>

<p>You can expand this to stagger them, take snapshots, etc. This allows you to have schedules that define how the data moves from box to box or to backups!</p>

<p>First thing we need to do is build the container and push it to ECR.</p>

<p>In the ECR portion of the AWS console, create a new repository called <code>test/curator</code>.</p>

<p>Then in your console for <a href="https://github.com/myoung34/elk-docker-aws/blob/master/curator/Dockerfile">the curator dockerfile</a> run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker build -t curator:local .
</span><span class='line'>docker tag curator:local \
</span><span class='line'>   {acctnum}.dkr.ecr.us-east-1.amazonaws.com/test/curator:latest
</span><span class='line'>$(aws ecr get-login)
</span><span class='line'>docker push {acctnum}.dkr.ecr.us-east-1.amazonaws.com/test/curator:latest</span></code></pre></td></tr></table></div></figure>


<p>Once this is pushed you can verify it by looking for a tag <code>latest</code> in your <code>test/curator</code> ECR repository.</p>

<p>Next upload <a href="https://github.com/myoung34/elk-docker-aws/blob/master/curator/cloudformation.json">this cloudformation template</a> to Cloudformation (modifying the parameters as you need).</p>

<p><img src="../../images/elk/curator_cft_params.png" alt="" /></p>

<p>Once it is complete, go to the Lambda portion of AWS and click your function that was created. You can test it by clicking &ldquo;Test&rdquo; and just hitting &ldquo;submit&rdquo;.</p>

<p>You will see some output such as:</p>

<p><img src="../../images/elk/curator_lambda.png" alt="" /></p>

<p>If you go to the ECS console quickly you will see two tasks have been created and are being run for the first time (will be in pending for a minute while the image is being pulled to the instance running it).</p>

<p><img src="../../images/elk/curator_delete_task.png" alt="" /></p>

<p><img src="../../images/elk/curator_rotate_warm_task.png" alt="" /></p>

<p>And now if you look at your kopf plugin you will see the data move from the &ldquo;hot&rdquo; node:</p>

<p><img src="../../images/elk/curator_before.png" alt="" /></p>

<p>To eventually the &ldquo;warm&rdquo; node:</p>

<p><img src="../../images/elk/curator_after.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS ECS Hot/Warm ELK + Curator Part 3 - Kibana]]></title>
    <link href="https://marcyoung.us/post/dockerized-elk-part-3"/>
    <updated>2016-08-08T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/dockerized-elk-part3</id>
    <content type="html"><![CDATA[<p>The previous part focused on getting logstash up. This one focuses on getting Kibana <!-- more --></p>

<h1>Disclaimer</h1>

<p>I&rsquo;m redacting any information that might seem sensitive such as account numbers. Use your discretion and make sure you use values that make sense for things blacked out in images or in <code>{}</code> notation.</p>

<h1>Part 2 - Kibana</h1>

<p>First thing we need to do is build the container and push it to ECR.</p>

<p>In the ECR portion of the AWS console, create a new repository called <code>test/kibana</code>.</p>

<p>Then in your console for <a href="https://github.com/myoung34/elk-docker-aws/blob/master/kibana/Dockerfile">the kibana dockerfile</a> run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker build -t kibana:local .
</span><span class='line'>docker tag kibana:local \
</span><span class='line'>   {acctnum}.dkr.ecr.us-east-1.amazonaws.com/test/kibana:latest
</span><span class='line'>$(aws ecr get-login)
</span><span class='line'>docker push {acctnum}.dkr.ecr.us-east-1.amazonaws.com/test/kibana:latest</span></code></pre></td></tr></table></div></figure>


<p>Once this is pushed you can verify it by looking for a tag <code>latest</code> in your <code>test/kibana</code> ECR repository.</p>

<p>Next upload <a href="https://github.com/myoung34/elk-docker-aws/blob/master/kibana/cloudformation.json">this cloudformation template</a> to Cloudformation (modifying the parameters as you need).</p>

<p>It will look almost exactly like the logstash upload in terms of parameters.</p>

<p>You now have a kibana instance! My next step would be to configure a Route53 domain name to point to the kibana load balancer so you can have real SSL without any chain issues.</p>

<h1>Takeaways</h1>

<p>Similar to what we did with elasticsearch and logstash, kibana is listening on port <code>5601</code> via HTTPS. It uses self-signed SSL certificates. The dockerfile is actually identical to the verified one on the Dockerhub, except I expanded the <code>docker-entrypoint.sh</code> to take more parameters since the base one doesn&rsquo;t allow much configurability: <a href="https://github.com/docker-library/kibana/pull/45">https://github.com/docker-library/kibana/pull/45</a></p>

<p>If you browse to your ELB or route53 entry on port 443, you&rsquo;ll be greeted by kibana.</p>

<p><img src="../../images/elk/kibana_first.png" alt="" /></p>

<p>If you configure your index to <code>test-*</code> your dashboard will show the logs Logstash ingested!</p>

<p><img src="../../images/elk/kibana_dash.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS ECS Hot/Warm ELK + Curator Part 2 - Logstash]]></title>
    <link href="https://marcyoung.us/post/dockerized-elk-part-2"/>
    <updated>2016-08-08T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/dockerized-elk-part2</id>
    <content type="html"><![CDATA[<p>The previous part focused on getting the ECS cluster, ECR repos, and Elasticsearch up. This one focuses on getting Logstash <!-- more --></p>

<h1>Disclaimer</h1>

<p>I&rsquo;m redacting any information that might seem sensitive such as account numbers. Use your discretion and make sure you use values that make sense for things blacked out in images or in <code>{}</code> notation.</p>

<h1>Part 2a - Logstash</h1>

<p>First thing we need to do is build the container and push it to ECR.</p>

<p>In the ECR portion of the AWS console, create a new repository called <code>test/logstash</code>.</p>

<p>Then in your console for <a href="https://github.com/myoung34/elk-docker-aws/blob/master/logstash/Dockerfile">the logstash dockerfile</a> run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker build -t logstash:local .
</span><span class='line'>docker tag logstash:local \
</span><span class='line'>   {acctnum}.dkr.ecr.us-east-1.amazonaws.com/test/logstash:latest
</span><span class='line'>$(aws ecr get-login)
</span><span class='line'>docker push {acctnum}.dkr.ecr.us-east-1.amazonaws.com/test/logstash:latest</span></code></pre></td></tr></table></div></figure>


<p>Once this is pushed you can verify it by looking for a tag <code>latest</code> in your <code>test/logstash</code> ECR repository.</p>

<p>Next upload <a href="https://github.com/myoung34/elk-docker-aws/blob/master/logstash/cloudformation.json">this cloudformation template</a> to Cloudformation (modifying the parameters as you need).</p>

<p><img src="../../images/elk/logstash_cft.png" alt="" /></p>

<p>You now have a listening logstash instance! My next step would be to configure a Route53 domain name to point to the logstash load balancer so you can have real SSL without any chain issues.</p>

<h1>Takeaways</h1>

<p>Similar to what we did with elasticsearch, logstash is listening on port <code>5000</code> for beats input. It uses self-signed SSL certificates. Most beats forwarders won&rsquo;t play nice with that out of the box, but if you configure Route53 to point to the ELB and use ACM, it will be valid SSL. The load balancer will use TCP to send to the logstash instances and not care that it is self-signed.</p>

<p>The <a href="https://github.com/myoung34/elk-docker-aws/blob/master/logstash/logstash.conf">logstash configuration file</a> uses dynamic indexes, so whatever you set <code>document_type</code> on your beats configuration to will become the index.</p>

<h1>Part 2b - Send to logstash</h1>

<p>Install the latest stable logstash and use this filebeat configuration to get ready to ship:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>filebeat:
</span><span class='line'>  prospectors:
</span><span class='line'>    -
</span><span class='line'>      paths:
</span><span class='line'>        - "/var/log/test/*"
</span><span class='line'>      encoding: plain
</span><span class='line'>      input_type: log
</span><span class='line'>      fields_under_root: true
</span><span class='line'>      document_type: test
</span><span class='line'>output:
</span><span class='line'>  logstash:
</span><span class='line'>    hosts: ["log-test.dev.mydom.com:5000"]</span></code></pre></td></tr></table></div></figure>


<p>Next make sure that directory exists via <code>sudo mkdir /var/log/test</code> and start the service (depends on your OS): <code>sudo service filebeat start</code>.</p>

<p>Lastly, lets send something to logstash: <code>echo asdf | sudo tee -a /var/log/test/$(uuidgen)</code>. That will generate a random file and put <code>asdf</code> into it. It should show up in your kopf plugin to view:</p>

<p><img src="../../images/elk/logstash_kopf.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS ECS Hot/Warm ELK + Curator Part 1 - Elasticsearch]]></title>
    <link href="https://marcyoung.us/post/dockerized-elk-part-1"/>
    <updated>2016-08-08T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/dockerized-elk-part1</id>
    <content type="html"><![CDATA[<p>This will be a write-up on how to get a self-healing and self-curating SSL-enabled Hot/Warm ELK stack using ECS and lambda <!-- more --></p>

<h1>Disclaimer</h1>

<p>I&rsquo;m redacting any information that might seem sensitive such as account numbers. Use your discretion and make sure you use values that make sense for things blacked out in images or in <code>{}</code> notation.</p>

<h1>Part 1a - ECS Base Instances</h1>

<p>This is actually one of the easier pieces. We need a base ECS cluster to run our tasks on. <a href="https://github.com/myoung34/elk-docker-aws/blob/master/ecs_base/cloudformation.json">This cloudformation template</a> assumes your VPC is connectible, etc. If your VPC is compatible, just upload that file in cloudformation and when it&rsquo;s done, you&rsquo;ll have a cluster ready!</p>

<p>The params tab:</p>

<p><img src="../../images/elk/elk_base_cft.png" alt="" /></p>

<p>After completion:</p>

<p><img src="../../images/elk/elk_base_cft_output.png" alt="" /></p>

<p>If you were to go to your ECS tab in your AWS console, you will see a new cluster with the name <code>elk-stack-ECSCluster-1A5AXF087VXOD</code> and eventually you would have 4 EC2 instances available for running tasks.</p>

<h1>Part 1b - Elasticsearch</h1>

<p>First thing we need to do is build the container and push it to ECR.</p>

<p>In the ECR portion of the AWS console, create a new repository called <code>test/elasticsearch</code>.</p>

<p>Then in your console for <a href="https://github.com/myoung34/elk-docker-aws/tree/master/elasticsearch">the elasticsearch dockerfile</a> run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker build -t elasticsearch:local .
</span><span class='line'>docker tag elasticsearch:local \
</span><span class='line'>   {acctnum}.dkr.ecr.us-east-1.amazonaws.com/test/elasticsearch:latest
</span><span class='line'>$(aws ecr get-login)
</span><span class='line'>docker push {acctnum}.dkr.ecr.us-east-1.amazonaws.com/test/elasticsearch:latest</span></code></pre></td></tr></table></div></figure>


<p>Once this is pushed you can verify it by looking for a tag <code>latest</code> in your <code>test/elasticsearch</code> ECR repository.</p>

<p>Next upload <a href="https://github.com/myoung34/elk-docker-aws/blob/master/elasticsearch/cloudformation.json">this cloudformation template</a> to Cloudformation (modifying the parameters as you need).</p>

<p>The parameters I used:</p>

<p><img src="../../images/elk/elasticsearch_cft_params.png" alt="" /></p>

<p>And the output tab:</p>

<p><img src="../../images/elk/elasticsearch_cft_output.png" alt="" /></p>

<p>If you paid enough attention to the code in the <a href="https://github.com/myoung34/elk-docker-aws/blob/master/elasticsearch/docker-entrypoint.sh">docker-entrypoint.sh</a> file you might notice this line: <code>export NODE_TYPE=$([[ `echo $((1 + RANDOM % 2))` -eq "1" ]] &amp;&amp; echo warm || echo hot)</code>.</p>

<p>That, along with the <a href="https://github.com/myoung34/elk-docker-aws/blob/master/elasticsearch/elasticsearch.yml">elasticsearch configuration yaml</a>, namely the line: <code>node.box_type: ${NODE_TYPE}</code> gives you a random 50/50 chance of getting a &ldquo;hot&rdquo; or &ldquo;warm&rdquo; node. <a href="https://www.elastic.co/blog/hot-warm-architecture">The hot/warm architecture is outlined here</a> but basically you&rsquo;re going to have nodes that have attributes <code>box_type: hot</code> or <code>box_type: warm</code>. We&rsquo;ll go over how the data matters later, but for now you can verify that like in these screen shots by browsing to your elastic load balancer such as: <code>internal-elasticse-ESElasti-WYA9ZLRBVV8X-214980960.us-east-1.elb.amazonaws.com:9200/_plugin/kopf</code> and viewing the attributes for your node.</p>

<p><img src="../../images/elk/elasticsearch_kopf_hot.png" alt="" /></p>

<p><img src="../../images/elk/elasticsearch_kopf_warm.png" alt="" /></p>

<p>You now have an SSL-enabled ELK stack that will have hot or warm nodes.</p>

<h1>Takeaways</h1>

<p>SSL is enabled by using NGINX as an SSL-listener in front of the ES port <code>9200</code> using self-signed certs. Elasticsearch is configured to use <code>19200</code> but broadcast <code>9200</code>. This lets the nodes themselves talk over SSL using insecure TLS, but they look normal to the outside world. The Load balancer uses ACM from Amazon with a real domain <code>*.dev.mydom.com</code> (in my screenshots) to terminate SSL with a real chain, but communicates over TCP to the ES nodes to the self-signed server.</p>

<p>The reason for doing this: things like to be able to verify the chain, and don&rsquo;t like self-signed certs. As you see in my screen shot, since I used route53 to point <code>es-test.dev.mydom.com</code> to the ELB (which uses a valid ACM cert), everything is encrypted but outward facing services will not have chain errors.</p>

<p>Hot-warm could be better implemented, but for demonstration purposes, 50/50 is fine if you spin up 4+ nodes. If you only use 2 ECS tasks such as the screen shots, you might end up with both hot or both warm. If you&rsquo;re following along, you&rsquo;ll want at least one of each for curator to make sense.</p>
]]></content>
  </entry>
  
</feed>
