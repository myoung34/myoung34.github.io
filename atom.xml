<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Marcus Young]]></title>
  <link href="http://marcyoung.us/atom.xml" rel="self"/>
  <link href="http://marcyoung.us/"/>
  <updated>2014-10-17T14:24:22-05:00</updated>
  <id>http://marcyoung.us/</id>
  <author>
    <name><![CDATA[Marcus Young]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UDOO and an Arduino LCD Part 2 - 3d Printer]]></title>
    <link href="http://marcyoung.us/post/udoo-and-an-arduino-lcd-3d"/>
    <updated>2014-07-26T00:00:00-05:00</updated>
    <id>http://marcyoung.us/post/udoo-3d</id>
    <content type="html"><![CDATA[<p>I finally broke down and bought a <a href="http://www.bukobot.com/bukito">3d printer</a>. <!--more--> It&rsquo;s from Deezmaker, which I got off kickstarter. I took a pre-made udoo case off thingiverse, and modified it to fit my needs. Thankfully, I still remember how to use Blender, which has native STL support.</p>

<p>I expanded it horizontally a little to allow some cord room, and laid the sata drive below it, with a 3d printed spacer. Then mounted the UDOO inside. After much trial and error on the lid, I got snap fit, and some holes cut out for the button and LCD. I added screw mounts, but that didn&rsquo;t work out too well, so I ended up supergluing my home-made PCB&rsquo;s to the underside of it. One is the clock battery, the other is a push button and resistor, attached to an Arduino riser shield just below the screen. Bam.</p>

<p>Also, excuse the not-so-perfect printing and mounting. I&rsquo;ve literally not printed out anything else. Go big or go home folks. Related: I love 3d printing.</p>

<p>For pics, checkout <a href="http://marcyoung.us/post/udoo-and-an-arduino-lcd">the updated page</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Puppet Module - MirthConnect]]></title>
    <link href="http://marcyoung.us/post/mirth-puppet-module"/>
    <updated>2014-05-14T00:00:00-05:00</updated>
    <id>http://marcyoung.us/post/mirth-puppet-module</id>
    <content type="html"><![CDATA[<p>I released a new Puppet module to the forge out of another work necessity. Mirth is used pretty heavily for HL7 ETL, and has a ton of other uses. <!-- more --></p>

<p>I started out at my current gig doing this, so it hurt a little to have to automate it, mostly out of fear of getting back into that engine =).</p>

<p>It can be found <a href="https://github.com/myoung34/puppet-mirthconnect">on my github</a> or at the <a href="https://forge.puppetlabs.com/myoung34/mirthconnect">Puppet forge</a>.</p>

<p>Basic Usage:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yumrepo { "my mirth repo":
</span><span class='line'>  baseurl  =&gt; "http://server/pulp/repos/mirthconnect/",
</span><span class='line'>  descr    =&gt; "My Mirth Connect Repository",
</span><span class='line'>  enabled  =&gt; 1,
</span><span class='line'>  gpgcheck =&gt; 0,
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>class { 'mirthconnect':
</span><span class='line'>  provider =&gt; 'yum', #default is 'rpm'
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Complete Continuous Deployment Using Puppet and Pulp - Part 4 - Puppet and Jenkins]]></title>
    <link href="http://marcyoung.us/post/continuous-deployment-using-puppet-and-pulp-pt-4-puppet-jenkins"/>
    <updated>2014-03-22T00:00:00-05:00</updated>
    <id>http://marcyoung.us/post/continuous-deployment-part-4-puppet-and-jenkins</id>
    <content type="html"><![CDATA[<p>So. We have an application that it&rsquo;s constantly pushed to Yum when it&rsquo;s modified. We have a puppet manifest (with tests) that can deploy this application and keep it up to date, and we even have r10k handling the deployment of those puppet modules so that we don&rsquo;t have to worry about dependencies, and we can even stage them! What we don&rsquo;t have is a way of getting changes to that puppet module to the puppet master without remoting in and running r10k. That&rsquo;s easy to fix with jenkins!<!--more--></p>

<p>If you were to stop right now, you&rsquo;re pretty close. But&hellip;remoting into the server to redeploy isn&rsquo;t scalable. What if you forget? What if you have a new guy that made a super awesome bugfix to your puppet module and forgot how to get it up to the servers? Enter jenkins. Note: I have travis-ci set up for the one here, but we&rsquo;re going to duplicate that logic. Travis-CI is nice if your module is on github, but it may not be. Or you may need it to do something else, such as trigger an r10k deployment, so that&rsquo;s why we&rsquo;re still implementing Jenkins.</p>

<h3>The Jenkins job for puppet-exampleservice</h3>

<ol>
<li> Create a free-style job and name it something like <em>puppet-exampleservice</em></li>
<li> Point it to your git repo for the <em>puppet-exampleservice</em> module and have it poll SCM every x minutes.</li>
<li> Have it run in rvm 2.0.0</li>
<li> Create an <strong>execute shell</strong> build step with:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle install
</span><span class='line'>bundle exec rake</span></code></pre></td></tr></table></div></figure>


<ol>
<li> From the <em>warnings</em> plugin, add a <strong>post-build action</strong> to <em>scan for compiler warnings</em>

<ul>
<li>set <em>scan console log</em> to <strong>puppet-lint</strong></li>
</ul>
</li>
</ol>


<p>From here, you now have something similar to Travis-Ci. Hit Build, and it should go green. Congrats, you now have automated testing. What you need now is that automated deployment I&rsquo;ve been hinting at. But that&rsquo;s easy!</p>

<h3>The Jenkins job to re-deploy puppet modules on the ENC</h3>

<ol>
<li> Create a free-style job and name it something like <em>Redeploy Puppet Modules</em></li>
<li> Add a string parameter <strong>git_branch</strong></li>
<li> Add a build step <strong>execute shell script on remote host using ssh</strong>

<ul>
<li>Select your ENC (set one up in the <strong>Manage jenkins</strong> portion first and make sure your private/public keys work) with:</li>
</ul>
</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Validate the build param. Should be 'dev' or 'master'
</span><span class='line'># This corresponds to the r10k setup.
</span><span class='line'>environment=$(echo "$git_branch" | awk '{split($0,a,"/"); print a[2]}')
</span><span class='line'>if [[ "$environment" == "master" ]]; then
</span><span class='line'>  rm -rf /var/cache/r10k/* # Sometimes r10k won't deploy and acts like it's up to date.
</span><span class='line'>  /usr/bin/r10k deploy environment master -v -p
</span><span class='line'>  exit 0
</span><span class='line'>elif [[ "$environment" == "dev" ]]; then
</span><span class='line'>  rm -rf /var/cache/r10k/* # Sometimes r10k won't deploy and acts like it's up to date.
</span><span class='line'>  /usr/bin/r10k deploy environment dev -v -p
</span><span class='line'>  exit 0
</span><span class='line'>else
</span><span class='line'>  echo "Invalid environment parameter [$environment] passed to build."
</span><span class='line'>  echo "  Should be one of 'dev' or 'master'."
</span><span class='line'>  exit 1
</span><span class='line'>fi</span></code></pre></td></tr></table></div></figure>


<p>You&rsquo;re now ready for your previous module to notify this build.</p>

<ol>
<li> Go back to your puppet module job and:

<ol>
<li>Create a post-build action <strong>trigger parameterized build on other projects</strong></li>
<li>Set &lsquo;projects to build&rsquo; to <strong>Redeploy Puppet Modules</strong></li>
<li>Set &lsquo;Trigger when build is&rsquo; to <strong>Stable or unstable but not failed</strong></li>
<li>Add a parameter &lsquo;Predefined parameters&rsquo; and give it: <code>git_branch=$GIT_BRANCH</code></li>
</ol>
</li>
</ol>


<h3>You&rsquo;re missing a Jenkins job</h3>

<p>Technically you&rsquo;re close, but you might want to redeploy if your r10k changes. You can do that right now!</p>

<ol>
<li> Create a new free-style joba and call it <em>puppet-r10k</em></li>
<li> There are no tests, so just point it at your r10k git repo and watch <em>dev</em> and <em>master</em> branches</li>
<li> Make it poll SCM every x minutes</li>
<li> Create a post-build action <strong>trigger parameterized build on other projects</strong>

<ul>
<li>Set &lsquo;projects to build&rsquo; to <strong>Redeploy Puppet Modules</strong></li>
<li>Set &lsquo;Trigger when build is&rsquo; to <strong>Stable or unstable but not failed</strong></li>
<li>Add a parameter &lsquo;Predefined parameters&rsquo; and give it:</li>
</ul>
</li>
</ol>


<h3>You&rsquo;re Done!!1one</h3>

<p>Now build your puppet module. When it goes green, it will notify the <strong>Redeploy Puppet Modules</strong> job and give it the git branch (<em>dev</em> or <em>master</em>). That build will now parse the git branch, and on the Foreman ENC will run the r10k deployer. Don&rsquo;t you have that fuzzy feeling inside because you can now redeploy your modules to the server by just making a commit? I do and I don&rsquo;t even know you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Complete Continuous Deployment Using Puppet and Pulp - Part 3 - Enter Puppet]]></title>
    <link href="http://marcyoung.us/post/continuous-deployment-using-puppet-and-pulp-pt-3-enter-puppet"/>
    <updated>2014-03-21T00:00:00-05:00</updated>
    <id>http://marcyoung.us/post/continuous-deployment-part-3-enter-puppet</id>
    <content type="html"><![CDATA[<p>Now that we have a package, we need a way of installing it amirite? We&rsquo;re going to write a puppet module for this package complete with rspec tests<!--more--></p>

<h1>The Module</h1>

<p>The module for this is going to be simple. The application as it is right now is an HTTP server in python. So our module needs to do these things:</p>

<ol>
<li> Manage the package and make sure it&rsquo;s always the latest

<ul>
<li>This ensures that new builds will be reinstalled</li>
</ul>
</li>
<li> Open the firewall for TCP port 8000</li>
<li> Make sure dependencies are installed

<ul>
<li>The RPM has a dependency set for <em>python</em>, so yum would take care of this, but I like to be explicit and not assume that the RPM knows edge cases.</li>
</ul>
</li>
</ol>


<h2>puppet-exampleservice breakdown</h2>

<h3>Files</h3>

<ul>
<li><em>manifests/init.pp</em>

<ul>
<li>This just kickstarts the puppet catalog for this module. It will call our <em>exampleservice.pp</em> class</li>
</ul>
</li>
<li><em>manifests/exampleservice.pp</em>

<ul>
<li>This is the hard worker. It will make sure the service is running, the package is the latest, and that the firewall is open. This implies a dependency on the puppetlabs-firewall module.</li>
</ul>
</li>
<li><em>Puppetfile</em>

<ul>
<li>This will let you know dependencies, such as the <em>puppetlabs-firewall</em> module</li>
</ul>
</li>
<li><em>.travis.yml</em> and <em>.fixtures.yml</em>

<ul>
<li>These are specific to <a href="http://travis-ci.org">travis-ci</a>. If your module will be internal, and not at github, you won&rsquo;t need this. I did so because it&rsquo;s at github. I&rsquo;ll be duplicating this CI at jenkins, and you&rsquo;ll see why later.</li>
</ul>
</li>
<li><em>Rakefile</em>, <em>Gemfile</em>, and <em>spec/</em>

<ul>
<li>These are all part of the testing framework. The tests included for this module are <strong>Puppetlint</strong> (with some disabled checks) and <strong>Rspec-Puppet</strong></li>
</ul>
</li>
</ul>


<h3>Tests</h3>

<ol>
<li> Puppetlint

<ul>
<li>Checks syntax and best practices for your modules. Highly recommended. To make use of this in jenkins, you&rsquo;ll want to take a look at <a href="http://hackers.lookout.com/2012/07/puppet-lint-with-jenkins/">this guide</a></li>
</ul>
</li>
<li> RSpec-Puppet

<ul>
<li>Let&rsquo;s you write assertions for the catalog. Examples would include testing manifest logic, like not doing something if a flag was true or false, etc. See <a href="rspec-puppet.com/tutorial/">the rspec-puppet pages</a></li>
</ul>
</li>
</ol>


<h1>Making your module work via r10k</h1>

<p>You have a module. How do you get it on foreman, or any Puppet master to actually work? Are you going to remote into it, check it out to some repository folder, symlink it to <strong>/etc/puppet/modules</strong> and call it good? That&rsquo;ll work, but how do you manage dependencies? Remember, you need the <em>puppetlabs-firewall</em> module there too for this to work. You&rsquo;ll probably need others. What happens when you have to fix this module? Fix it, see the tests are green (or dear god fix it on the ENC), and call that your process? The point of continous deployment, devops, etc etc is to have <strong>consistency</strong>. Having a one-off process for deploying your configuration management violates what you&rsquo;re trying to solve! Enter <strong>r10k</strong>. Essentially all you need is a new git repository (call this one <a href="https://github.com/myoung34/blog-r10k">blog-r10k</a> that holds information about what modules you need, where they came from, and what versions you want of them and where. This also adds the ability to <strong>stage</strong> modules. You can have a <em>dev</em> branch for your module, deploy it to <em>development</em> nodes, and vice versa. This means you can stop hoping your fix works and prove it before it hits production boxes.</p>

<p>In the <a href="http://marcyoung.us/post/continuous-deployment-using-puppet-and-pulp-pt-1-the-machines/">Part 1</a> I hinted at modifying the <em>[development]</em> and <em>[production]</em> labels in the puppet configuration file. Now is when you find out why.</p>

<h3>Set up r10k</h3>

<p>On your ENC, create a file <strong>/etc/r10k.yaml</strong> with this content:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:cachedir: '/var/cache/r10k'
</span><span class='line'>:sources:
</span><span class='line'>  :puppet:
</span><span class='line'>    remote: "https://github.com/myoung34/blog-r10k.git"
</span><span class='line'>    basedir: '/etc/puppet/environments'
</span><span class='line'>:purgedirs:
</span><span class='line'>  - /etc/puppet/environments</span></code></pre></td></tr></table></div></figure>


<h3>Deploy your modules the &lsquo;hot&rsquo; way</h3>

<p>How? On the ENC type: <code># r10k deploy environment -v -p</code></p>

<h3>What wizardry is this?!</h3>

<p>That r10k file tells you to purge <em>/etc/puppet/environments</em> and deploy the <em>Puppetfile</em> from the <a href="https://github.com/myoung34/blog-r10k/blob/master/Puppetfile">r10k repo</a> in a similar fashion to Gem, NuGet, etc. You told it to deploy all environments it knew about to that directory. The output showed a <strong>dev</strong> environment and a <strong>master</strong> environment. These are git branches! Each branch in the <a href="https://github.com/myoung34/blog-r10k/blob/master/Puppetfile">r10k repo</a> has a Puppetfile. You&rsquo;ll notice that in the master branch, it said to deploy <em>puppetlabs-firewall</em> and <em>puppet-exampleservice</em>. Look in the dev branch of the <a href="https://github.com/myoung34/blog-r10k/blob/master/Puppetfile">r10k repo</a>. The Puppetfile says to use <code>:ref =&gt; 'dev'</code> for your <em>puppet-exampleservice</em>. You just staged your code. Your <strong>dev</strong> code now deploys to <strong>/etc/puppet/environments/dev/modules</strong> and your <strong>master</strong> code now deploys to <strong>/etc/puppet/environments/master/modules</strong> ! Remember the change you made to your puppet.conf? Any node that has <code>environment = development</code> will generate its catalog using <strong>/etc/puppet/environment/dev/modules</strong> and <code>environment = production</code> will generate its catalog using <strong>/etc/puppet/environment/master/modules</strong>.</p>

<h3>Why you care even if you think you don&rsquo;t</h3>

<p>That passive aggressive statement I had criticizing your workflow above is now null. If you make a change to your module in <strong>dev</strong>, all you have to do is remote into your puppet master where <em>r10k</em> is, and type <code># r10k deploy environment dev -v -p</code>. No more missing dependencies, it&rsquo;s hands off!</p>

<h3>What&rsquo;s missing</h3>

<ol>
<li> Acceptance tests

<ul>
<li>Before this would have been <strong>rspec-system-puppet</strong> but it&rsquo;s deprecated for <a href="https://github.com/puppetlabs/beaker">Beaker</a>. Note that both of these use Vagrant to spin up a siloed Virtual Machine to test the module in isolation. If you&rsquo;re wanting to do this, make sure your jenkins can spin up a virtual machine. If your jenkins is at AWS for example, you&rsquo;d probably want to look at having it spin up an AMI to run this. My current setup does not allow the creation of VMs from a VM (My jenkins is a VM).</li>
</ul>
</li>
</ol>


<h2>What you have at this point in this blog post</h2>

<p>Right now, you have a Jenkins box that generates new RPMs of your application whenever you make changes to it. You also have a manifest that can manage it. However, this is a one-off. If you have to modify your manifest, you have to redeploy it via r10k to the ENC (foreman). It would be nice if you could utilize Jenkins for this. That&rsquo;s in the next post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Complete Continuous Deployment Using Puppet and Pulp - Part 2 - The Application]]></title>
    <link href="http://marcyoung.us/post/continuous-deployment-using-puppet-and-pulp-pt-2-the-app"/>
    <updated>2014-03-20T00:00:00-05:00</updated>
    <id>http://marcyoung.us/post/continuous-deployment-part-2-the-application</id>
    <content type="html"><![CDATA[<p>Our application will be simple, as its goal is only to demonstrate a daemon that needs to be managed via init.d and packaged as an RPM.<!--more--></p>

<h1>The Application</h1>

<p>Like I said, it&rsquo;s simple. It&rsquo;s going to be a shell script that runs the <em>python SimpleHTTPServer</em> on port 8000, but it brings up some real life issues:</p>

<ul>
<li>How can we package it</li>
<li>How can we ensure the port is open</li>
<li>How can we test it</li>
</ul>


<p>The code is on <a href="https://github.com/myoung34/blog-exampleservice">this github page</a>.</p>

<p>You&rsquo;ll notice the layout mimics its place on the filesystem. This may not be a realistic case, but it sure make sthe POC easy. You&rsquo;ll notice a <strong>Rakefile</strong> in the repository. This is the heart of our packaging for this. If you look into it, you&rsquo;ll see it&rsquo;s essentially a Makefile (see what I did there???). There are many other ways to approach this, but it&rsquo;s the simplest for now. Basically the rake file will parse the <em>version</em> file (which is <a href="http://semver.org/">semantically versioned</a>), and tries to build an RPM via FPM based on it.</p>

<ol>
<li> The <strong>unstable</strong> build will happen as <code>bundle exec rake unstable</code>

<ul>
<li>This will create an rpm such as: <strong>myapp-0.0.1-beta.1.{timestamp}.x86_64.rpm</strong></li>
<li>This is timestamped because many merges to dev can happen before a version bump.</li>
</ul>
</li>
<li> The <strong>stable</strong> build will happen as <code>bundle exec rake stable</code>

<ul>
<li>This will create an rpm such as <strong>myapp-0.0.1-1.x86_64.rpm</strong></li>
<li>There should be no timestamping here, master merges should always be tagged and versioned appropriately.</li>
</ul>
</li>
<li> Both of the previous builds will attempt to upload to the pulp repository we set up.</li>
</ol>


<h1>The Jenkins set up</h1>

<h3>There is a pre-requisite.</h3>

<p>If you look at the Rakefile closely, you&rsquo;ll see (or have wondered already) that pulp-admin requires a username and password. You wouldn&rsquo;t want to put this in the git repository, so the Rakefile has an implicit requirement for a file <strong>.pulp.yml</strong> in the home directory (for Jenkins this should be <em>/usr/lib/jenkins</em>.</p>

<h3>The Jobs</h3>

<ol>
<li> Unstable Job

<ul>
<li>Create a job that watches that git repository&rsquo;s <strong>dev</strong> branch</li>
<li>The git repository is <a href="https://github.com/myoung34/blog-exampleservice.git">https://github.com/myoung34/blog-exampleservice.git</a></li>
<li>Poll SCM every 3 minutes <code>H/3 * * * *</code></li>
<li>Run under rvm. I chose <strong>2.0.0</strong></li>
<li>Run a build script:</li>
</ul>
</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle install
</span><span class='line'>bundle exec rake</span></code></pre></td></tr></table></div></figure>


<ol>
<li> Stable Job

<ul>
<li>Create a job that watches that git repository&rsquo;s <strong>master</strong> branch</li>
<li>The git repository is <a href="https://github.com/myoung34/blog-exampleservice.git">https://github.com/myoung34/blog-exampleservice.git</a></li>
<li>Poll SCM every 3 minutes <code>H/3 * * * *</code></li>
<li>Run under rvm. I chose <strong>2.0.0</strong></li>
<li>Run a build script:</li>
</ul>
</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle install
</span><span class='line'>bundle exec rake stable</span></code></pre></td></tr></table></div></figure>


<h1>Profit</h1>

<p>You&rsquo;ll notice that each time you make a change to the git repository, it will build an RPM for it and upload it to the Pulp server. That means that if you&rsquo;re subscribed to that Yum repository, you could do a <code>yum update myapp</code> and you&rsquo;d get a new version. We&rsquo;re getting very close to done =)</p>

<p><img class="left" src="http://marcyoung.us/images/jenkinsbuild.png" title="jenkins" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Complete Continuous Deployment Using Puppet and Pulp - Part 1 - The Machines]]></title>
    <link href="http://marcyoung.us/post/continuous-deployment-using-puppet-and-pulp-pt-1-the-machines"/>
    <updated>2014-03-19T00:00:00-05:00</updated>
    <id>http://marcyoung.us/post/continuous-deployment-part-1-the-machines</id>
    <content type="html"><![CDATA[<p>You&rsquo;re going to need a minimum of 4 servers. Before you freak out, that&rsquo;s to keep things simple. Again, calm down. Also, you&rsquo;ll see I like CentOS. All the servers I built were CentOS 6.5 x86_64<!--more--></p>

<h1>Servers</h1>

<h2>Git server</h2>

<p>For this you don&rsquo;t really need to set this one up, but most likely you&rsquo;ll have an internal git server. I&rsquo;ll be using Github for this demo. Use whatever you like.</p>

<h2>Pulp</h2>

<p>Set up the server and client via <a href="http://pulp-user-guide.readthedocs.org/en/pulp-2.3/installation.html">this guide</a>.</p>

<p>When done, go ahead and create an <em>unstable</em> feed via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pulp-admin login -uadmin -padmin
</span><span class='line'>pulp-admin rpm repo create --repo-id=unstable \
</span><span class='line'>  --relative-url=unstable --serve-http=true \
</span><span class='line'>  --display-name='Unstable Packages'
</span><span class='line'>pulp-admin logout</span></code></pre></td></tr></table></div></figure>


<h2>Jenkins</h2>

<p>Follow <a href="https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+RedHat+distributions">this guide</a> to set up jenkins.</p>

<p>Install the jenkins plugins:</p>

<ul>
<li>git scm</li>
<li>ssh plugin</li>
<li>rvm</li>
<li>warnings</li>
</ul>


<p>Install these extra Yum packages:</p>

<p><code>yum install -y rpm-build rpm ruby ruby-devel rubygems git automake autoconf gcc gcc-c++</code></p>

<p><a href="http://rvm.io">Set up RVM</a></p>

<p>Install <a href="https://github.com/jordansissel/fpm">FPM</a> via gem: <code>gem install fpm</code></p>

<p>Install the pulp-admin tools the same way you did on the pulp server <strong>Not the server, just the admin tools!</strong></p>

<p>Go ahead an ensure all these bits and pieces work, such as connecting to pulp via the login command, using rvm, etc. Jenkins is the heavy lifter in this stack.</p>

<h2>Foreman</h2>

<p><a href="http://theforeman.org/manuals/1.4/quickstart_guide.html#Installation">The guide for 1.4.1 is here</a></p>

<p>Install <strong>r10k</strong> via gem: <code>gem install r10k</code></p>

<p>Also, install the Puppetlabs yum repository and update puppet to 3.4.2 or higher.</p>

<p>Updating Puppet from 2 to 3 on Foreman requires some configuration changes. To get these, just re-run the <code># foreman-installer</code> command.</p>

<p>Make these changes to <strong>/etc/puppet/puppet.conf</strong> for now:</p>

<ul>
<li>Under the <strong>[master]</strong> section add: <code>hiera_config   = $confdir/hiera/master/hiera.yaml</code></li>
<li>Replace the <strong>[development]</strong> and <strong>[production]</strong> elements at the bottom with:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[development]
</span><span class='line'>    modulepath     = /etc/puppet/environments/dev/modules:/etc/puppet/modules
</span><span class='line'>    config_version =
</span><span class='line'>[production]
</span><span class='line'>    modulepath     = /etc/puppet/environments/master/modules:/etc/puppet/modules
</span><span class='line'>    config_version =</span></code></pre></td></tr></table></div></figure>


<h2>A puppet node</h2>

<p>Because why not. Install the puppet yum repository and install Puppet 3.4.2 or higher.</p>

<p>Make sure you have <code>pluginsync = true</code> in the <strong>/etc/puppet/puppet.conf</strong> file under <strong>[main]</strong></p>

<p>My assumption before you move on, if you&rsquo;re following along, is that this node can connect to the puppet master (foreman) and generates all green when you run <code># puppet agent -t</code></p>

<p>Lastly, make sure you&rsquo;re subscribed to the Yum repository for the <strong>myapp</strong> package we&rsquo;ve been building so that puppet can install it when we get to that point. To do that, create the file <strong>/etc/yum.repos.d/mypulp.repo</strong> with the contents:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[mypulp]
</span><span class='line'>name=My Pulp Provider - Unstable
</span><span class='line'>baseurl=http://pulp.blindrage.local/pulp/repos/unstable/
</span><span class='line'>enabled=1
</span><span class='line'>gpgcheck=0
</span><span class='line'>metadata_expire=10</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Complete Continuous Deployment Using Puppet and Pulp - Overview]]></title>
    <link href="http://marcyoung.us/post/continuous-deployment-using-puppet-and-pulp-overview"/>
    <updated>2014-03-18T00:00:00-05:00</updated>
    <id>http://marcyoung.us/post/continuous-deployment-overview</id>
    <content type="html"><![CDATA[<p>This will be by far my biggest post to date. I&rsquo;ve been asked from multiple sources about the system I&rsquo;ve set up at my current company, so this is a very small version of it. By the end of this, assuming you follow along, you&rsquo;ll have a multiple node system set up that will deploy a linux service, packaged as an RPM, to internal Yum feeds, with Puppet along the way to keep this continuously deployed. The puppet module I&rsquo;ll write to do this will also be continuous, with all changes to it causing tests to run, and r10k to redeploy them if successful.<!--more--></p>

<p>This series will be in this layout:</p>

<ul>
<li>Overview (this page)</li>
<li><a href="http://marcyoung.us/post/continuous-deployment-using-puppet-and-pulp-pt-1-the-machines/">Part 1 - The Nodes and their purpose in this stack</a></li>
<li><a href="http://marcyoung.us/post/continuous-deployment-using-puppet-and-pulp-pt-2-the-app/">Part 2 - Creating a small linux service that causes new RPM builds when changes are seen via Jenkins</a></li>
<li><a href="http://marcyoung.us/post/continuous-deployment-using-puppet-and-pulp-pt-3-enter-puppet/">Part 3 - Creating a puppet manifest to deploy and maintain the previous package</a></li>
<li><a href="http://marcyoung.us/post/continuous-deployment-using-puppet-and-pulp-pt-4-puppet-jenkins/">Part 4 - Managing the puppet manifests so that changes also run tests and re-deploy to the ENC (foreman)</a>
<!--* [Part 5 - Simplifying your life with vagrant to develop and maintain this setup without worrying about nodes that are subscribed to the packages/puppet manifests]() - not available yet--></li>
</ul>


<h5>Note</h5>

<p>This is by NO MEANS a copy/pasta guide. I&rsquo;m going based on the assumption you just want to see the high level, some code, and the flow. I&rsquo;ll link to guides on how to set up the nodes such as the Pulp server, Foreman server, etc by I won&rsquo;t go into details that don&rsquo;t tie into the end-goal.</p>

<h3>Workflows</h3>

<ol>
<li> Developer workflow

<ul>
<li>Continuous integration of puppet modules

<ul>
<li>Make a change to a puppet module</li>
<li>Jenkins deetects the change and runs tests</li>
<li>Jenkins tells the ENC (puppet master) to re-deploy its modules</li>
</ul>
</li>
<li>Continious Deployment of an application

<ul>
<li>Make a change to your git repository (the package code base)</li>
<li>Jenkins detects the change and runs tests</li>
<li>Jenkins builds an RPM</li>
<li>Jenkins uploads that RPM to a Pulp repository

<ul>
<li>These can be &lsquo;feeds&rsquo;, such as a change to <em>dev</em> branch creating an RPM in an <em>unstable</em> repository. A change to <em>master</em> branch would create an RPM in a <em>stable</em> repository*</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li> Server workflow (puppet agents)

<ul>
<li>Servers subscribe to a repository (stable or unstable)</li>
<li>A Cron job continuously checks for changes to the package in this Yum feed</li>
<li>A new package is detected and is bootstrapped to the server</li>
</ul>
</li>
</ol>


<h3>Glossary</h3>

<ul>
<li>Pulp - a Yum repository client/server similar to Spacewalk, but much more light weight. Think aptly for Redhat</li>
<li>Jenkins - A continuous integration server written in java</li>
<li>Puppet - A client/server configuration  management suite</li>
<li>Foreman - An ENC for puppet. Allows you to do things such as reports, monitoring etc for Puppet nodes, similar to Puppet Dashboard</li>
<li>Vagrant - A suite that allows you to bootstrap virtual machines, hiding the implementation. Think a CLI that lets you build a base VM, share it, and swap it out for different providers such as vmware, virtualbox, AWS, etc</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UDOO and an Arduino LCD]]></title>
    <link href="http://marcyoung.us/post/udoo-and-an-arduino-lcd"/>
    <updated>2014-03-03T00:00:00-06:00</updated>
    <id>http://marcyoung.us/post/udoo-lcd</id>
    <content type="html"><![CDATA[<p>I have continued to want more out of my UDOO, so I decided to make use of a cracked LCD I had sitting around from Adafruit, by having the UDOO display system information to it.<!--more-->
A side note: the linux distro I&rsquo;m using is Ubuntu 12.04 LTS for ARM, and by a cracked LCD I mean the digitizer doesn&rsquo;t work. You can modify this code to use the touchscreen functionality of the screen
if you wish.</p>

<p>Here&rsquo;s the parts list:</p>

<ul>
<li><a href="http://www.adafruit.com/products/376">This TFT LCD</a>. It&rsquo;s worth noting they&rsquo;ve made a newer revision, but it shouldn&rsquo;t be any different.</li>
<li><a href="http://www.radioshack.com/product/index.jsp?productId=2062347">A 10k Ohm resistor</a></li>
<li><a href="http://www.radioshack.com/product/index.jsp?productId=18761926">A Jumper kit and board</a> or an <a href="http://www.adafruit.com/products/51">arduino shield</a></li>
<li><a href="http://bit.ly/1eONbBk">A breadboard button</a></li>
</ul>


<p>Here&rsquo;s a short version of the steps:</p>

<ul>
<li>Wire up the button exactly the same as the <a href="http://www.arduino.cc/en/Tutorial/Switch#.UxVG7PldUkA">arduino tutorial</a> to digital 2.</li>
<li><a href="http://learn.adafruit.com/2-8-tft-touch-shield/controlling-the-backlight">Modify your LCD to use Digital 3 to control the backlight</a>.</li>
<li><p>Set up the <code>ttymxc3</code> device in linux for Serial on 9600 baud</p>

<pre><code> sudo stty -F /dev/ttymxc3 cs8 9600 ignbrk -brkint -icrnl -imaxbel \
 -opost -onlcr -isig -icanon -iexten -echo -echoe -echok -echoctl -echoke noflsh -ixon -crtscts
</code></pre>

<ul>
<li>Add that command to <code>/etc/rc.local</code> to make it permanent.</li>
</ul>
</li>
<li><p>Add <a href="https://github.com/myoung34/udoo-lcd-sysinfo/blob/master/script/udoo.sh">this bash script</a> to <code>/usr/local/bin</code></p>

<ul>
<li>Set it for startup by adding <code>sh /usr/local/bin/udoo.sh | cat &gt; /dev/ttymxc3</code> to <code>/etc/rc.local</code></li>
<li><p>Add a cron to update it every minute by adding this to <code>/etc/crontab</code></p>

<pre><code>  * * * * * root sh /usr/local/bin/udoo.sh | cat &gt; /dev/ttymxc3
</code></pre></li>
</ul>
</li>
<li><p>Load <a href="https://github.com/myoung34/udoo-lcd-sysinfo/blob/master/sketch/udoo.ino">this sketch</a> to your Arduino.</p></li>
<li>Reboot the arduino via the <code>RST</code> switch, or by a full power reboot, ensuring you replace the <code>J18</code> jumper so that the chips can communicate.</li>
</ul>


<p>If everything went well, your UDOO should look and act like the pictures below. Good luck!</p>

<p>UPDATED 7/26/2014: Pics attached of the <a href="http://marcyoung.us/post/udoo-and-an-arduino-lcd-3d">3d printed case</a></p>

<p><img class="left" src="http://marcyoung.us/images/IMG_0792.jpg" title="udoo 3" >
<img class="left" src="http://marcyoung.us/images/IMG_0793.jpg" title="udoo 3" >
<img class="left" src="http://marcyoung.us/images/IMG_0794.jpg" title="udoo 3" >
<img class="left" src="http://marcyoung.us/images/IMG_0795.jpg" title="udoo 3" >
<img class="left" src="http://marcyoung.us/images/IMG_0796.jpg" title="udoo 3" >
<img class="left" src="http://marcyoung.us/images/IMG_1003.jpg" title="udoo 3d" >
<img class="left" src="http://marcyoung.us/images/IMG_1004.jpg" title="udoo 3d" >
<img class="left" src="http://marcyoung.us/images/IMG_1005.jpg" title="udoo 3d" >
<img class="left" src="http://marcyoung.us/images/IMG_1006.jpg" title="udoo 3d" >
<img class="left" src="http://marcyoung.us/images/IMG_1007.jpg" title="udoo 3d" >
<img class="left" src="http://marcyoung.us/images/IMG_1008.jpg" title="udoo 3d" >
<img class="left" src="http://marcyoung.us/images/IMG_1010.jpg" title="udoo 3d" >
<img class="left" src="http://marcyoung.us/images/IMG_1012.jpg" title="udoo 3d" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UDOO and SATA - The Definitive Guide]]></title>
    <link href="http://marcyoung.us/post/udoo-and-sata"/>
    <updated>2014-02-23T00:00:00-06:00</updated>
    <id>http://marcyoung.us/post/udoo-sata</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently purchase a <a href="http://www.udoo.org">udoo</a>. I am in love with it, however I had issues trying to boot from SATA.<!--more--></p>

<p>Short story: 4 core ARM computer with SATA, LVDS, and arduino support. I decided upon getting it, the first thing I&rsquo;d do is ditch the MicroSD card and boot from SATA, but it proved to be challenging. The issue is that the older images (including the one I wanted), use U-Boot 2009 or similar as the bootloader, which don&rsquo;t have great SATA support.</p>

<p>The first thing I did was jump to Linaro Ubuntu 12.04 LTS, which uses U-Boot 2013. The next thing I did was grab a 16GB MicroSD and a 500GB SATA drive and load the image to it via:</p>

<pre><code>    $ unzip udoo_quad_ubuntu1204_v2.0.zip
    $ sudo dd if=udoo_quad_ubuntu1204_v2.0.img of=/dev/sdi bs=1M #sdi is my SATA drive. Be careful here.
    $ sudo dd if=udoo_quad_ubuntu1204_v2.0.img of=/dev/sdg bs=1M #sdg is my MicroSD card. Be careful here.
</code></pre>

<p>Next, format the SATA drive the way you&rsquo;d like via GParted. I expanded the first partition to fill up all but 2GB, and formatted the rest as 2GB Swap. At this time you still have to have the MicroSD card in use for U-Boot, so expand that via GParted the same way while you&rsquo;re at it if you&rsquo;d like.</p>

<p>The next part is to set up the UDOO for the Arduino IDE.</p>

<p>Prerequisites:</p>

<ul>
<li>Keep J18 on (only remove the jumper if you&rsquo;re flashing the SAM3X (arduino). You&rsquo;re not, you&rsquo;ll just be communicating to the UDOO via tty, so <strong>keep J18 ON</strong>).</li>
<li>Install the SATA. The data cable is obvious, but the power cord isn&rsquo;t. Wire the +5v line to the pin closest to the SATA data plug, and ground further. The connection is a <a href="http://www.adafruit.com/products/261">standard 2-pin JST connector.</a></li>
<li>Install the &lsquo;USB to UART driver&rsquo; from the UDOO Downloads page if you&rsquo;re on windows. Linux has this since 3.2 kernel.</li>
<li>Hook up a micro usb cable from the port nearest the corner of the UDOO to your PC.</li>
<li>Download Arduino version 1.5.4, and download the bassac patch from the UDOO site. Extract Arduino (or install it), and copy the bossac files to <arduino dir>/hardware/tools , overwriting the ones there (if those are missing you&rsquo;ve gone astray already).</li>
</ul>


<p>Communicate with the UDOO:</p>

<ul>
<li>Load up Arduino.</li>
<li>Select &lsquo;Arduino Due (Programming Port)&rsquo; from Tools -> Board Menu.</li>
<li>Set the right COM in the Tools -> Port menu (Protip: if you&rsquo;re in linux and this is grayed out, run arduino as sudo).</li>
<li>Open the serial monitor from Tools -> Serial Monitor.</li>
<li>Change the baud rate to 115200, and set it to use Newlines, both of these are near the bottom.</li>
</ul>


<p>Change the default boot in the UDOO:</p>

<ul>
<li>Boot the UDOO and interrupt the boot sequence ASAP by entering something in the serial monitor and hitting Send (if you do this too slowly just reset the UDOO and try again).</li>
<li>At the U-Boot prompt, type <code>setenv mmcroot /dev/sda1 rootwait rw</code> (To revert to booting from the sd, type <code>setenv mmcroot /dev/mmcblk0p1</code> and hit send via the serial monitor).</li>
<li>If you&rsquo;d like to save this (probably don&rsquo;t want to the first time), type <code>saveenv</code> and hit send via the serial monitor.</li>
<li>Type <code>boot</code> and hit send via the serial monitor.</li>
<li>Verify it&rsquo;s actually booted via SATA with <code>df -mh</code> and hitting send via the serial monitor.</li>
<li>???</li>
<li>Profit.</li>
</ul>


<p>Bonus: Keep reading if your UDOO now boots from SATA and you&rsquo;d like to use that swap partition you created.</p>

<ul>
<li>When the UDOO is booted, type <code>sudo blkid</code> and copy the UUID for your swap partition (probably /dev/sda2) to your buffer (or your memory if you can do that crap with a GUID).</li>
<li>Type <code>vim /etc/fstab</code> and add it as: <code>UUID=your-guid-dont-copy-pasta-me       none    swap    sw      0       0</code> . Note: use your UUID.</li>
<li>Reboot, verify with htop (if you don&rsquo;t have it: <code>sudo apt-get install htop</code>).</li>
</ul>


<p>The problem is what I call the developer documentation problem. By that I mean this information is available on the UDOO site, but is out of date and was probably well written once. A long time ago. U-Boot &lt; 2013 has less than stellar SATA suport, and the guides say to use <code>setenv root root=/dev/sda1</code> which isn&rsquo;t true for U-Boot 2013. Also, I figured it would be nice to show you how to actually fill up the drive, use the swap partition, etc. Don&rsquo;t thank me. Or do.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puppet and MarkLogic]]></title>
    <link href="http://marcyoung.us/post/puppet-and-marklogic"/>
    <updated>2013-12-14T00:00:00-06:00</updated>
    <id>http://marcyoung.us/post/puppet-and-marklogic</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently been writing a few modules for my current job, and have seen some missing modules on the <a href="http://www.puppetforge.com">puppetforge</a>. One of which is something to maintain a <a href="http://www.marklogic.com">MarkLogic</a> instance.<!--more--></p>

<p>Apparently, however, I apparently like to pick inherently complicated work. MarkLogic has an interesting EULA. They have RPMs to install their software, but the EULA prevents redistribution. That means there is no way to have a central YUM repository. Also in order to download the .rpm file off of their website, you have to log in. That means you can&rsquo;t just curl the latest package. In terms of a module, this kind of sucks because it means that you can&rsquo;t just install the module and have <code>ensure =&gt; latest</code> since there&rsquo;s no way of keeping an internal package store.</p>

<p>How does this suck for me? I like to test. It&rsquo;s my new thing. In order to test your module, you need consistency, and for this that&rsquo;s hard to do without violating their terms. My solution? I have a super secret vagrant .box file that has a local Yum repository with the versions I know it supports (everything over version 6). No big deal, sort of.</p>

<p>Did I mention the software also requires activation? That affects testing too, because I can&rsquo;t just hardcode my license information even though it&rsquo;s free and easily obtainable. My solution was to force the user to have a <code>~/.marklogic.yml</code> file that contains the information. None of this means anything to the normal use who wishes to install marklogic, they just need a Yum repository set up that holds the MarkLogic version. It does mean something to me in terms of making something that&rsquo;s easy to fork and fix if there are issues.</p>

<p>TL;DR: <a href="http://www.puppetforge.com/myoung34/marklogic">My module is here.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I Learned From PuppetConf 2013]]></title>
    <link href="http://marcyoung.us/post/puppetconf2013"/>
    <updated>2013-10-30T00:00:00-05:00</updated>
    <id>http://marcyoung.us/post/puppetconf</id>
    <content type="html"><![CDATA[<p>Wow. Work has been crazy. Enough for me to have no activity here. Time to change that, but putting in a blog post that might resemble a cracked article.<!--more--></p>

<p>I recently attended Puppetconf 2013 in San Francisco, and it was amazing (except the food). I love that city now. Regardless, I went into this conference having written a few very incorrect modules that did work, although I&rsquo;m unsure how in hindsight. I decided to finally put in a post some of the takeaways I gathered. Ironically, almost all of my best information came from sitting down on developer day, which was a topic themed sit-down to talk to like minded people and puppet developers. The idea being to get them to look at your code, help you out, or just answer questions. This. Was. Awesome. Much thanks to Ashley Penney and Rob Reynolds for dealing with me.</p>

<h1>Things To Take Away From My Conference Experience</h1>

<ol>
<li>Module best practices

<ul>
<li>The <a href="http://docs.puppetlabs.com/guides/style_guide.html">style guide</a> is your bff.</li>
<li>Tests, tests tests.

<ol>
<li> <a href="http://rspec-puppet.com/tutorial/">rspec-puppet</a> lets you write rspec tests for your manifests.</li>
<li> <a href="https://github.com/puppetlabs/rspec-system-puppet">rspec-system-puppet</a> lets you write system tests for a full stack (catalog)</li>
</ol>
</li>
<li><a href="http://puppet-lint.com/">Puppet-lint</a>. Use it. Love it. Always run with <em>&ndash;no-80chars-check</em> flag (1990 called, it wants its&#8217; 1024x768 resolution back).</li>
</ul>
</li>
<li>Things you should know if you&rsquo;re maintaining modules

<ul>
<li>Use a module deployment manager.

<ol>
<li> <a href="https://github.com/adrienthebo/r10k">r10k</a>. I now use this everywhere. You can easily set it up to deploy your modules from <em>master</em> to <em>/etc/puppet/environments/production</em> and <em>dev</em> to <em>/etc/puppet/environments/development</em> , which is so awesome. This makes staggering environments a snap. I plan on writing a quick guide to this soon.</li>
<li> <a href="https://github.com/rodjek/librarian-puppet">Puppet libarian</a> is another I&rsquo;ve not yet used, but I&rsquo;ve heard good and bad.</li>
</ol>
</li>
<li><a href="http://docs.puppetlabs.com/hiera/1/">Hiera</a> is fantastic. Separate your data from your modules.</li>
<li>Use facts for advanced modules. Your modules should not try to determine how to run, but simply follow flow. For example, assume you have a module that should operate differently based on what&rsquo;s responding on an HTTP port. Your module should be as simple as possible, so it shouldn&rsquo;t try to determine this, but use it. You should write and package a <em>fact</em> that hits the server, and returns <em>my_http_server => &lsquo;nginx&rsquo;</em>. Now your module can just do something as simple as a switch on this <em>$::my_http_server</em> variable. Done.</li>
<li>I love Craig Dunn&rsquo;s <a href="http://www.craigdunn.org/2012/05/239/">roles and profiles</a> architecture. It&rsquo;s so simple and it works quite well. Having a singular <em>role</em> that maps to multiple <em>profiles</em> provides a flexible and easily maintained set of modules.</li>
<li>Puppet&rsquo;s <a href="https://github.com/puppetlabs/puppetlabs-stdlib">stdlib</a> is great. I&rsquo;m a huge fan of not reinventing the wheel, so having <em>str2bool()</em> available makes me happy. Along with a ton of other well written functions you need.</li>
</ul>
</li>
<li>Buzzwords (things I can&rsquo;t believe I&rsquo;ve never heard of/used)

<ul>
<li><a href="http://www.pulpproject.org/">Pulp</a> is quite cool. For my modules, everything is RHEL/CentOS based, so publishing RPMs has become my &lsquo;thang&rsquo;. Pulp <em>seems</em> to be an attempt to get spacewalk-like functionality into the hands of people who don&rsquo;t want the overhead of the database, GUI, and a bunch of the bulk. Me? I just use it as a Yum repository. My jenkins builds RPM&rsquo;s and publishes them to a Pulp server, so it becomes available to anything that uses it as a repo.</li>
<li>I&rsquo;ve heard of and scoffed vim package managers. Until <a href="https://github.com/Shougo/neobundle.vim">neobundle</a>. I&rsquo;ve been setting up so many servers lately, having a dotfiles repository with a .vimrc with all my Vim necessities has lowered my blood pressure.</li>
<li><a href="https://wiki.openstack.org/wiki/Packstack">Packstack</a>. This could be a rant in and of itself. I really want to like this. I really do. What is it? It&rsquo;s a fully automated puppet setup of Openstack. What?! IaaS at your fingertips? Too good to be true you say? Yes. Great idea, but it needs a lot of work. I didn&rsquo;t sleep for 2 days trying to set this up. And gave up.

<ul>
<li>tl;dr <em>What is it</em>: Puppet based installer for a single instance version of Openstack. Openstack really requires 3 nodes (compute, data, network), but this gives you a &lsquo;trial version&rsquo;, meaning all 3 nodes on one instance with some limitations on Ram, storage, etc that you can&rsquo;t change (because why on earth would you actually want IaaS on a single instance).</li>
<li>tl;dr <em>My issues</em>: Failed on Fedora 19. And Fedora 20, although both are officially supported. Discovered bugs on each install such as the GUI sending only 500 ISE&rsquo;s, missing the x86_64 Qemu 1.4 emulator, and removing <em>/var/lock/subsys</em> in an install.</li>
</ul>
</li>
<li><a href="http://openstack.redhat.com/Main_Page">RDO</a> is <em>Red Hat</em>&rsquo;s <em>D</em>eployment of <em>O</em>penstack - see what I did there? This is what I used to fail miserably at installing packstack.</li>
<li><a href="http://theforeman.org">Foreman</a> is a great and simple way to keep track of your hosts. Works flawlessly with your set up, whether you use an ENC, Hiera, both, neither. I use it and swear by it. A coworker loves the <a href="http://puppetlabs.com/dashboard">puppet dashboard</a> although it seems to have the same functionality. I don&rsquo;t use either one for its provisioning, solely its puppet management.</li>
<li><a href="https://www.openshift.com/products/origin">openshift</a> seems to be red hats solution to heroku. PaaS still eludes me, but my understanding is it&rsquo;s an answer to developing without deploying. Push the code to their system with some metadata on how to execute and be done with it.</li>
</ul>
</li>
</ol>


<h1>Random Things I Learned About Puppet Pre/Post Conference</h1>

<ol>
<li>Puppet is the greatest thing I&rsquo;ve found for linux system configuration and package maintenance&hellip;.Windows? Not so much. Puppet is obviously intended for the linux community, seeing as the master HAS to be linux. This is fine if you&rsquo;re just wanting to set up and maintain a windows box. Where am I going with this? <em>Continuous deployment</em>. If you&rsquo;re looking to deploy code, continuously or not, on a Windows system, if it&rsquo;s not msi or exe, Puppet isn&rsquo;t your thing. I&rsquo;ve found <a href="http://octopusdeploy.com/">octopus deploy</a> and it works great from a CI/NuGet deployment standpoint.</li>
<li><a href="http://lmgtfy.com/?q=puppet+without+root">Puppet without root</a> is a pipe dream. It&rsquo;s a hot topic, but the biggest failure? Linux packages will most likely require root for a very long time. Oops.</li>
<li>Write facts, use hiera, and stop making complicated modules.</li>
<li>I love <a href="http://vagrantup.com/">vagrant</a>. So much.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatically deploy GIT code to Windows with Puppet]]></title>
    <link href="http://marcyoung.us/post/automatically-deploy-git-code-windows-puppet/"/>
    <updated>2013-05-24T00:00:00-05:00</updated>
    <id>http://marcyoung.us/post/automatically-deploy-git-code-windows-puppet</id>
    <content type="html"><![CDATA[<p>Recently I&#8217;ve been looking for ways of keeping a box up-to-date as far as git is concerned, and for windows the options are pretty limited. The vast majority of DevOps seem to like Puppet, so I decided to give it a try.<!--more--> The problem is windows isn&#8217;t very good without a few helper programs such as ssh, but we&#8217;ll get around that with Cygwin. The master box will be a Centos 6.4 x64 host.</p>

<h2>Puppet Master</h2>

<p>The first thing we&#8217;ll need to do is install the EPEL and Puppet repositories with, then install the puppet software and start the master process:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># rpm -Uvh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
</span><span class='line'># rpm -Uvh http://yum.puppetlabs.com/el/6/products/x86_64/puppetlabs-release-6-7.noarch.rpm
</span><span class='line'># sudo yum install -y puppet-server && chkconfig puppetmaster on && service puppetmaster start</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s go ahead and get some files prepared. Create a git repo in <strong>/opt</strong> called <strong>test</strong> with a file in it (<strong>test.txt</strong>), committed to master:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd /opt
</span><span class='line'>$ sudo mkdir test && chmod 766 test
</span><span class='line'>$ cd test
</span><span class='line'>$ git init
</span><span class='line'>$ touch test.txt
</span><span class='line'>$ git add test.txt
</span><span class='line'>$ git commit -a -m "Adding empty file"</span></code></pre></td></tr></table></div></figure>


<p>One last thing we&#8217;ll need for puppet to work with git is VCSRepo, so let&#8217;s get that:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># puppet module install puppetlabs/vcsrepo</span></code></pre></td></tr></table></div></figure>


<p>Now that puppet is ready to serve it out, we have to create some files.</p>

<ul>
<li><strong>/etc/puppet/manifests/site.pp</strong></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>node 'server-vm.blindrage.ad' {
</span><span class='line'>  include git
</span><span class='line'>}}</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>/etc/puppet/modules/git/manifests/init.pp</strong></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class git {
</span><span class='line'>  class { git::clone: }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>/etc/puppet/modules/git/manifests/clone.pp</strong></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class git::clone ($repo='dev', $username='marcus.young') {
</span><span class='line'>  vcsrepo { "C:/${repo}":
</span><span class='line'>    ensure   =&gt; latest,
</span><span class='line'>    owner    =&gt; $owner,
</span><span class='line'>    provider =&gt; git,
</span><span class='line'>    source   =&gt; "git+ssh://${username}@foreman/~/repos/test",
</span><span class='line'>    revision =&gt; $repo,
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Puppet Client</h2>

<p>The first two steps are going to be to install cygwin, making sure to add git and openssh, then the puppet client software (making sure to point to your linux host as the master).</p>

<p>When this is done, stop the windows puppet service and make sure it is not set for startup. We&#8217;re going to control this process with a custom task schedule.</p>

<p>Next, add the path to your cygwin bin folder to the PATH environment variable. If you don&#8217;t know how, it&#8217;s probably something similar to <strong>C:\cygwin\bin</strong>, and you&#8217;ll add it according to <a href="http://geekswithblogs.net/renso/archive/2009/10/21/how-to-set-the-windows-path-in-windows-7.aspx" target="_blank">this guide</a>. You&#8217;re close now!</p>

<p>Using cygwin, generate a public/private key pair (if using git+ssh) <strong>without a password</strong> and give the public key to the master box.</p>

<p>If you&#8217;ve done it right, you can clone the repo in cygwin without a password using this line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git+ssh://{username}@{master}/opt/test</span></code></pre></td></tr></table></div></figure>


<p>The last step is to generate a cert and sign it.</p>

<p>From the client:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>puppet agent -t --waitforcert 60</span></code></pre></td></tr></table></div></figure>


<p>Then on the master:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># puppet cert sign --all</span></code></pre></td></tr></table></div></figure>


<p>The client should now finish and download your git code! Congrats!</p>

<p>However, this isn&#8217;t automagic yet. To do that, create a scheduled task that runs every 2 minutes (or whenever) that runs a daemon file.<br/>
The easiest way is to create<strong> C:\Program Files\Puppet Labs\Puppet\bin\puppet_daemon.bat</strong> which contains:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@echo off
</span><span class='line'>echo Running Puppet agent on demand ...
</span><span class='line'>cd "%~dp0"
</span><span class='line'>call puppet.bat agent --test %*</span></code></pre></td></tr></table></div></figure>


<p>Congrats. You&#8217;re done! To test, make a change to the git repo and wait two minutes!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi-Automated Bluetooth Audio Player !]]></title>
    <link href="http://marcyoung.us/post/raspberry-pi-automated-bluetooth-audio-player/"/>
    <updated>2013-03-12T00:00:00-05:00</updated>
    <id>http://marcyoung.us/post/raspberry-pi-automated-bluetooth-audio-player</id>
    <content type="html"><![CDATA[<!--more-->


<h2>Backstory</h2>

<p>After a long break, I&#8217;ve finally gotten one part of my to-do list for my Raspberry Pi&#8230;.automated bluetooth audio playing!<br/>
As always: there were issues. First, the support for this sucked. I was thankful to get a starting point from <a title="John Hamelink" href="https://github.com/johnhamelink/bluetoothradio" target="_blank">John Hamelink</a>. He wrote a set of sweet scripts that automate a lot of this. However, they were written for Arch Linux, and required a bit of work syntactically to get it working for Debians Wheezy Release. <a href="https://github.com/myoung34/bluetoothradio" target="_blank">My final code is here.</a></p>

<h2>The Nitty Gritty (install steps)</h2>

<p>First, install the normal packages (as seen here) and let the pi user able to control bluetooth devices:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pi@raspberrypi ~ $ sudo apt-get install bluez pulseaudio-module-bluetooth python-gobject python-gobject-2
</span><span class='line'>pi@raspberrypi ~ $ sudo usermod -a -G lp pi</span></code></pre></td></tr></table></div></figure>


<p>Next, let&#8217;s make the bluetooth module compatible for audio streaming. Edit <strong>/etc/bluetooth/audio.conf</strong> and add this after [General]:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Enable=Source,Sink,Media,Socket</span></code></pre></td></tr></table></div></figure>


<p>Next, we&#8217;ll let pulseaudio do the playback. Edit <strong>/etc/pulse/daemon.conf</strong> and uncomment:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>resample-method = trivial ; ADD THIS LINE TO THE FILE!</span></code></pre></td></tr></table></div></figure>


<p>We need some additional packages to make it compatible with my scripts. Qdbus allows you to send D-Bus messages to the bluez daemon, git-core is so you can clone my repo, and bluez-tools provides the bluetooth-agent which is one of the daemon pieces.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pi@raspberrypi ~ $ sudo apt-get install bluez-tools qdbus git-core</span></code></pre></td></tr></table></div></figure>


<p>Now, we&#8217;re going to gain root, put my code in /root, and make a init.d file you can provide at startup.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pi@raspberrypi ~ $ sudo su -
</span><span class='line'>root@raspberrypi:~# git clone https://github.com/myoung34/bluetoothradio.git --branch Wheezy
</span><span class='line'>root@raspberrypi:~# cd bluetoothradio
</span><span class='line'>root@raspberrypi:~/bluetoothradio# cp bluetooth-server /etc/init.d
</span><span class='line'>root@raspberrypi:~/bluetoothradio# chmod 755 /etc/init.d/bluetooth-server && chmod +x /etc/init.d/bluetooth-server
</span><span class='line'>root@raspberrypi:~/bluetoothradio# update-rc.d bluetooth-server defaults
</span><span class='line'>root@raspberrypi:~/bluetoothradio# reboot</span></code></pre></td></tr></table></div></figure>


<h2>Usage</h2>

<p>After the reboot, you can now pair your device using &#8217;1234&#8242; (unless you modified the bluetoothPin file), and play yo&#8217; music!</p>

<p>If for some reason it&#8217;s not connection, visit <a title="KMonkey711" href="http://kmonkey711.blogspot.com/" target="_blank">KMonkey711&#8242;s tutorial</a> and follow the steps to connect and trust the device, and reboot the pi.</p>

<h2>Acknowledgements</h2>

<p>Thanks to:<br/>
<a title="johnhamelink" href="https://github.com/johnhamelink" target="_blank">johnhamelink</a><br/>
<a title="KMonkey711" href="http://kmonkey711.blogspot.com/" target="_blank">KMonkey711</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(FIX) MediaTomb/uShare Won&#8217;t Broadcast SSDP]]></title>
    <link href="http://marcyoung.us/post/fix-mediatombushare-broadcast-ssdp/"/>
    <updated>2012-11-28T00:00:00-06:00</updated>
    <id>http://marcyoung.us/post/fix-mediatombushare-broadcast-ssdp</id>
    <content type="html"><![CDATA[<p>If you&#8217;re running Mediatomb or uShare and your xbox, ps3, tv, or whatever other UPnP/DNLA device doesn&#8217;t see the server, here&#8217;s a few fixes I&#8217;ve discovered.<!--more--></p>

<ul>
<li>If you&#8217;re running SELinux, disable it temporarily (it doesn&#8217;t play well sometimes)</li>
<li>Both of these use the IGMP protocol to display their SSDP. Try allowing it through IPTables: <figure class='code'><figcaption><span>bash </span></figcaption></li>
</ul>


<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># iptables -A INPUT -i &lt;em1|eth0|device name> -s 0.0.0.0/32 -d 224.0.0.1/32 -p igmp -j ACCEPT</span></code></pre></td></tr></table></div>


<p></figure>
* Make sure your router allows UPnP
* Ensure the right ports are allowed through the firewall
  * ushare
    - UDP 1900
    - TCP 2869
    - TCP 5000
  * mediatomb
    - The port you have set in the /etc/mediatomb.conf as MT_PORT</p>

<p>I spent quite a while trying to figure this out on my set-up, and it turned out the igmp fix was all I needed.
Days of work for 1 line in my /etc/sysconfig/iptables file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(FIX) GTablet NVFlash Freezing During Upload]]></title>
    <link href="http://marcyoung.us/post/fix-gtablet-nvflash-freezing-upload/"/>
    <updated>2012-11-27T00:00:00-06:00</updated>
    <id>http://marcyoung.us/post/fix-gtablet-nvflash-freezing-upload</id>
    <content type="html"><![CDATA[<p>I currently own a ViewSonic GTablet, which I do love the few times I use it, but if you&#8217;re like me, you <del datetime="2012-11-27T04:17:03+00:00">tamper</del> break things you own.<!--more--></p>

<p>My GTablet runs <a href="http://forum.xda-developers.com/showthread.php?t=1084573" title="Beasty Clemsysn (Froyo)"></a> which I prefer since it&#8217;s freaking fast, however with the performance, there are a few bugs, all of which I seemed to hit in a single move&#8230;.so this is a &#8220;Don&#8217;t do&#8221;:</p>

<ul>
<li>Putting it in airplane mode goes ape-shit. There was no way to get it out, including reboots and settings changes.</li>
<li>To fix this, I hit &#8216;Restore to factory defaults&#8217;&#8230; <strong>Don&#8217;t ever do this!</strong></li>
<li>This fubared everything, which means restore old Rom&#8230;yay for my free time tonight.</li>
</ul>


<p>So far, whatever&#8230;easy fix right?<br/>
Well if you&#8217;ve made it to this page, you see the title, and that&#8217;s what I&#8217;m here to fix.<br/>
If for some reason you&#8217;re trying to NVFlash your gtablet (probably with gtab.nvflash.1.2.branch.20110508 with cwm5504 or gtab.nvflash.1.2.branch.20110508 with cwmv3028.zip), and it&#8217;s freezing on the flash, here&#8217;s what I did.</p>

<p>Ready?<br/>
In the <em>gtablet.cfg</em> file, swap the partition in question (the one freezing) with the previous one, but swap it on the filesystem level.<br/>
For example, my Partition 7 froze on upload, so the diff between the original and my fix: <a href="https://gist.github.com/4152380" title="https://gist.github.com/4152380" target="_blank">gtablet.cfg-diff</a><br/>
If you want my full fixed file (assuming yours broke on partition 7 as well): <a href="https://gist.github.com/4152387" title="https://gist.github.com/4152387" target="_blank">gtablet.cfg/4152387</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MarkLogic Collections &#8211; Performance Issues And Why You Should Denormalize!]]></title>
    <link href="http://marcyoung.us/post/marklogic-collections-performance-issues-and-why-you-should-denormalize/"/>
    <updated>2012-09-25T00:00:00-05:00</updated>
    <id>http://marcyoung.us/post/marklogic-collections-performance-issues-and-why-you-should-denormalize</id>
    <content type="html"><![CDATA[<!--more-->


<h2>Background</h2>

<p>Recently I&#8217;ve been on a new team at my work doing MarkLogic work. In a nutshell we&#8217;ve been developing a new HealthCare quality application from the ground up.  This would be our second application, but we learned enough from the first to make our priority creating a robust and scalable RESTful interface for document CRUD. With this we developed a middle tier that is almost completely configuration driven, meaning any new apps would be able to utilize this and not have to re-invent the wheel to get CRUD/Search working out-of-the-box.</p>

<h2>The Approach To A Problem Using Lists</h2>

<p>The application is revolved around patient CCD&#8217;s (XML representing all of a patients history per retrieval). MarkLogic is ideal for this since it&#8217;s built on XQuery, a functional language revolved around XML. Let me paint you a picture of what led us to collection issues. Say you want as a doctor, to search &#8220;gender:M&#8221; on a database, and just keep tacking on until you get to what you want to find (end result maybe: &#8220;gender:M AND dob GT 01-10-1987 AND problem:Asthma&#8221;). Now as a doctor, I found X patients and want to save that as a NON changing list&#8230;meaning that if I search any time after this, I&#8217;ll still get those X patients, and no more that match that criteria since.</p>

<p>We implemented this using MarkLogic collections. Collections are handy in that you can take some documents, put them in a collection, and say:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for $i in fn:collection('/doctors/marc/1')
</span><span class='line'>  return $i</span></code></pre></td></tr></table></div></figure>


<p>That means whatever is in the collection &#8216;/doctors/marc/1&#8242; will always be there. Cool, that works great. So we implemented this &#8220;static list&#8221; as this:</p>

<ol>
<li>Take the query and execute it</li>
<li>For each document in the result set, add them to a unique list: /lists/{unique id}</li>
<li>change the query to list:{unique id} and add a new xml node <owner>{id of user}</owner></li>
</ol>


<p>The great thing about this, is you can have a collection constraint in our patients so you can just execute &#8220;list:{unique id}&#8221; and it will return all documents in that list. Awesome! It worked Great! Also note, yes we handled updating the list by re-executing it, and adding the new patients to that list. Deleting a list is also possible.</p>

<h2>The Problem With MarkLogic Collections</h2>

<p>As I said, this solution worked <strong>fantastically</strong>&#8230;at first. It worked until we hit 1500 fairly large patient documents. The performance crawled to a stop. <strong>The problem with collections is that the collection data is stored <span style="color: #ff0000;">internally. </span></strong><span style="color: #ff0000;"><span style="color: #000000;">That means that if you decide to make a list for &#8220;gender:M&#8221;, you&#8217;re modifying and locking potentially half the documents in the database. For us, that meant a 9+ minute list creation. Not acceptable. You can try to speed this up, sure, by creating limits on how many documents you can modify, perhaps other ways involving spawning it in threads or in the background, but that still creates server overhead and gets rid of transaction safety.</span></span></p>

<h2>Denormalize Your Database/The Solution</h2>

<p>The greatest thing about a NoSQL database is that it can be denormalized. This may make some people cringe, why afterall would you want to duplicate data? If used correctly, it works great. For this specifically, it means that instead of modifying all documents in the database by adding/removing them from collections, is to use a separate file, stored as &#8216;/lists/{user}/{unique id}&#8217; that contains links (uri&#8217;s) to the documents. This is fine, especially for this application, since patient records are never deleted. I&#8217;ve shown an example further below on how to see it in action!</p>

<h2>The Code/TL;DR &#8211; Code or GTFO</h2>

<p>The first thing you can do if you want to follow along is put a crap ton of delicious bacon documents into your database. You should copy/paste this into the QConsole and hit RUN! (it might take a few &#8211; it inserts 1200 documents&#8230;if it times out, insert 300 documents 4 times instead).<br/>
<a href="https://gist.github.com/3785105" target=_blank>Click here for the code&#8230;too large to paste and the code isn&#8217;t too important</a><br/>
Now for the bad code. This will search for <beef>*tips*</beef> effectively. Any documents that match that, it will put it into a collection called &#8216;/marc/favorites&#8217;.</p>

<p>Then it will decide my favorites should be <pork>*ham*</pork>, so it will go through the collection, remove the originals, and add my new favorites. The important thing is to look at the number of documents affected and how long it takes! Ridiculous!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let $docs :=  
</span><span class='line'>  fn:distinct-values(
</span><span class='line'>    for $i in cts:search(//beef,cts:word-query("tip"))
</span><span class='line'>      return fn:base-uri($i)
</span><span class='line'>  )
</span><span class='line'>return
</span><span class='line'>  for $i in $docs return
</span><span class='line'>    xdmp:document-add-collections(
</span><span class='line'>      $i,
</span><span class='line'>      '/marc/favorites'
</span><span class='line'>    )
</span><span class='line'>(: 781 documents affected - Profile 2105 Expressions PT57.822894S :)
</span><span class='line'> 
</span><span class='line'>let $remove-from-collections :=
</span><span class='line'>  for $i in fn:collection('/marc/favorites')
</span><span class='line'>    return xdmp:document-remove-collections(fn:base-uri($i),'/beef/tips')
</span><span class='line'>    
</span><span class='line'>let $docs := 
</span><span class='line'>  fn:distinct-values(
</span><span class='line'>    for $i in cts:search(//pork,cts:word-query("ham"))
</span><span class='line'>      return fn:base-uri($i)
</span><span class='line'>  )
</span><span class='line'> 
</span><span class='line'>return
</span><span class='line'>  for $i in $docs return
</span><span class='line'>    xdmp:document-add-collections(
</span><span class='line'>      $i,
</span><span class='line'>      '/marc/favorites'
</span><span class='line'>    )
</span><span class='line'> 
</span><span class='line'>(: 1051 documents affected - Profile 4245 Expressions PT48.439176S  :)</span></code></pre></td></tr></table></div></figure>


<p>So what&#8217;s the best way to do it? Create a new document of URI&#8217;s to the documents, and store that! Don&#8217;t believe me? Look at the performance without indexes!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let $docs := 
</span><span class='line'>  fn:distinct-values(
</span><span class='line'>    for $i in cts:search(//beef,cts:word-query("tip")) return
</span><span class='line'>      fn:base-uri($i)
</span><span class='line'>  )
</span><span class='line'>  
</span><span class='line'>let $favorites :=
</span><span class='line'>  &lt;favorites&gt;{
</span><span class='line'>    for $i in $docs return
</span><span class='line'>      &lt;doc&gt;{$i}&lt;/doc&gt;
</span><span class='line'>  }&lt;/favorites&gt;
</span><span class='line'>  
</span><span class='line'>return
</span><span class='line'>  xdmp:document-insert(
</span><span class='line'>    '/marc/favorites',
</span><span class='line'>    $favorites
</span><span class='line'>  )
</span><span class='line'>(: 1 document affected - Profile 2643 Expressions PT0.326612S :)
</span><span class='line'> 
</span><span class='line'>let $docs := 
</span><span class='line'>  fn:distinct-values(
</span><span class='line'>    for $i in cts:search(//pork,cts:word-query("ham")) return
</span><span class='line'>      fn:base-uri($i)
</span><span class='line'>  )
</span><span class='line'>  
</span><span class='line'>let $favorites :=
</span><span class='line'>  &lt;favorites&gt;{
</span><span class='line'>    for $i in $docs return
</span><span class='line'>      &lt;doc&gt;{$i}&lt;/doc&gt;
</span><span class='line'>  }&lt;/favorites&gt;
</span><span class='line'>  
</span><span class='line'>return xdmp:node-replace(fn:doc('/marc/favorites')/favorites,$favorites)
</span><span class='line'>(: 1 document affected - Profile 2144 Expressions PT0.67532S :)</span></code></pre></td></tr></table></div></figure>


<p>And to improve your search, you could use something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cts:search(/,
</span><span class='line'>  cts:document-query(
</span><span class='line'>    fn:doc('/marc/favorites')/favorites//doc/text()
</span><span class='line'>  )
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KegDuino AKA HomeBrew and Arduinos&#8217; Love Child]]></title>
    <link href="http://marcyoung.us/post/kegduino-aka-homebrew-and-arduinos-love-child/"/>
    <updated>2012-07-25T00:00:00-05:00</updated>
    <id>http://marcyoung.us/post/kegduino-aka-homebrew-and-arduinos-love-child</id>
    <content type="html"><![CDATA[<!--more-->


<p>I finished work on my new site: <a href="http://www.kegduino.org">www.kegduino.org</a> . Go check it out! It&#8217;s a micro-controlled Keg!</p>

<div id="attachment_62" class="wp-caption alignnone" style="width: 810px">
  <a href="http://marcyoung.us/wp-content/uploads/2012/07/IMG_0368.jpg"><img class="size-large wp-image-62" title="IMG_0368" src="http://marcyoung.us/wp-content/uploads/2012/07/IMG_0368-1024x682.jpg" alt="Pouring my beer with a touch screen!" width="400" height="310" /></a><p class="wp-caption-text">
    The kegduino in action
  </p>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Made Beer]]></title>
    <link href="http://marcyoung.us/post/i-made-beer/"/>
    <updated>2012-05-11T00:00:00-05:00</updated>
    <id>http://marcyoung.us/post/i-made-beer</id>
    <content type="html"><![CDATA[<!--more-->


<p>This is going to mainly a picture post, but I&#8217;ll give a bit of background.<br/>
For my birthday, my coworkers pitched in and bought me a starter kit from the local homebrew shop (Allseasons), which consisted of a fermenter, bottler, cleaning supplies, hydrometer, auto-siphon, and tubing.</p>

<p><a href="http://marcyoung.us/wp-content/uploads/2012/07/setup.jpg"><img class="alignnone size-medium wp-image-27" title="setup" src="http://marcyoung.us/wp-content/uploads/2012/07/setup-300x199.jpg" alt="" width="300" height="199" /></a></p>

<p>Through amazon I got the rest of what I thought I needed, which was a wort chiller, boil pot, and some keg stuff. This was my outcome.</p>

<p>Disclaimer: Ignore image quality, I&#8217;m not used to fancy DSLR cameras.</p>

<!-- see gallery_shortcode() in wp-includes/media.php -->




<div id='gallery-1' class='gallery galleryid-21 gallery-columns-3 gallery-size-thumbnail'>
  <dl class='gallery-item'>
    <dt class='gallery-icon'>
      <a href='http://marcyoung.us/post/i-made-beer/setup/' title='setup'><img width="150" height="150" src="http://marcyoung.us/wp-content/uploads/2012/07/setup-150x150.jpg" class="attachment-thumbnail" alt="setup" /></a>
    </dt>
  </dl>
  
  <dl class='gallery-item'>
    <dt class='gallery-icon'>
      <a href='http://marcyoung.us/post/i-made-beer/steeping/' title='steeping'><img width="150" height="150" src="http://marcyoung.us/wp-content/uploads/2012/07/steeping-150x150.jpg" class="attachment-thumbnail" alt="steeping" /></a>
    </dt>
  </dl>
  
  <dl class='gallery-item'>
    <dt class='gallery-icon'>
      <a href='http://marcyoung.us/post/i-made-beer/fermenting/' title='fermenting'><img width="150" height="150" src="http://marcyoung.us/wp-content/uploads/2012/07/fermenting-150x150.jpg" class="attachment-thumbnail" alt="fermenting" /></a>
    </dt>
  </dl>
  
  <br style="clear: both" /><dl class='gallery-item'>
    <dt class='gallery-icon'>
      <a href='http://marcyoung.us/post/i-made-beer/krausen/' title='krausen'><img width="150" height="150" src="http://marcyoung.us/wp-content/uploads/2012/07/krausen-150x150.jpg" class="attachment-thumbnail" alt="krausen" /></a>
    </dt>
  </dl>
  
  <dl class='gallery-item'>
    <dt class='gallery-icon'>
      <a href='http://marcyoung.us/post/i-made-beer/siphoning/' title='siphoning'><img width="150" height="150" src="http://marcyoung.us/wp-content/uploads/2012/07/siphoning-150x150.jpg" class="attachment-thumbnail" alt="siphoning" /></a>
    </dt>
  </dl>
  
  <dl class='gallery-item'>
    <dt class='gallery-icon'>
      <a href='http://marcyoung.us/post/i-made-beer/kegging/' title='kegging'><img width="150" height="150" src="http://marcyoung.us/wp-content/uploads/2012/07/kegging-150x150.jpg" class="attachment-thumbnail" alt="kegging" /></a>
    </dt>
  </dl>
  
  <br style="clear: both" /><dl class='gallery-item'>
    <dt class='gallery-icon'>
      <a href='http://marcyoung.us/post/i-made-beer/more-carbonating/' title='more carbonating'><img width="150" height="150" src="http://marcyoung.us/wp-content/uploads/2012/07/more-carbonating-150x150.jpg" class="attachment-thumbnail" alt="more carbonating" /></a>
    </dt>
  </dl>
  
  <dl class='gallery-item'>
    <dt class='gallery-icon'>
      <a href='http://marcyoung.us/post/i-made-beer/carbonating/' title='carbonating'><img width="150" height="150" src="http://marcyoung.us/wp-content/uploads/2012/07/carbonating-150x150.jpg" class="attachment-thumbnail" alt="carbonating" /></a>
    </dt>
  </dl>
  
  <br style='clear: both;' />
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating an MVC Blog with Node.js and MongoDB]]></title>
    <link href="http://marcyoung.us/post/creating-an-mvc-blog-with-node-js-and-mongodb/"/>
    <updated>2012-04-25T00:00:00-05:00</updated>
    <id>http://marcyoung.us/post/creating-an-mvc-blog-with-node-js-and-mongodb</id>
    <content type="html"><![CDATA[<p>This is going to be my first big tutorial. This is a simple tutorial to show how to build the worlds most basic blog with comment system in Node.js with Express for the MVC Routing, MongoDB as the storage engine, and Jade as the html shorthand. <!--more--></p>

<p>I&#8217;m going to assume you know how to install the base packages for Node.js, npm (node package manager), and mongodb. First, let&#8217;s set up the database to hold some articles. The mongo collection will be a basic object with an id, article_title, and article_body:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[myoung@F00 tutorial]$ mongo tutorial
</span><span class='line'>MongoDB shell version: 2.0.2
</span><span class='line'>connecting to: tutorial
</span><span class='line'>&gt; db.articles.remove()
</span><span class='line'>&gt; db.articles.insert({"article_title": "Article 1","article_body": "This would be the data from &lt;strong&gt;Article 1&lt;/strong&gt;","article_date": new Date()});
</span><span class='line'>&gt; db.articles.insert({"article_title": "Article 2","article_body": "This would be the data from &lt;strong&gt;Article 2&lt;/strong&gt;
</span><span class='line'>I think I'll put some more data in this one =)","article_date": new Date()});</span></code></pre></td></tr></table></div></figure>


<p>Now, let&#8217;s get the modules installed via npm.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[myoung@F00 ~]$ mkdir tutorial
</span><span class='line'>[myoung@F00 ~]$ cd tutorial
</span><span class='line'>[myoung@F00 tutorial]$ npm install connect # the middleware module for the model
</span><span class='line'>[myoung@F00 tutorial]$ npm install express # the module to set up 'route' or controllers
</span><span class='line'>[myoung@F00 tutorial]$ npm install jade # the module to set up shorthand html, or views</span></code></pre></td></tr></table></div></figure>


<p>Next, the actual node app is needed. It&#8217;s a basic setup that loads the installed modules, listens on port 9095, and responds to any GET on &#8216;/&#8217; with &#8216;Hello from node.js!&#8217;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var express = require('express')
</span><span class='line'>var app = module.exports = express.createServer();
</span><span class='line'> 
</span><span class='line'>// Configuration
</span><span class='line'>app.configure(function(){
</span><span class='line'>  app.set('views', __dirname + '/views');
</span><span class='line'>  app.set('view engine', 'jade');
</span><span class='line'>  app.use(express.static(__dirname + '/public'));
</span><span class='line'>  app.set('view options', { layout: false });
</span><span class='line'>  app.use(app.router);
</span><span class='line'>});
</span><span class='line'> 
</span><span class='line'>app.configure('development', function(){
</span><span class='line'>  app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));
</span><span class='line'>});
</span><span class='line'> 
</span><span class='line'>app.configure('production', function(){
</span><span class='line'>  app.use(express.errorHandler());
</span><span class='line'>});
</span><span class='line'> 
</span><span class='line'>// Routes
</span><span class='line'>app.get('/',function(req,res) {
</span><span class='line'>  res.writeHead(200);
</span><span class='line'>  res.end("Hello from node.js!");
</span><span class='line'>});
</span><span class='line'> 
</span><span class='line'>app.listen(9095);</span></code></pre></td></tr></table></div></figure>


<p>If you run this, you&#8217;ll see that we have the worlds most basic server, let&#8217;s make it a little more advanced. This next version will set up a route that sends GET&#8217;s on &#8216;/&#8217; to &#8216;views/index.jade&#8217;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>app.get('/',function(req,res) {
</span><span class='line'>  res.render('index', {});
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-//new file: views/index.jade
</span><span class='line'>!!!
</span><span class='line'>html
</span><span class='line'>  head
</span><span class='line'>    title MVC Webpage
</span><span class='line'>  body
</span><span class='line'>    | This is the main layout</span></code></pre></td></tr></table></div></figure>


<p>This is all fine and dandy, but it&#8217;s pretty basic. If we want to make any real web app, we have to minimize code reuse. The great thing about jade is its ability to extend other files.So let&#8217;s make a base layout.jade that holds all the html(in your final blog you&#8217;d want it to load the css, and actually set up the page). Extending in Jade works by creating a file, styling it with css, loading whatever jQuery modules or anything you&#8217;d want to display, and setting &#8216;blocks&#8217;. Blocks will be overridden by child pages, so you&#8217;d want it to be where your content is, or data that will change from view to view. A side note, which you&#8217;ll notice in later snippets, is that you can put inline JavaScript in the jade file, and it can determine what is rendered</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-//file is layout.jade...the 'parent' view
</span><span class='line'>!!!
</span><span class='line'>html
</span><span class='line'>  head
</span><span class='line'>    title MVC Webpage
</span><span class='line'>  body
</span><span class='line'>    block content
</span><span class='line'>      | This is the main layout
</span><span class='line'> 
</span><span class='line'>-//index.jade
</span><span class='line'>extends layout
</span><span class='line'>-//now index is a 'child' of layout
</span><span class='line'>block content
</span><span class='line'>  | This was overridden by the index =)</span></code></pre></td></tr></table></div></figure>


<p>Now that we&#8217;ve got a successful, notably basic, MVC framework set, let&#8217;s make it Mongo compatible so we can display some stuff. I tested a few Mongo modules, but enjoyed this one the most. It plays more like the CLI and has minimal overhead</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[myoung@F00 tutorial]$ npm install mongodb</span></code></pre></td></tr></table></div></figure>


<p>Now the app.js has to be modified to make the connection, and on response to &#8216;/&#8217;, grab the collection as an array, and pass it to the page as a variable.The index.jade also has to be modified to check for the array passed in, and loop through it displaying the title and body</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var mongodb = require('mongodb')
</span><span class='line'>  , Db = mongodb.Db
</span><span class='line'>  , Server = mongodb.Server
</span><span class='line'>  , db = new Db('tutorial', new Server('localhost', 27017, {auto_reconnect: true, native_parser: true}), {})
</span><span class='line'>var express = require('express')
</span><span class='line'>var app = module.exports = express.createServer();
</span><span class='line'> 
</span><span class='line'>// Configuration
</span><span class='line'>app.configure(function(){
</span><span class='line'>  app.set('views', __dirname + '/views');
</span><span class='line'>  app.set('view engine', 'jade');
</span><span class='line'>  app.use(express.static(__dirname + '/public'));
</span><span class='line'>  app.set('view options', { layout: false });
</span><span class='line'>  app.use(app.router);
</span><span class='line'>});
</span><span class='line'> 
</span><span class='line'>app.configure('development', function(){
</span><span class='line'>  app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));
</span><span class='line'>});
</span><span class='line'> 
</span><span class='line'>app.configure('production', function(){
</span><span class='line'>  app.use(express.errorHandler());
</span><span class='line'>});
</span><span class='line'> 
</span><span class='line'>// Routes
</span><span class='line'>//this is the route for /, or the root
</span><span class='line'>app.get('/',function(req,res) {
</span><span class='line'>  var data_collection = function(err,collection) {
</span><span class='line'>    //find all articles in the collection, and sort by article_date...
</span><span class='line'>    //pass it in as db_results
</span><span class='line'>    collection.find().sort({article_date: -1}).toArray(function(err,db_results) {
</span><span class='line'>      console.log(db_results);//just to show some output on the server, log the entire obj
</span><span class='line'>      res.render('index', {//render the index
</span><span class='line'>        blog_content: db_results //pass in the results to the page as a local blog_content
</span><span class='line'>      });
</span><span class='line'>    });
</span><span class='line'>  };
</span><span class='line'> 
</span><span class='line'>  db.open(function(err, p_client) {
</span><span class='line'>    db.collection('articles', data_collection);//this is the name of the collection...ie db.articles.find()
</span><span class='line'>  });
</span><span class='line'> 
</span><span class='line'>});
</span><span class='line'> 
</span><span class='line'>app.listen(9095);</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-//index.jade
</span><span class='line'>extends layout
</span><span class='line'>block content
</span><span class='line'>  -if(locals.blog_content) {
</span><span class='line'>    -for(var i=0; i&lt;blog_content.length; i++) {
</span><span class='line'>      h3=blog_content[i].article_title
</span><span class='line'>      p !{blog_content[i].article_body}
</span><span class='line'>    -}
</span><span class='line'>  -}</span></code></pre></td></tr></table></div></figure>


<p>At this point the page will loop through the blog articles in the database and display them all on the same page. To make it a little nicer, let&#8217;s do some creative modifications.Index.jade will take the length of the array, and if it&#8217;s 1, display that article with a blank &#8216;Comment Section&#8217;. If it&#8217;s more than 1, let&#8217;s loop through all of them, and make the title link to the article itself.For this to really do anything, we need the link to go to a distinct article, so App.js will have to be mofied to allow a direct link. In this case, We&#8217;re going to make it go to &#8216;/index/mongos_id_of_article&#8217;.You&#8217;ll notice a little work to get the id from the link. Node.js sees &#8216;/index/mongos_id_of_article&#8217; as &#8216;/index/:article_id&#8217;, which is translated to &#8216;request.paracms.article_id&#8217;. The last part of this is the coersion from this id to a BSON id for a Mongo lookup (BSON.ObjectId).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-//index.jade
</span><span class='line'>extends layout
</span><span class='line'>block content
</span><span class='line'>  -if(locals.blog_content) {
</span><span class='line'>    -if(blog_content.length == 1) {
</span><span class='line'>      h3=blog_content[0].article_title
</span><span class='line'>      p !{blog_content[0].article_body}
</span><span class='line'>      hr(width="100%")
</span><span class='line'>      | Comment Section
</span><span class='line'>    -} else {
</span><span class='line'>      -for(var i=0; i&lt;blog_content.length; i++) {
</span><span class='line'>        h3
</span><span class='line'>          a(href='/article/'+blog_content[i]._id)=blog_content[i].article_title
</span><span class='line'>        p !{blog_content[i].article_body}
</span><span class='line'>      -}
</span><span class='line'>    -}
</span><span class='line'>  -}</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//this is the route for /article/somenumber .. somenumber is available in the request
</span><span class='line'>app.get('/article/:article_id',function(req,res) {
</span><span class='line'>  var data_collection = function(err,collection) {
</span><span class='line'>    var BSON = mongodb.BSONPure;//load the BSON object
</span><span class='line'>    var o_id = new BSON.ObjectID(req.params.article_id);//this is now a searchable
</span><span class='line'>                                                        //id for collection
</span><span class='line'>    collection.find({_id: o_id}).toArray(function(err,db_results) {
</span><span class='line'>      res.render('index', {//render the index
</span><span class='line'>        blog_content: db_results //pass the db_results to a local variable in index
</span><span class='line'>                                 //called blog_content
</span><span class='line'>      });
</span><span class='line'>    });
</span><span class='line'>  };
</span><span class='line'>  db.open(function(err, p_client) {
</span><span class='line'>    db.collection('articles', data_collection);//this is the name of the collection...ie db.articles.find()
</span><span class='line'>  });
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>If you run it at this point, you&#8217;ll be able to hit the index, see links to articles and go directly to them with a blank comment section. Let&#8217;s make that comment section. To prep for this, we&#8217;ll need a form to POST to /comment</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-//index.jade
</span><span class='line'>extends layout
</span><span class='line'>block content
</span><span class='line'>  -if(locals.blog_content) {
</span><span class='line'>    -if(blog_content.length == 1) {
</span><span class='line'>      h3=blog_content[0].article_title
</span><span class='line'>      p !{blog_content[0].article_body}
</span><span class='line'>      hr(width="100%")
</span><span class='line'>      | Comment Section
</span><span class='line'>      form(method='post',action='/comment')
</span><span class='line'>        label Name:
</span><span class='line'>          input(type='text',name='postername')
</span><span class='line'>        label Comment:
</span><span class='line'>          textarea(type='text',name='postercomment')
</span><span class='line'>        input(type='hidden',name='current_id',value=blog_content[0]._id)
</span><span class='line'>        input(type='submit',value='submit')
</span><span class='line'>    -} else {
</span><span class='line'>      -for(var i=0; i&lt;blog_content.length; i++) {
</span><span class='line'>        h3
</span><span class='line'>          a(href='/article/'+blog_content[i]._id)=blog_content[i].article_title
</span><span class='line'>        p !{blog_content[i].article_body}
</span><span class='line'>      -}
</span><span class='line'>    -}
</span><span class='line'>  -}</span></code></pre></td></tr></table></div></figure>


<p>If you run this now, you&#8217;ll get an error. That&#8217;s because we don&#8217;t have a route for a POST to /comment, so let&#8217;s set that up.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>app.post('/comment',function(req,res) {                                                                         
</span><span class='line'>  var bodyarr = [];                                                                                             
</span><span class='line'>  req.on('data', function(chunk){                                                                               
</span><span class='line'>    bodyarr.push(chunk);                                                                                        
</span><span class='line'>  });                                                                                                           
</span><span class='line'>  req.on('end', function(){
</span><span class='line'>    /* This is hackish but is to only show proof of concept                                                     
</span><span class='line'>       This will split the bodyarr that we've created                                                           
</span><span class='line'>          ex: id=4&body=what%20up&something=somethingelse                                                       
</span><span class='line'>    */                                                                                                          
</span><span class='line'>    var values = bodyarr.join('').split('&');                                                                   
</span><span class='line'>    var BSON = mongodb.BSONPure;//this will load the mongo BSON                                                 
</span><span class='line'>    var article_id = new BSON.ObjectID(values[2].split('=')[1]);//this was the argument for ID                  
</span><span class='line'> 
</span><span class='line'>    //create a 'comment' object that contains the poster and comment                                            
</span><span class='line'>    var comment_object = {                                                                                      
</span><span class='line'>      'poster': values[].split('=')[1],
</span><span class='line'>      'comment': values[1].split('=')[1]
</span><span class='line'>    };                                                                                                          
</span><span class='line'>    var data_collection = function(err,collection) {                                                            
</span><span class='line'>      //call update on the collection, find by _id, and push the comment object onto it                         
</span><span class='line'>      collection.update({_id: article_id},{$push : { comments : comment_object }});
</span><span class='line'>      res.redirect('back');
</span><span class='line'>    };
</span><span class='line'>    db.open(function(err, p_client) {                                                                           
</span><span class='line'>      db.collection('articles', data_collection);//this is the name of the collection...ie db.articles.find()   
</span><span class='line'>    });
</span><span class='line'>  });
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>It got a little complicated in that snippet, so here&#8217;s a slight breakdown. The post takes the data as a stream (req.on) and pushes it to an array. On the end of the stream we&#8217;ll break up the values,and push it onto the mongo collection for that id (we know the id from the hidden form element). The push is an Object that&#8217;s a &#8216;poster&#8217; and a &#8216;comment&#8217;. When this is finished, we&#8217;ll redirect backwards. This is dandy, but you&#8217;ll notice we haven&#8217;t set up the view to display comments, only store. The newest code has the addition of a loop. If comments exists(if the collection even has a comment array), we will loop through it and display it. For handiness, you&#8217;ll also notice the addition of a link to &#8216;/&#8217;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-//index.jade 
</span><span class='line'>extends layout
</span><span class='line'>-//overwrite the content block with new data
</span><span class='line'>block content 
</span><span class='line'>  -if(locals.blog_content) {//make sure it has a blog_content (to be safe and not
</span><span class='line'>                            //cause an Express crash
</span><span class='line'>    -if(blog_content.length == 1) {//only 1 article, means they clicked on
</span><span class='line'>                                   //an article link to view it....
</span><span class='line'>                                   //so render it with the comment form data
</span><span class='line'>      h3=blog_content[0].article_title
</span><span class='line'>      p !{blog_content[0].article_body}
</span><span class='line'>      hr(width="100%")
</span><span class='line'>      | Comment Section
</span><span class='line'>      form(method='post',action='/comment')
</span><span class='line'>        label Name:
</span><span class='line'>          input(type='text',name='postername')
</span><span class='line'>        label Comment:
</span><span class='line'>          textarea(type='text',name='postercomment')
</span><span class='line'>        input(type='hidden',name='current_id',value=blog_content[0]._id)
</span><span class='line'>        input(type='submit',value='submit')
</span><span class='line'>      hr(width="100%")
</span><span class='line'>      -var comments = blog_content[0].comments;
</span><span class='line'>      -if(comments && comments != undefined) {
</span><span class='line'>        -for(var i=0; i&lt;comments.length;i++) {
</span><span class='line'>          h3=comments[i].poster
</span><span class='line'>          | !{comments[i].comment}
</span><span class='line'>        -}
</span><span class='line'>      -}
</span><span class='line'>      hr(width="100%")
</span><span class='line'>      a(href='/') Home
</span><span class='line'>    -} else {//more than one article, meaning they're at the 'blog root',
</span><span class='line'>             //looking at all the links
</span><span class='line'>      -for(var i=0; i&lt;blog_content.length; i++) {//loop through blog array
</span><span class='line'>        h3
</span><span class='line'>          a(href='/article/'+blog_content[i]._id)=blog_content[i].article_title
</span><span class='line'>        p !{blog_content[i].article_body}
</span><span class='line'>      -}
</span><span class='line'>    -}
</span><span class='line'>  -}</span></code></pre></td></tr></table></div></figure>


<p>This last snippet is a clean up of the comment post. Since it&#8217;s parsed as parameters, spaces are +&#8217;s. This could be fixed by modifying the way I handle the post as a stream, but for demonstrations sake, let&#8217;s just do a regex replace of /+/ to spaces.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>app.post('/comment',function(req,res) {
</span><span class='line'>  var bodyarr = [];
</span><span class='line'>  req.on('data', function(chunk){
</span><span class='line'>    bodyarr.push(chunk);
</span><span class='line'>  });
</span><span class='line'>  req.on('end', function(){//the data has finished coming in
</span><span class='line'>    /* This is hackish but is to only show proof of concept
</span><span class='line'>       This will split the bodyarr that we've created
</span><span class='line'>          ex: id=4&body=what%20up&something=somethingelse
</span><span class='line'>    */
</span><span class='line'>    var values = bodyarr.join('').split('&');
</span><span class='line'>    var BSON = mongodb.BSONPure;//this will load the mongo BSON
</span><span class='line'>    var article_id = new BSON.ObjectID(values[2].split('=')[1]);//this was the argument for ID
</span><span class='line'> 
</span><span class='line'>    //create a 'comment' object that contains the poster and comment
</span><span class='line'>    var comment_object = {
</span><span class='line'>      'poster': values[].split('=')[1].replace(/+/g,' '),//had +'s for spaces, so replace them
</span><span class='line'>      'comment': values[1].split('=')[1].replace(/+/g,' ')
</span><span class='line'>    };
</span><span class='line'> 
</span><span class='line'>    var data_collection = function(err,collection) {
</span><span class='line'>      //call update on the collection, find by _id, and push the comment object onto it
</span><span class='line'>      collection.update({_id: article_id},{$push : { comments : comment_object }});
</span><span class='line'>      res.redirect('back');//send the user to the previous page
</span><span class='line'>    };
</span><span class='line'>    db.open(function(err, p_client) {
</span><span class='line'>      db.collection('articles', data_collection);//this is the name of the collection...ie db.articles.find()
</span><span class='line'>    });
</span><span class='line'>  });
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seriously MySQL?]]></title>
    <link href="http://marcyoung.us/post/seriously-mysql/"/>
    <updated>2012-03-28T00:00:00-05:00</updated>
    <id>http://marcyoung.us/post/seriously-mysql</id>
    <content type="html"><![CDATA[<p>I recently discovered one of the most confusing things I&#8217;ve seen in MySQL.<!--more-->. Lets start with this table:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>| Table | Create Table      
</span><span class='line'>| blah  | CREATE TABLE 'blah' (
</span><span class='line'>  'id' int(11) NOT NULL,
</span><span class='line'>    'date' datetime NOT NULL
</span><span class='line'>    ) ENGINE=MyISAM DEFAULT CHARSET=latin1 |</span></code></pre></td></tr></table></div></figure>


<p>What this means is you have a required date. Let&#8217;s say this is to ENFORCE that date is there and valid (without a default value obviously).Now, what you can expect, is that you cannot force the column to take a default value&#8230;it must be specified, so this is what you&#8217;d expect to see:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql&gt; insert into blah set id=1,date=NULL;
</span><span class='line'>ERROR 1048 (23000): Column 'date' cannot be null</span></code></pre></td></tr></table></div></figure>


<p>Cool&#8230;that&#8217;s right&#8230;so why does this work?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql&gt; update blah set date=NULL where date is not null;
</span><span class='line'>Query OK, 1 row affected, 1 warning (0.00 sec)
</span><span class='line'>Rows matched: 1  Changed: 1  Warnings: 1
</span><span class='line'> 
</span><span class='line'> mysql&gt; select * from blah;
</span><span class='line'> +------+---------------------+
</span><span class='line'> | id   | date                |
</span><span class='line'> +------+---------------------+
</span><span class='line'> |    1 | 0000-00-00 00:00:00 |
</span><span class='line'> +------+---------------------+
</span><span class='line'> 1 row in set (0.00 sec)</span></code></pre></td></tr></table></div></figure>


<p>&#8230;&#8230;&#8230;Huh? It took on a default value, even specified as null?!If that doesn&#8217;t irritate you, what about this?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql&gt; insert into blah set id=2;
</span><span class='line'>Query OK, 1 row affected, 1 warning (0.00 sec)
</span><span class='line'> 
</span><span class='line'> mysql&gt; select * from blah;
</span><span class='line'> +------+---------------------+
</span><span class='line'> | id   | date                |
</span><span class='line'> +------+---------------------+
</span><span class='line'> |    1 | 0000-00-00 00:00:00 |
</span><span class='line'> |    2 | 0000-00-00 00:00:00 |
</span><span class='line'> +------+---------------------+
</span><span class='line'> 2 rows in set (0.00 sec)</span></code></pre></td></tr></table></div></figure>


<p>&#8230;.So, I&#8217;ve specified that it cannot be NULL, but because datetime doesn&#8217;t actually have a NULL datatype, it accepts the NULL datetime of &#8217;0000-00-00 00:00:00&#8242;. This is completely illogical. What&#8217;s worse, I specified NOT NULL, yet wrote an update to set date=NULL, and it passed. According to the MySQL 5 page, it&#8217;s because:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Illegal DATETIME, DATE, or TIMESTAMP values are converted to the “zero” value of the  appropriate type ('0000-00-00 00:00:00' or '0000-00-00').</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s fine and dandy, but the MySQL is ignoring the fact that I set date=NULL where the schema shouldn&#8217;t allow it.</p>
]]></content>
  </entry>
  
</feed>
