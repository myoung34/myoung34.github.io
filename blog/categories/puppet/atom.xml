<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">

  <title><![CDATA[Category: puppet | Marcus Young]]></title>
  <link href="https://marcyoung.us/blog/categories/puppet/atom.xml" rel="self"/>
  <link href="https://marcyoung.us/"/>
  <updated>2018-11-26T11:50:16-06:00</updated>
  <id>https://marcyoung.us/</id>
  <author>
    <name><![CDATA[Marcus Young]]></name>
    
  </author>
  <generator uri="https://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Yet another Puppet module - HBase]]></title>
    <link href="https://marcyoung.us/post/hbase-puppet-module"/>
    <updated>2014-10-28T00:00:00-05:00</updated>
    <id>https://marcyoung.us/post/hbase-puppet-module</id>
    <content type="html"><![CDATA[<p>In my current set-up I have now deployed a very ugly HBase RPM (0.96) with a puppet manifest to help other devs bring up hbase quickly as well as a more resilient version of the same setup to a coworkers hbase stargate project. I decided to sit down and make it &ldquo;legit&rdquo; by adding best-practices and real usage tests. <!-- more --></p>

<p>I present yet another HBase module. Unlike the ones on the forge, however, this one works.</p>

<p>The RPMs are provided by a yum repo from <a href="https://hortonworks.com/hdp/">horton works data platform</a> which are very well made, contain well-catered configuration files, and even uses zookeeper out of the box. If you have made it this far and wish to try it out, it is very simple and works exremely well. While I would NOT use it in production in favor of a clustered set up with Thrift, Region Servers, or even YARN, it will work for most dev set ups. If you use it in production, drop me a line on how well it performs under load.</p>

<p>If you are interested in something more suitable for production I recommand <a href="https://ambari.apache.org/">Ambari</a>. It&rsquo;s extremely awesome. Otherwise, just check out my current module at <a href="https://github.com/myoung34/puppet-hbase">my github</a> or on the <a href="https://forge.puppetlabs.com/myoung34/hbase">puppet forge</a>.</p>

<p>Basic Usage:</p>

<pre><code>class { 'hbase':
  port =&gt; '8080', #default is '8000'
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Puppet Module - MirthConnect]]></title>
    <link href="https://marcyoung.us/post/mirth-puppet-module"/>
    <updated>2014-05-14T00:00:00-05:00</updated>
    <id>https://marcyoung.us/post/mirth-puppet-module</id>
    <content type="html"><![CDATA[<p>I released a new Puppet module to the forge out of another work necessity. Mirth is used pretty heavily for HL7 ETL, and has a ton of other uses. <!-- more --></p>

<p>I started out at my current gig doing this, so it hurt a little to have to automate it, mostly out of fear of getting back into that engine =).</p>

<p>It can be found <a href="https://github.com/myoung34/puppet-mirthconnect">on my github</a> or at the <a href="https://forge.puppetlabs.com/myoung34/mirthconnect">Puppet forge</a>.</p>

<p>Basic Usage:</p>

<pre><code>yumrepo { "my mirth repo":
  baseurl  =&gt; "https://server/pulp/repos/mirthconnect/",
  descr    =&gt; "My Mirth Connect Repository",
  enabled  =&gt; 1,
  gpgcheck =&gt; 0,
}

class { 'mirthconnect':
  provider =&gt; 'yum', #default is 'rpm'
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Complete Continuous Deployment Using Puppet and Pulp - Part 4 - Puppet and Jenkins]]></title>
    <link href="https://marcyoung.us/post/continuous-deployment-using-puppet-and-pulp-pt-4-puppet-jenkins"/>
    <updated>2014-03-22T00:00:00-05:00</updated>
    <id>https://marcyoung.us/post/continuous-deployment-part-4-puppet-and-jenkins</id>
    <content type="html"><![CDATA[<p>So. We have an application that it&rsquo;s constantly pushed to Yum when it&rsquo;s modified. We have a puppet manifest (with tests) that can deploy this application and keep it up to date, and we even have r10k handling the deployment of those puppet modules so that we don&rsquo;t have to worry about dependencies, and we can even stage them! What we don&rsquo;t have is a way of getting changes to that puppet module to the puppet master without remoting in and running r10k. That&rsquo;s easy to fix with jenkins!<!--more--></p>

<p>If you were to stop right now, you&rsquo;re pretty close. But&hellip;remoting into the server to redeploy isn&rsquo;t scalable. What if you forget? What if you have a new guy that made a super awesome bugfix to your puppet module and forgot how to get it up to the servers? Enter jenkins. Note: I have travis-ci set up for the one here, but we&rsquo;re going to duplicate that logic. Travis-CI is nice if your module is on github, but it may not be. Or you may need it to do something else, such as trigger an r10k deployment, so that&rsquo;s why we&rsquo;re still implementing Jenkins.</p>

<h3>The Jenkins job for puppet-exampleservice</h3>

<ol>
<li>Create a free-style job and name it something like <em>puppet-exampleservice</em></li>
<li>Point it to your git repo for the <em>puppet-exampleservice</em> module and have it poll SCM every x minutes.</li>
<li>Have it run in rvm 2.0.0</li>
<li>Create an <strong>execute shell</strong> build step with:
<code>
bundle install
bundle exec rake
</code></li>
<li>From the <em>warnings</em> plugin, add a <strong>post-build action</strong> to <em>scan for compiler warnings</em>

<ul>
<li>set <em>scan console log</em> to <strong>puppet-lint</strong></li>
</ul>
</li>
</ol>


<p>From here, you now have something similar to Travis-Ci. Hit Build, and it should go green. Congrats, you now have automated testing. What you need now is that automated deployment I&rsquo;ve been hinting at. But that&rsquo;s easy!</p>

<h3>The Jenkins job to re-deploy puppet modules on the ENC</h3>

<ol>
<li>Create a free-style job and name it something like <em>Redeploy Puppet Modules</em></li>
<li>Add a string parameter <strong>git_branch</strong></li>
<li>Add a build step <strong>execute shell script on remote host using ssh</strong>

<ul>
<li>Select your ENC (set one up in the <strong>Manage jenkins</strong> portion first and make sure your private/public keys work) with:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>&lt;h1&gt;Validate the build param. Should be &lsquo;dev&rsquo; or &lsquo;master&rsquo;&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;This corresponds to the r10k setup.&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;environment=$(echo &ldquo;$git_branch&rdquo; | awk &lsquo;{split($0,a,&ldquo;/&rdquo;); print a[2]}&rsquo;)
</span><span class='line'>if [[ &ldquo;$environment&rdquo; == &ldquo;master&rdquo; ]]; then
</span><span class='line'>rm -rf /var/cache/r10k/&lt;em&gt; # Sometimes r10k won&rsquo;t deploy and acts like it&rsquo;s up to date.
</span><span class='line'>/usr/bin/r10k deploy environment master -v -p
</span><span class='line'>exit 0
</span><span class='line'>elif [[ &ldquo;$environment&rdquo; == &ldquo;dev&rdquo; ]]; then
</span><span class='line'>rm -rf /var/cache/r10k/&lt;/em&gt; # Sometimes r10k won&rsquo;t deploy and acts like it&rsquo;s up to date.
</span><span class='line'>/usr/bin/r10k deploy environment dev -v -p
</span><span class='line'>exit 0
</span><span class='line'>else
</span><span class='line'>echo &ldquo;Invalid environment parameter [$environment] passed to build.&rdquo;
</span><span class='line'>echo &ldquo;  Should be one of &lsquo;dev&rsquo; or &lsquo;master&rsquo;.&rdquo;
</span><span class='line'>exit 1
</span><span class='line'>fi</span></code></pre></td></tr></table></div></figure></p></li>
</ul>
</li>
</ol>


<p>You&rsquo;re now ready for your previous module to notify this build.</p>

<ol>
<li>Go back to your puppet module job and:

<ol>
<li>Create a post-build action <strong>trigger parameterized build on other projects</strong></li>
<li>Set &lsquo;projects to build&rsquo; to <strong>Redeploy Puppet Modules</strong></li>
<li>Set &lsquo;Trigger when build is&rsquo; to <strong>Stable or unstable but not failed</strong></li>
<li>Add a parameter &lsquo;Predefined parameters&rsquo; and give it: <code>git_branch=$GIT_BRANCH</code></li>
</ol>
</li>
</ol>


<h3>You&rsquo;re missing a Jenkins job</h3>

<p>Technically you&rsquo;re close, but you might want to redeploy if your r10k changes. You can do that right now!</p>

<ol>
<li>Create a new free-style joba and call it <em>puppet-r10k</em></li>
<li>There are no tests, so just point it at your r10k git repo and watch <em>dev</em> and <em>master</em> branches</li>
<li>Make it poll SCM every x minutes</li>
<li>Create a post-build action <strong>trigger parameterized build on other projects</strong>

<ul>
<li>Set &lsquo;projects to build&rsquo; to <strong>Redeploy Puppet Modules</strong></li>
<li>Set &lsquo;Trigger when build is&rsquo; to <strong>Stable or unstable but not failed</strong></li>
<li>Add a parameter &lsquo;Predefined parameters&rsquo; and give it:</li>
</ul>
</li>
</ol>


<h3>You&rsquo;re Done!!1one</h3>

<p>Now build your puppet module. When it goes green, it will notify the <strong>Redeploy Puppet Modules</strong> job and give it the git branch (<em>dev</em> or <em>master</em>). That build will now parse the git branch, and on the Foreman ENC will run the r10k deployer. Don&rsquo;t you have that fuzzy feeling inside because you can now redeploy your modules to the server by just making a commit? I do and I don&rsquo;t even know you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Complete Continuous Deployment Using Puppet and Pulp - Part 3 - Enter Puppet]]></title>
    <link href="https://marcyoung.us/post/continuous-deployment-using-puppet-and-pulp-pt-3-enter-puppet"/>
    <updated>2014-03-21T00:00:00-05:00</updated>
    <id>https://marcyoung.us/post/continuous-deployment-part-3-enter-puppet</id>
    <content type="html"><![CDATA[<p>Now that we have a package, we need a way of installing it amirite? We&rsquo;re going to write a puppet module for this package complete with rspec tests<!--more--></p>

<h1>The Module</h1>

<p>The module for this is going to be simple. The application as it is right now is an HTTP server in python. So our module needs to do these things:</p>

<ol>
<li>Manage the package and make sure it&rsquo;s always the latest

<ul>
<li>This ensures that new builds will be reinstalled</li>
</ul>
</li>
<li>Open the firewall for TCP port 8000</li>
<li>Make sure dependencies are installed

<ul>
<li>The RPM has a dependency set for <em>python</em>, so yum would take care of this, but I like to be explicit and not assume that the RPM knows edge cases.</li>
</ul>
</li>
</ol>


<h2>puppet-exampleservice breakdown</h2>

<h3>Files</h3>

<ul>
<li><em>manifests/init.pp</em>

<ul>
<li>This just kickstarts the puppet catalog for this module. It will call our <em>exampleservice.pp</em> class</li>
</ul>
</li>
<li><em>manifests/exampleservice.pp</em>

<ul>
<li>This is the hard worker. It will make sure the service is running, the package is the latest, and that the firewall is open. This implies a dependency on the puppetlabs-firewall module.</li>
</ul>
</li>
<li><em>Puppetfile</em>

<ul>
<li>This will let you know dependencies, such as the <em>puppetlabs-firewall</em> module</li>
</ul>
</li>
<li><em>.travis.yml</em> and <em>.fixtures.yml</em>

<ul>
<li>These are specific to <a href="https://travis-ci.org">travis-ci</a>. If your module will be internal, and not at github, you won&rsquo;t need this. I did so because it&rsquo;s at github. I&rsquo;ll be duplicating this CI at jenkins, and you&rsquo;ll see why later.</li>
</ul>
</li>
<li><em>Rakefile</em>, <em>Gemfile</em>, and <em>spec/</em>

<ul>
<li>These are all part of the testing framework. The tests included for this module are <strong>Puppetlint</strong> (with some disabled checks) and <strong>Rspec-Puppet</strong></li>
</ul>
</li>
</ul>


<h3>Tests</h3>

<ol>
<li>Puppetlint

<ul>
<li>Checks syntax and best practices for your modules. Highly recommended. To make use of this in jenkins, you&rsquo;ll want to take a look at <a href="https://hackers.lookout.com/2012/07/puppet-lint-with-jenkins/">this guide</a></li>
</ul>
</li>
<li>RSpec-Puppet

<ul>
<li>Let&rsquo;s you write assertions for the catalog. Examples would include testing manifest logic, like not doing something if a flag was true or false, etc. See <a href="rspec-puppet.com/tutorial/">the rspec-puppet pages</a></li>
</ul>
</li>
</ol>


<h1>Making your module work via r10k</h1>

<p>You have a module. How do you get it on foreman, or any Puppet master to actually work? Are you going to remote into it, check it out to some repository folder, symlink it to <strong>/etc/puppet/modules</strong> and call it good? That&rsquo;ll work, but how do you manage dependencies? Remember, you need the <em>puppetlabs-firewall</em> module there too for this to work. You&rsquo;ll probably need others. What happens when you have to fix this module? Fix it, see the tests are green (or dear god fix it on the ENC), and call that your process? The point of continous deployment, devops, etc etc is to have <strong>consistency</strong>. Having a one-off process for deploying your configuration management violates what you&rsquo;re trying to solve! Enter <strong>r10k</strong>. Essentially all you need is a new git repository (call this one <a href="https://github.com/myoung34/blog-r10k">blog-r10k</a> that holds information about what modules you need, where they came from, and what versions you want of them and where. This also adds the ability to <strong>stage</strong> modules. You can have a <em>dev</em> branch for your module, deploy it to <em>development</em> nodes, and vice versa. This means you can stop hoping your fix works and prove it before it hits production boxes.</p>

<p>In the <a href="/post/continuous-deployment-using-puppet-and-pulp-pt-1-the-machines/">Part 1</a> I hinted at modifying the <em>[development]</em> and <em>[production]</em> labels in the puppet configuration file. Now is when you find out why.</p>

<h3>Set up r10k</h3>

<p>On your ENC, create a file <strong>/etc/r10k.yaml</strong> with this content:</p>

<pre><code>:cachedir: '/var/cache/r10k'
:sources:
  :puppet:
    remote: "https://github.com/myoung34/blog-r10k.git"
    basedir: '/etc/puppet/environments'
:purgedirs:
  - /etc/puppet/environments
</code></pre>

<h3>Deploy your modules the &lsquo;hot&rsquo; way</h3>

<p>How? On the ENC type: <code># r10k deploy environment -v -p</code></p>

<h3>What wizardry is this?!</h3>

<p>That r10k file tells you to purge <em>/etc/puppet/environments</em> and deploy the <em>Puppetfile</em> from the <a href="https://github.com/myoung34/blog-r10k/blob/master/Puppetfile">r10k repo</a> in a similar fashion to Gem, NuGet, etc. You told it to deploy all environments it knew about to that directory. The output showed a <strong>dev</strong> environment and a <strong>master</strong> environment. These are git branches! Each branch in the <a href="https://github.com/myoung34/blog-r10k/blob/master/Puppetfile">r10k repo</a> has a Puppetfile. You&rsquo;ll notice that in the master branch, it said to deploy <em>puppetlabs-firewall</em> and <em>puppet-exampleservice</em>. Look in the dev branch of the <a href="https://github.com/myoung34/blog-r10k/blob/master/Puppetfile">r10k repo</a>. The Puppetfile says to use <code>:ref =&gt; 'dev'</code> for your <em>puppet-exampleservice</em>. You just staged your code. Your <strong>dev</strong> code now deploys to <strong>/etc/puppet/environments/dev/modules</strong> and your <strong>master</strong> code now deploys to <strong>/etc/puppet/environments/master/modules</strong> ! Remember the change you made to your puppet.conf? Any node that has <code>environment = development</code> will generate its catalog using <strong>/etc/puppet/environment/dev/modules</strong> and <code>environment = production</code> will generate its catalog using <strong>/etc/puppet/environment/master/modules</strong>.</p>

<h3>Why you care even if you think you don&rsquo;t</h3>

<p>That passive aggressive statement I had criticizing your workflow above is now null. If you make a change to your module in <strong>dev</strong>, all you have to do is remote into your puppet master where <em>r10k</em> is, and type <code># r10k deploy environment dev -v -p</code>. No more missing dependencies, it&rsquo;s hands off!</p>

<h3>What&rsquo;s missing</h3>

<ol>
<li>Acceptance tests

<ul>
<li>Before this would have been <strong>rspec-system-puppet</strong> but it&rsquo;s deprecated for <a href="https://github.com/puppetlabs/beaker">Beaker</a>. Note that both of these use Vagrant to spin up a siloed Virtual Machine to test the module in isolation. If you&rsquo;re wanting to do this, make sure your jenkins can spin up a virtual machine. If your jenkins is at AWS for example, you&rsquo;d probably want to look at having it spin up an AMI to run this. My current setup does not allow the creation of VMs from a VM (My jenkins is a VM).</li>
</ul>
</li>
</ol>


<h2>What you have at this point in this blog post</h2>

<p>Right now, you have a Jenkins box that generates new RPMs of your application whenever you make changes to it. You also have a manifest that can manage it. However, this is a one-off. If you have to modify your manifest, you have to redeploy it via r10k to the ENC (foreman). It would be nice if you could utilize Jenkins for this. That&rsquo;s in the next post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Complete Continuous Deployment Using Puppet and Pulp - Part 2 - The Application]]></title>
    <link href="https://marcyoung.us/post/continuous-deployment-using-puppet-and-pulp-pt-2-the-app"/>
    <updated>2014-03-20T00:00:00-05:00</updated>
    <id>https://marcyoung.us/post/continuous-deployment-part-2-the-application</id>
    <content type="html"><![CDATA[<p>Our application will be simple, as its goal is only to demonstrate a daemon that needs to be managed via init.d and packaged as an RPM.<!--more--></p>

<h1>The Application</h1>

<p>Like I said, it&rsquo;s simple. It&rsquo;s going to be a shell script that runs the <em>python SimpleHTTPServer</em> on port 8000, but it brings up some real life issues:</p>

<ul>
<li>How can we package it</li>
<li>How can we ensure the port is open</li>
<li>How can we test it</li>
</ul>


<p>The code is on <a href="https://github.com/myoung34/blog-exampleservice">this github page</a>.</p>

<p>You&rsquo;ll notice the layout mimics its place on the filesystem. This may not be a realistic case, but it sure make sthe POC easy. You&rsquo;ll notice a <strong>Rakefile</strong> in the repository. This is the heart of our packaging for this. If you look into it, you&rsquo;ll see it&rsquo;s essentially a Makefile (see what I did there???). There are many other ways to approach this, but it&rsquo;s the simplest for now. Basically the rake file will parse the <em>version</em> file (which is <a href="https://semver.org/">semantically versioned</a>), and tries to build an RPM via FPM based on it.</p>

<ol>
<li>The <strong>unstable</strong> build will happen as <code>bundle exec rake unstable</code>

<ul>
<li>This will create an rpm such as: <strong>myapp-0.0.1-beta.1.{timestamp}.x86_64.rpm</strong></li>
<li>This is timestamped because many merges to dev can happen before a version bump.</li>
</ul>
</li>
<li>The <strong>stable</strong> build will happen as <code>bundle exec rake stable</code>

<ul>
<li>This will create an rpm such as <strong>myapp-0.0.1-1.x86_64.rpm</strong></li>
<li>There should be no timestamping here, master merges should always be tagged and versioned appropriately.</li>
</ul>
</li>
<li>Both of the previous builds will attempt to upload to the pulp repository we set up.</li>
</ol>


<h1>The Jenkins set up</h1>

<h3>There is a pre-requisite.</h3>

<p>If you look at the Rakefile closely, you&rsquo;ll see (or have wondered already) that pulp-admin requires a username and password. You wouldn&rsquo;t want to put this in the git repository, so the Rakefile has an implicit requirement for a file <strong>.pulp.yml</strong> in the home directory (for Jenkins this should be <em>/usr/lib/jenkins</em>.</p>

<h3>The Jobs</h3>

<ol>
<li>Unstable Job

<ul>
<li>Create a job that watches that git repository&rsquo;s <strong>dev</strong> branch</li>
<li>The git repository is <a href="https://github.com/myoung34/blog-exampleservice.git">https://github.com/myoung34/blog-exampleservice.git</a></li>
<li>Poll SCM every 3 minutes <code>H/3 * * * *</code></li>
<li>Run under rvm. I chose <strong>2.0.0</strong></li>
<li>Run a build script:
<code>
bundle install
bundle exec rake
</code></li>
</ul>
</li>
<li>Stable Job

<ul>
<li>Create a job that watches that git repository&rsquo;s <strong>master</strong> branch</li>
<li>The git repository is <a href="https://github.com/myoung34/blog-exampleservice.git">https://github.com/myoung34/blog-exampleservice.git</a></li>
<li>Poll SCM every 3 minutes <code>H/3 * * * *</code></li>
<li>Run under rvm. I chose <strong>2.0.0</strong></li>
<li>Run a build script:
<code>
bundle install
bundle exec rake stable
</code></li>
</ul>
</li>
</ol>


<h1>Profit</h1>

<p>You&rsquo;ll notice that each time you make a change to the git repository, it will build an RPM for it and upload it to the Pulp server. That means that if you&rsquo;re subscribed to that Yum repository, you could do a <code>yum update myapp</code> and you&rsquo;d get a new version. We&rsquo;re getting very close to done =)</p>

<p><img class="left" src="/images/jenkinsbuild.png" title="jenkins" ></p>
]]></content>
  </entry>
  
</feed>
