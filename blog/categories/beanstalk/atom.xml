<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">

  <title><![CDATA[Category: beanstalk | Marcus Young]]></title>
  <link href="https://marcyoung.us/blog/categories/beanstalk/atom.xml" rel="self"/>
  <link href="https://marcyoung.us/"/>
  <updated>2019-11-20T11:01:25-08:00</updated>
  <id>https://marcyoung.us/</id>
  <author>
    <name><![CDATA[Marcus Young]]></name>
    
  </author>
  <generator uri="https://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My Thoughts after six months of Elastic Beanstalk.]]></title>
    <link href="https://marcyoung.us/post/six-months-of-beanstalk"/>
    <updated>2015-11-16T00:00:00-08:00</updated>
    <id>https://marcyoung.us/post/six-months-of-beanstalk</id>
    <content type="html"><![CDATA[<p>We&rsquo;ve been using pure beanstalk at my current gig for six months and here are my thoughts. <!-- more --></p>

<p>I&rsquo;ll start off with the tl;dr: I like beanstalk a lot. When it fits.</p>

<p>I&rsquo;ve written enought deployment mechanisms to go a little crazy in my time. From tagging code in SVN and pushing it to a central store, to purely puppet provisioned instances, to microservices with ad-hoc AMIs to beanstalk. And beanstalk works. If you have a <em>traditional</em> application (by that I mean some consumers, some APIs, and a database of some sort), beanstalk is the (insert here).</p>

<p>Our current stack includes:</p>

<ul>
<li>A backend rails API.</li>
<li>A front-end javascript CMS.</li>
<li>An ad-hoc CRUD API written in rails.</li>
<li>A javascript web-embed written in node.</li>
</ul>


<p>We use jenkins to deploy code changes once tests pass.</p>

<p>And I&rsquo;ve got to say: I&rsquo;m not unhappy. There are very very few tweaks to make any more.</p>

<ul>
<li>All of these have multiple environments (dev/uat/prod), of which dev and uat shut down at night and on weekends.</li>
<li>Deployment includes rollbacks and notifications on failure.</li>
<li>Things auto-scale as expected.</li>
<li>You get all the metrics you really care about out of the box.</li>
</ul>


<p>That said: if it doesn&rsquo;t fit your stack, don&rsquo;t hamstring it. There are many good deployment mechanisms out there, and if your application does not easily fit into the peg that is beanstalk: find something else. We attempted to use it as a deployment mechanism for our cache layer and it failed horribly. Was it because there is no built in support in beanstalk? Yes. But It would be really nice to see beanstalk provide a boiler plate type set up like a template. Basically you just use their default AWS Linux image with no framework on it, provide the deployment scripts, and be able to manage it via beanstalk. That would be fantastic.</p>

<p>The only downside that I have found is that I would really like to re-do our base architecture at AWS to be code-based.
I&rsquo;m pretty much sold on Terraform, but that is my personal choice, and I would really love to see first-hand beanstalk support there. While not a criticism of beanstalk, I&rsquo;ll just be happy and watch <a href="https://github.com/hashicorp/terraform/issues/2799">this issue on terraform about the topic</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fighting a nasty AWS bug for Beanstalk Leader Election]]></title>
    <link href="https://marcyoung.us/post/beanstalk-leader"/>
    <updated>2015-10-20T00:00:00-07:00</updated>
    <id>https://marcyoung.us/post/beanstalk-leader</id>
    <content type="html"><![CDATA[<p>In the last few months I&rsquo;ve been working to move my latest employer to AWS from Heroku and discovered a very nasty bug. <!-- more -->
The move was due to a lot of issues, the least of which being the cost of heroku compared to using what they implement.</p>

<p>None-the-less, everything went smoothly and the API went from roughly 80% uptime to 99.9%.
The cool thing: we used timed auto-scaling to shut down our dev/test instances at night time and on weekends. This saved <em>alot</em> of money. (remember this part).</p>

<p>After about two months, we discovered migrations in our rails application stopped. The code would deploy fine, but migrations just didn&rsquo;t. After much trial and error
it turned out to only happen on dev and test (not production). Parsing the web of beanstalks deployment framework, it turns out they have the concept of a leader. This is good. With the concept of a leader, you ensure that you can deploy to fleets in bulk and things that are stateful will only be run once (on the leader). One of these things is rails migrations, which makes perfect sense.</p>

<p>Somehow, the idea of our leader was lost. Out of all of our instances (2 in dev), neither one was considered a leader. Dropping that to a single instance, you would think: there&rsquo;s your leader right there. Nope.</p>

<p>Through much debugging with AWS support, we discovered that the implementation is based somewhat loosely <a href="https://github.com/blake-education/aws-cfn-bootstrap/blob/master/cfnbootstrap/cfn_client.py">on this</a>.</p>

<p>Turns out that a leader is elected once in the lifecycle of a beanstalk <em>application</em> and is passed around as the instances scale. If all instances are lost simaeltaneously, that leader is gone, and that&rsquo;s the bug. This could be problematic if you&rsquo;re not careful, but beanstalk makes it stupid simple to make sure instances are almost always available. It would take something crazy to lose all at once.</p>

<p>Like shutting down all instances at night.</p>

<p>As of now, the workaround has been to set an environment variable <code>EB_IS_COMMAND_LEADER</code> to <code>true</code>, and set our deployment to 1 at a time. While it works, it ties us back to beanstalks&#8217; internalness and makes our deployment much slower. Not only because it deploys to one at a time, but because each instance is going to run migrations even when not necessary.</p>

<p>Update: they&rsquo;ve fixed it with their latest update as of 11/15/2015. I removed the environment variable and deployed to a fleet, and it behaved as expected</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Purging old beanstalk versions]]></title>
    <link href="https://marcyoung.us/post/beanstalk-purge"/>
    <updated>2015-08-25T00:00:00-07:00</updated>
    <id>https://marcyoung.us/post/beanstalk-purge</id>
    <content type="html"><![CDATA[<p>I recently found out that you can have at most 500 application versions across beanstalk. I wrote a small script to purge it of old ones<!-- more --></p>

<p>I&rsquo;m a big fan of micro-deployments, however that seems to have caused a headache lately (and it turns out you don&rsquo;t want to find this out when you absolutely need to deploy).</p>

<p>My first attempt was to just browse to the S3 folder for our applications and purge them from S3 by the oldest ones, but that could cause a problem if you delete the archive for a currently deployed version. Also, as it turns out, Beanstalk caches this object list, so you still have to go to the EB console and click &lsquo;Refresh&rsquo; in the application versions list.</p>

<p>The better solution was to write a small ruby snippet to run on cron. It will get all application versions, subtract currently deployed ones, sort by date created, and purge all except &lsquo;x&rsquo; many.</p>

<pre><code>require 'aws-sdk'

MAX_VERSIONS=50
elasticbeanstalk = Aws::ElasticBeanstalk::Client.new(region: 'us-east-1')

short_versions_to_keep = elasticbeanstalk.describe_environments.environments.each.map { |v| "#{v.application_name}+#{v.version_label}" }

version_eligible_for_delete = {}
elasticbeanstalk.describe_application_versions.application_versions.each do |av|
  short_version = "#{av.application_name}+#{av.version_label}"
  next if short_versions_to_keep.include? short_version
  version_eligible_for_delete[av.application_name] ||= {}
  version_eligible_for_delete[av.application_name][av.version_label] = av
end

version_eligible_for_delete.each do |key, value|
  version_eligible_for_delete[key] = value.sort { |a,b| a[1].date_created &lt;=&gt; b[1].date_created }
  if version_eligible_for_delete[key].size &lt;=MAX_VERSIONS
    puts "#{key} has only #{version_eligible_for_delete[key].size} versions. Skipping"
    next
  end
  version_eligible_for_delete[key][0..version_eligible_for_delete[key].size-MAX_VERSIONS].each do |a|
    puts "Deleting #{a[1].application_name}: #{a[1].version_label}"
    elasticbeanstalk.delete_application_version(application_name: a[1].application_name, version_label: a[1].version_label)
    sleep 1
  end
end
</code></pre>
]]></content>
  </entry>
  
</feed>
