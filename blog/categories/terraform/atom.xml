<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">

  <title><![CDATA[Category: terraform | Marcus Young]]></title>
  <link href="https://marcyoung.us/blog/categories/terraform/atom.xml" rel="self"/>
  <link href="https://marcyoung.us/"/>
  <updated>2022-07-09T17:50:20+00:00</updated>
  <id>https://marcyoung.us/</id>
  <author>
    <name><![CDATA[Marcus Young]]></name>
    
  </author>
  <generator uri="https://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Terraform and Open Policy Agent with Atlantis]]></title>
    <link href="https://marcyoung.us/post/atlantis-opa"/>
    <updated>2020-05-01T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/atlantis-opa</id>
    <content type="html"><![CDATA[<p>We really like Atlantis and smart pre-flight checks. <!-- more --></p>

<p>If you see a trend in my latest blogs it&rsquo;s likely you&rsquo;ll guess i really like <a href="https://www.openpolicyagent.org">OPA</a>.</p>

<p>We use it in EKS to report on assertions consistently across all our clusters.</p>

<p>I use it to run tests against the gatekeeper rules.</p>

<p>It&rsquo;s pretty awesome, and it <a href="https://www.openpolicyagent.org/docs/latest/terraform">supports terraform plans</a>.</p>

<h3>The Set-Up</h3>

<p>I started off by forking the upstream atlantis AMI and baking the aws-cli into it.</p>

<p>In my atlantis.yaml I set up all the repos to use a new workflow <code>opa-workflow</code> such:</p>

<pre><code>workflows:
  opa-workflow:
    plan:
      steps:
        - init
        - plan
        - run: terraform$ATLANTIS_TERRAFORM_VERSION workspace select -no-color $WORKSPACE
        - run: terraform$ATLANTIS_TERRAFORM_VERSION show -json $PLANFILE &gt;"${PROJECT_NAME}_${PULL_NUM}_$(git rev-parse HEAD).json"
        - run: aws s3 cp "${DIR}/${PROJECT_NAME}_${PULL_NUM}_$(git rev-parse HEAD).json" s3://bucket_name/terraform/tfplan/ &gt;/dev/null
</code></pre>

<p>This pushes the plan file as <code>production_1234_somesha11122.json</code> into the bucket.</p>

<p>Next we have an AWS lambda with conftest built in. It responds to <code>terraform/tfplan/*.json</code> S3 create notifications, parses out the SHA, PR number, and workspace from atlantis, then runs:</p>

<pre><code>command:= exec.Command(
  "/var/task/bin/conftest",
  "test",
  "--no-color",
  "--output",
  "json",
  "/tmp/tfplan.json"
)
output, err := command.CombinedOutput()
if err != nil {
  fmt.Printf("[%s] conftest failed: %v", time.Now().Format("2006-01-02 15:04:05"), err)
}
</code></pre>

<p>Once this works, we can parse back the info to a comment and send a success|failure status to the git sha!</p>

<pre><code>if statusString == "failure" {
  atlantisStatus := &amp;github.RepoStatus{
    State: github.String(statusString),
    Description: github.String("TerrOPA Failures"),
    Context: github.String("atlantis/plan"),
  }
  client.Repositories.CreateStatus(backgroundctx, orgName, repoName, gitSha, atlantisStatus)
}
</code></pre>

<p><img src="/images/terropa.png"></p>

<h2>Update</h2>

<p>I&rsquo;ve had a few people ask me why I did it this way as an AWS lambda vs just running it on atlantis. I actually tried this first, but it wasn&rsquo;t &ldquo;clean&rdquo;.</p>

<p>First: if atlantis plan fails, its not very intuitive, <em>especially</em> if it&rsquo;s not a terraform error. It&rsquo;s kind of an unformatted stack trace.</p>

<p><img src="/images/terropa2.png"></p>

<p>With that exception it&rsquo;s not very feedback friendly. The point of this project is to provide a clean feedback loop for those who may not know or care what OPA is. We have quite a few methods of automatically generating terraform projects from cookie cutter + modules. I wanted a way of providing as much context as possible.</p>

<p>Next: we have a fairly large engineering team and I like to work in a &ldquo;plugin&rdquo; modal. When I&rsquo;m introducing something new I like to be able to toggle it on and off quickly, or gather metrics before pushing for changes. In this way, it&rsquo;s completely separated from Atlantis and has its own SDLC, which is nice from a &ldquo;Marc, you broke everything&rdquo; perspective.</p>

<p>Lastly I had to make a call from a security perspective. The point of this is 100% to be able from an upper architectural/infosec level to make assertions. For example: tagging. Tagging for us is partially for billing, partially to see our accountability plane, but <em>mostly</em> so that we can scope least privilege.</p>

<p>Having this with atlantis would mean the policies live in the atlantis repo for the container builder - I dont want to bounce atlantis every time we add/change policies.</p>

<p>Otherwise it would mean the policies live with the terraform which means that you could modify the assertions per-branch which is also a choice we made to avoid. These policies are open for contribution from everyone but it&rsquo;s an explicit rule that it&rsquo;s not meant to be able to shifted per branch and introduce a threat model around modifying it to pass when it shouldn&rsquo;t.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vault Roles/Policies in Terraform]]></title>
    <link href="https://marcyoung.us/post/vault-anything-in-terraform"/>
    <updated>2017-12-23T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/vault-anything-in-terraform</id>
    <content type="html"><![CDATA[<p>Now we get to the fun part and put everything we need from Vault in terraform. <!-- more --></p>

<p>If you&rsquo;ve used ECS and Vault with the <a href="https://www.vaultproject.io/docs/auth/aws.html">aws auth backend</a> you may have found a bit of a snag in terms of automation.</p>

<p>Lets say you want to create a new ECS container to run. You want that task to get specific secrets in vault by role. You write the code, terraform, etc and when it runs you get:</p>

<pre><code>URL: GET https://server:8200/v1/auth/aws-ec2/role/somerole
Code: 400. Errors:

* entry for role somerole not found
</code></pre>

<p>So you deployed something but now you have to create a policy, a role, etc in vault via the CLI, all the while your task is throttling.</p>

<p>Little known fact: the terribly-named <code>vault_generic_secret</code> from the <a href="https://www.terraform.io/docs/providers/vault/index.html">provider docs</a> can do create roles/policies in addition to secrets (hence the bad name).</p>

<p>In this part 2 I&rsquo;ll show you how to automate the next step of your ECS task into terraform so there&rsquo;s no race condition.</p>

<h2>Prerequisites</h2>

<ol>
<li>Vault running as a server</li>
<li>Vault CLI to match the server</li>
<li>Terraform</li>
</ol>


<h2>Create a vault policy in terraform</h2>

<pre><code>resource "vault_generic_secret" "policy" {
  path = "sys/policy/${aws_iam_role.neutrona_wand.name}"

  data_json = &lt;&lt;EOT
{
  "name": "${aws_iam_role.neutrona_wand.name}",
  "rules": "path \"secret/ops/*\" {\n  policy = \"read\"\n}\n\npath \"secret/common/*\" {\n  policy = \"read\"\n}"
}

EOT
}
</code></pre>

<h2>Create an AWS auth role in terraform</h2>

<pre><code>provider "vault" {}

resource "aws_iam_role" "neutrona_wand" {
  name = "neutrona_wand"
  path = "/lambda/"

  assume_role_policy = &lt;&lt;POLICY
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
POLICY
}

# The ugly replace in 'bound_iam_principal_arn' is to account for removing the path from the role. 
# If you look, my IAM role is /lambda/, so the arn would be 'arn:aws:iam::1234567890:role/lambda/neutrona_wand'
# While the 'bound_iam_principal_arn' wants the non-path version: 'arn:aws:iam::1234567890:role/neutrona_wand'
resource "vault_generic_secret" "role" {
  path = "auth/aws/role/${aws_iam_role.neutrona_wand.name}"

  data_json = &lt;&lt;EOT
{
  "bound_iam_principal_arn": "${replace(aws_iam_role.neutrona_wand.arn, "/:role\\/[a-zA-Z\\/]*\\//", ":role\\/")}",
  "policies": "default,${aws_iam_role.neutrona_wand.name},slack",
  "max_ttl":"300",
  "resolve_aws_unique_ids": "false"
}
EOT
}
</code></pre>
]]></content>
  </entry>
  
</feed>
