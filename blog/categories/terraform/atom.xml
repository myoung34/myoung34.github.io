<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">

  <title><![CDATA[Category: terraform | Marcus Young]]></title>
  <link href="https://marcyoung.us/blog/categories/terraform/atom.xml" rel="self"/>
  <link href="https://marcyoung.us/"/>
  <updated>2019-11-21T21:23:18+00:00</updated>
  <id>https://marcyoung.us/</id>
  <author>
    <name><![CDATA[Marcus Young]]></name>
    
  </author>
  <generator uri="https://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vault Roles/Policies in Terraform]]></title>
    <link href="https://marcyoung.us/post/vault-anything-in-terraform"/>
    <updated>2017-12-23T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/vault-anything-in-terraform</id>
    <content type="html"><![CDATA[<p>Now we get to the fun part and put everything we need from Vault in terraform. <!-- more --></p>

<p>If you&rsquo;ve used ECS and Vault with the <a href="https://www.vaultproject.io/docs/auth/aws.html">aws auth backend</a> you may have found a bit of a snag in terms of automation.</p>

<p>Lets say you want to create a new ECS container to run. You want that task to get specific secrets in vault by role. You write the code, terraform, etc and when it runs you get:</p>

<pre><code>URL: GET https://server:8200/v1/auth/aws-ec2/role/somerole
Code: 400. Errors:

* entry for role somerole not found
</code></pre>

<p>So you deployed something but now you have to create a policy, a role, etc in vault via the CLI, all the while your task is throttling.</p>

<p>Little known fact: the terribly-named <code>vault_generic_secret</code> from the <a href="https://www.terraform.io/docs/providers/vault/index.html">provider docs</a> can do create roles/policies in addition to secrets (hence the bad name).</p>

<p>In this part 2 I&rsquo;ll show you how to automate the next step of your ECS task into terraform so there&rsquo;s no race condition.</p>

<h2>Prerequisites</h2>

<ol>
<li>Vault running as a server</li>
<li>Vault CLI to match the server</li>
<li>Terraform</li>
</ol>


<h2>Create a vault policy in terraform</h2>

<pre><code>resource "vault_generic_secret" "policy" {
  path = "sys/policy/${aws_iam_role.neutrona_wand.name}"

  data_json = &lt;&lt;EOT
{
  "name": "${aws_iam_role.neutrona_wand.name}",
  "rules": "path \"secret/ops/*\" {\n  policy = \"read\"\n}\n\npath \"secret/common/*\" {\n  policy = \"read\"\n}"
}

EOT
}
</code></pre>

<h2>Create an AWS auth role in terraform</h2>

<pre><code>provider "vault" {}

resource "aws_iam_role" "neutrona_wand" {
  name = "neutrona_wand"
  path = "/lambda/"

  assume_role_policy = &lt;&lt;POLICY
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Principal": {
        "Service": [
          "lambda.amazonaws.com"
        ]
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
POLICY
}

# The ugly replace in 'bound_iam_principal_arn' is to account for removing the path from the role. 
# If you look, my IAM role is /lambda/, so the arn would be 'arn:aws:iam::1234567890:role/lambda/neutrona_wand'
# While the 'bound_iam_principal_arn' wants the non-path version: 'arn:aws:iam::1234567890:role/neutrona_wand'
resource "vault_generic_secret" "role" {
  path = "auth/aws/role/${aws_iam_role.neutrona_wand.name}"

  data_json = &lt;&lt;EOT
{
  "bound_iam_principal_arn": "${replace(aws_iam_role.neutrona_wand.arn, "/:role\\/[a-zA-Z\\/]*\\//", ":role\\/")}",
  "policies": "default,${aws_iam_role.neutrona_wand.name},slack",
  "max_ttl":"300",
  "resolve_aws_unique_ids": "false"
}
EOT
}
</code></pre>
]]></content>
  </entry>
  
</feed>
