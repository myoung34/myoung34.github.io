<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Marcus Young]]></title>
  <link href="https://marcyoung.us/blog/categories/programming/atom.xml" rel="self"/>
  <link href="https://marcyoung.us/"/>
  <updated>2022-04-20T00:36:09+00:00</updated>
  <id>https://marcyoung.us/</id>
  <author>
    <name><![CDATA[Marcus Young]]></name>
    
  </author>
  <generator uri="https://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi-Automated Bluetooth Audio Player !]]></title>
    <link href="https://marcyoung.us/post/raspberry-pi-automated-bluetooth-audio-player/"/>
    <updated>2013-03-12T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/raspberry-pi-automated-bluetooth-audio-player</id>
    <content type="html"><![CDATA[<!--more-->


<h2>Backstory</h2>

<p>After a long break, I&#8217;ve finally gotten one part of my to-do list for my Raspberry Pi&#8230;.automated bluetooth audio playing!<br/>
As always: there were issues. First, the support for this sucked. I was thankful to get a starting point from <a title="John Hamelink" href="https://github.com/johnhamelink/bluetoothradio" target="_blank">John Hamelink</a>. He wrote a set of sweet scripts that automate a lot of this. However, they were written for Arch Linux, and required a bit of work syntactically to get it working for Debians Wheezy Release. <a href="https://github.com/myoung34/bluetoothradio" target="_blank">My final code is here.</a></p>

<h2>The Nitty Gritty (install steps)</h2>

<p>First, install the normal packages (as seen here) and let the pi user able to control bluetooth devices:</p>

<pre><code>pi@raspberrypi ~ $ sudo apt-get install bluez pulseaudio-module-bluetooth python-gobject python-gobject-2
pi@raspberrypi ~ $ sudo usermod -a -G lp pi
</code></pre>

<p>Next, let&#8217;s make the bluetooth module compatible for audio streaming. Edit <strong>/etc/bluetooth/audio.conf</strong> and add this after [General]:</p>

<pre><code>Enable=Source,Sink,Media,Socket
</code></pre>

<p>Next, we&#8217;ll let pulseaudio do the playback. Edit <strong>/etc/pulse/daemon.conf</strong> and uncomment:</p>

<pre><code>resample-method = trivial ; ADD THIS LINE TO THE FILE!
</code></pre>

<p>We need some additional packages to make it compatible with my scripts. Qdbus allows you to send D-Bus messages to the bluez daemon, git-core is so you can clone my repo, and bluez-tools provides the bluetooth-agent which is one of the daemon pieces.</p>

<pre><code>pi@raspberrypi ~ $ sudo apt-get install bluez-tools qdbus git-core
</code></pre>

<p>Now, we&#8217;re going to gain root, put my code in /root, and make a init.d file you can provide at startup.</p>

<pre><code>pi@raspberrypi ~ $ sudo su -
root@raspberrypi:~# git clone https://github.com/myoung34/bluetoothradio.git --branch Wheezy
root@raspberrypi:~# cd bluetoothradio
root@raspberrypi:~/bluetoothradio# cp bluetooth-server /etc/init.d
root@raspberrypi:~/bluetoothradio# chmod 755 /etc/init.d/bluetooth-server &amp;&amp; chmod +x /etc/init.d/bluetooth-server
root@raspberrypi:~/bluetoothradio# update-rc.d bluetooth-server defaults
root@raspberrypi:~/bluetoothradio# reboot
</code></pre>

<h2>Usage</h2>

<p>After the reboot, you can now pair your device using &#8217;1234&#8242; (unless you modified the bluetoothPin file), and play yo&#8217; music!</p>

<p>If for some reason it&#8217;s not connection, visit <a title="KMonkey711" href="https://kmonkey711.blogspot.com/" target="_blank">KMonkey711&#8242;s tutorial</a> and follow the steps to connect and trust the device, and reboot the pi.</p>

<h2>Acknowledgements</h2>

<p>Thanks to:<br/>
<a title="johnhamelink" href="https://github.com/johnhamelink" target="_blank">johnhamelink</a><br/>
<a title="KMonkey711" href="https://kmonkey711.blogspot.com/" target="_blank">KMonkey711</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KegDuino AKA HomeBrew and Arduinos&#8217; Love Child]]></title>
    <link href="https://marcyoung.us/post/kegduino-aka-homebrew-and-arduinos-love-child/"/>
    <updated>2012-07-25T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/kegduino-aka-homebrew-and-arduinos-love-child</id>
    <content type="html"><![CDATA[<p><!--more-->I finished work on my new site: [www.kegduino.org][1]Â . Go check it out! It&#8217;s a micro-controlled Keg!</p>

<p><div id="attachment_62" class="wp-caption alignnone" style="width: 810px">
  <a href="https://marcyoung.us/wp-content/uploads/2012/07/IMG_0368.jpg"><img class="size-large wp-image-62" title="IMG_0368" src="https://marcyoung.us/wp-content/uploads/2012/07/IMG_0368-1024x682.jpg" alt="Pouring my beer with a touch screen!" width="400" height="310" /></a><p class="wp-caption-text">
    The kegduino in action
  </p>
</div></p>

<p> [1]: <a href="https://www.kegduino.org">https://www.kegduino.org</a></p>
]]></content>
  </entry>
  
</feed>
