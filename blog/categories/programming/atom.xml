<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Marcus Young]]></title>
  <link href="https://marcyoung.us/blog/categories/programming/atom.xml" rel="self"/>
  <link href="https://marcyoung.us/"/>
  <updated>2019-11-21T20:32:09+00:00</updated>
  <id>https://marcyoung.us/</id>
  <author>
    <name><![CDATA[Marcus Young]]></name>
    
  </author>
  <generator uri="https://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi-Automated Bluetooth Audio Player !]]></title>
    <link href="https://marcyoung.us/post/raspberry-pi-automated-bluetooth-audio-player/"/>
    <updated>2013-03-12T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/raspberry-pi-automated-bluetooth-audio-player</id>
    <content type="html"><![CDATA[<!--more-->


<h2>Backstory</h2>

<p>After a long break, I&#8217;ve finally gotten one part of my to-do list for my Raspberry Pi&#8230;.automated bluetooth audio playing!<br/>
As always: there were issues. First, the support for this sucked. I was thankful to get a starting point from <a title="John Hamelink" href="https://github.com/johnhamelink/bluetoothradio" target="_blank">John Hamelink</a>. He wrote a set of sweet scripts that automate a lot of this. However, they were written for Arch Linux, and required a bit of work syntactically to get it working for Debians Wheezy Release. <a href="https://github.com/myoung34/bluetoothradio" target="_blank">My final code is here.</a></p>

<h2>The Nitty Gritty (install steps)</h2>

<p>First, install the normal packages (as seen here) and let the pi user able to control bluetooth devices:</p>

<pre><code>pi@raspberrypi ~ $ sudo apt-get install bluez pulseaudio-module-bluetooth python-gobject python-gobject-2
pi@raspberrypi ~ $ sudo usermod -a -G lp pi
</code></pre>

<p>Next, let&#8217;s make the bluetooth module compatible for audio streaming. Edit <strong>/etc/bluetooth/audio.conf</strong> and add this after [General]:</p>

<pre><code>Enable=Source,Sink,Media,Socket
</code></pre>

<p>Next, we&#8217;ll let pulseaudio do the playback. Edit <strong>/etc/pulse/daemon.conf</strong> and uncomment:</p>

<pre><code>resample-method = trivial ; ADD THIS LINE TO THE FILE!
</code></pre>

<p>We need some additional packages to make it compatible with my scripts. Qdbus allows you to send D-Bus messages to the bluez daemon, git-core is so you can clone my repo, and bluez-tools provides the bluetooth-agent which is one of the daemon pieces.</p>

<pre><code>pi@raspberrypi ~ $ sudo apt-get install bluez-tools qdbus git-core
</code></pre>

<p>Now, we&#8217;re going to gain root, put my code in /root, and make a init.d file you can provide at startup.</p>

<pre><code>pi@raspberrypi ~ $ sudo su -
root@raspberrypi:~# git clone https://github.com/myoung34/bluetoothradio.git --branch Wheezy
root@raspberrypi:~# cd bluetoothradio
root@raspberrypi:~/bluetoothradio# cp bluetooth-server /etc/init.d
root@raspberrypi:~/bluetoothradio# chmod 755 /etc/init.d/bluetooth-server &amp;&amp; chmod +x /etc/init.d/bluetooth-server
root@raspberrypi:~/bluetoothradio# update-rc.d bluetooth-server defaults
root@raspberrypi:~/bluetoothradio# reboot
</code></pre>

<h2>Usage</h2>

<p>After the reboot, you can now pair your device using &#8217;1234&#8242; (unless you modified the bluetoothPin file), and play yo&#8217; music!</p>

<p>If for some reason it&#8217;s not connection, visit <a title="KMonkey711" href="https://kmonkey711.blogspot.com/" target="_blank">KMonkey711&#8242;s tutorial</a> and follow the steps to connect and trust the device, and reboot the pi.</p>

<h2>Acknowledgements</h2>

<p>Thanks to:<br/>
<a title="johnhamelink" href="https://github.com/johnhamelink" target="_blank">johnhamelink</a><br/>
<a title="KMonkey711" href="https://kmonkey711.blogspot.com/" target="_blank">KMonkey711</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MarkLogic Collections &#8211; Performance Issues And Why You Should Denormalize!]]></title>
    <link href="https://marcyoung.us/post/marklogic-collections-performance-issues-and-why-you-should-denormalize/"/>
    <updated>2012-09-25T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/marklogic-collections-performance-issues-and-why-you-should-denormalize</id>
    <content type="html"><![CDATA[<!--more-->


<h2>Background</h2>

<p>Recently I&#8217;ve been on a new team at my work doing MarkLogic work. In a nutshell we&#8217;ve been developing a new HealthCare quality application from the ground up.  This would be our second application, but we learned enough from the first to make our priority creating a robust and scalable RESTful interface for document CRUD. With this we developed a middle tier that is almost completely configuration driven, meaning any new apps would be able to utilize this and not have to re-invent the wheel to get CRUD/Search working out-of-the-box.</p>

<h2>The Approach To A Problem Using Lists</h2>

<p>The application is revolved around patient CCD&#8217;s (XML representing all of a patients history per retrieval). MarkLogic is ideal for this since it&#8217;s built on XQuery, a functional language revolved around XML. Let me paint you a picture of what led us to collection issues. Say you want as a doctor, to search &#8220;gender:M&#8221; on a database, and just keep tacking on until you get to what you want to find (end result maybe: &#8220;gender:M AND dob GT 01-10-1987 AND problem:Asthma&#8221;). Now as a doctor, I found X patients and want to save that as a NON changing list&#8230;meaning that if I search any time after this, I&#8217;ll still get those X patients, and no more that match that criteria since.</p>

<p>We implemented this using MarkLogic collections. Collections are handy in that you can take some documents, put them in a collection, and say:</p>

<pre><code>for $i in fn:collection('/doctors/marc/1')
  return $i
</code></pre>

<p>That means whatever is in the collection &#8216;/doctors/marc/1&#8242; will always be there. Cool, that works great. So we implemented this &#8220;static list&#8221; as this:</p>

<ol>
<li>Take the query and execute it</li>
<li>For each document in the result set, add them to a unique list: /lists/{unique id}</li>
<li>change the query to list:{unique id} and add a new xml node <owner>{id of user}</owner></li>
</ol>


<p>The great thing about this, is you can have a collection constraint in our patients so you can just execute &#8220;list:{unique id}&#8221; and it will return all documents in that list. Awesome! It worked Great! Also note, yes we handled updating the list by re-executing it, and adding the new patients to that list. Deleting a list is also possible.</p>

<h2>The Problem With MarkLogic Collections</h2>

<p>As I said, this solution worked <strong>fantastically</strong>&#8230;at first. It worked until we hit 1500 fairly large patient documents. The performance crawled to a stop. <strong>The problem with collections is that the collection data is stored <span style="color: #ff0000;">internally. </span></strong><span style="color: #ff0000;"><span style="color: #000000;">That means that if you decide to make a list for &#8220;gender:M&#8221;, you&#8217;re modifying and locking potentially half the documents in the database. For us, that meant a 9+ minute list creation. Not acceptable. You can try to speed this up, sure, by creating limits on how many documents you can modify, perhaps other ways involving spawning it in threads or in the background, but that still creates server overhead and gets rid of transaction safety.</span></span></p>

<h2>Denormalize Your Database/The Solution</h2>

<p>The greatest thing about a NoSQL database is that it can be denormalized. This may make some people cringe, why afterall would you want to duplicate data? If used correctly, it works great. For this specifically, it means that instead of modifying all documents in the database by adding/removing them from collections, is to use a separate file, stored as &#8216;/lists/{user}/{unique id}&#8217; that contains links (uri&#8217;s) to the documents. This is fine, especially for this application, since patient records are never deleted. I&#8217;ve shown an example further below on how to see it in action!</p>

<h2>The Code/TL;DR &#8211; Code or GTFO</h2>

<p>The first thing you can do if you want to follow along is put a crap ton of delicious bacon documents into your database. You should copy/paste this into the QConsole and hit RUN! (it might take a few &#8211; it inserts 1200 documents&#8230;if it times out, insert 300 documents 4 times instead).<br/>
<a href="https://gist.github.com/3785105" target=_blank>Click here for the code&#8230;too large to paste and the code isn&#8217;t too important</a><br/>
Now for the bad code. This will search for <beef>*tips*</beef> effectively. Any documents that match that, it will put it into a collection called &#8216;/marc/favorites&#8217;.</p>

<p>Then it will decide my favorites should be <pork>*ham*</pork>, so it will go through the collection, remove the originals, and add my new favorites. The important thing is to look at the number of documents affected and how long it takes! Ridiculous!</p>

<pre><code>let $docs :=  
  fn:distinct-values(
    for $i in cts:search(//beef,cts:word-query("tip"))
      return fn:base-uri($i)
  )
return
  for $i in $docs return
    xdmp:document-add-collections(
      $i,
      '/marc/favorites'
    )
(: 781 documents affected - Profile 2105 Expressions PT57.822894S :)

let $remove-from-collections :=
  for $i in fn:collection('/marc/favorites')
    return xdmp:document-remove-collections(fn:base-uri($i),'/beef/tips')

let $docs := 
  fn:distinct-values(
    for $i in cts:search(//pork,cts:word-query("ham"))
      return fn:base-uri($i)
  )

return
  for $i in $docs return
    xdmp:document-add-collections(
      $i,
      '/marc/favorites'
    )

(: 1051 documents affected - Profile 4245 Expressions PT48.439176S  :)
</code></pre>

<p>So what&#8217;s the best way to do it? Create a new document of URI&#8217;s to the documents, and store that! Don&#8217;t believe me? Look at the performance without indexes!</p>

<pre><code>let $docs := 
  fn:distinct-values(
    for $i in cts:search(//beef,cts:word-query("tip")) return
      fn:base-uri($i)
  )

let $favorites :=
  &lt;favorites&gt;{
    for $i in $docs return
      &lt;doc&gt;{$i}&lt;/doc&gt;
  }&lt;/favorites&gt;

return
  xdmp:document-insert(
    '/marc/favorites',
    $favorites
  )
(: 1 document affected - Profile 2643 Expressions PT0.326612S :)

let $docs := 
  fn:distinct-values(
    for $i in cts:search(//pork,cts:word-query("ham")) return
      fn:base-uri($i)
  )

let $favorites :=
  &lt;favorites&gt;{
    for $i in $docs return
      &lt;doc&gt;{$i}&lt;/doc&gt;
  }&lt;/favorites&gt;

return xdmp:node-replace(fn:doc('/marc/favorites')/favorites,$favorites)
(: 1 document affected - Profile 2144 Expressions PT0.67532S :)
</code></pre>

<p>And to improve your search, you could use something like:</p>

<pre><code>cts:search(/,
  cts:document-query(
    fn:doc('/marc/favorites')/favorites//doc/text()
  )
)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KegDuino AKA HomeBrew and Arduinos&#8217; Love Child]]></title>
    <link href="https://marcyoung.us/post/kegduino-aka-homebrew-and-arduinos-love-child/"/>
    <updated>2012-07-25T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/kegduino-aka-homebrew-and-arduinos-love-child</id>
    <content type="html"><![CDATA[<p><!--more-->I finished work on my new site: [www.kegduino.org][1] . Go check it out! It&#8217;s a micro-controlled Keg!</p>

<p><div id="attachment_62" class="wp-caption alignnone" style="width: 810px">
  <a href="https://marcyoung.us/wp-content/uploads/2012/07/IMG_0368.jpg"><img class="size-large wp-image-62" title="IMG_0368" src="https://marcyoung.us/wp-content/uploads/2012/07/IMG_0368-1024x682.jpg" alt="Pouring my beer with a touch screen!" width="400" height="310" /></a><p class="wp-caption-text">
    The kegduino in action
  </p>
</div></p>

<p> [1]: <a href="https://www.kegduino.org">https://www.kegduino.org</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating an MVC Blog with Node.js and MongoDB]]></title>
    <link href="https://marcyoung.us/post/creating-an-mvc-blog-with-node-js-and-mongodb/"/>
    <updated>2012-04-25T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/creating-an-mvc-blog-with-node-js-and-mongodb</id>
    <content type="html"><![CDATA[<p>This is going to be my first big tutorial. This is a simple tutorial to show how to build the worlds most basic blog with comment system in Node.js with Express for the MVC Routing, MongoDB as the storage engine, and Jade as the html shorthand. <!--more--></p>

<p>I&#8217;m going to assume you know how to install the base packages for Node.js, npm (node package manager), and mongodb. First, let&#8217;s set up the database to hold some articles. The mongo collection will be a basic object with an id, article_title, and article_body:</p>

<pre><code>[myoung@F00 tutorial]$ mongo tutorial
MongoDB shell version: 2.0.2
connecting to: tutorial
&gt; db.articles.remove()
&gt; db.articles.insert({"article_title": "Article 1","article_body": "This would be the data from &lt;strong&gt;Article 1&lt;/strong&gt;","article_date": new Date()});
&gt; db.articles.insert({"article_title": "Article 2","article_body": "This would be the data from &lt;strong&gt;Article 2&lt;/strong&gt;
I think I'll put some more data in this one =)","article_date": new Date()});
</code></pre>

<p>Now, let&#8217;s get the modules installed via npm.</p>

<pre><code>[myoung@F00 ~]$ mkdir tutorial
[myoung@F00 ~]$ cd tutorial
[myoung@F00 tutorial]$ npm install connect # the middleware module for the model
[myoung@F00 tutorial]$ npm install express # the module to set up 'route' or controllers
[myoung@F00 tutorial]$ npm install jade # the module to set up shorthand html, or views
</code></pre>

<p>Next, the actual node app is needed. It&#8217;s a basic setup that loads the installed modules, listens on port 9095, and responds to any GET on &#8216;/&#8217; with &#8216;Hello from node.js!&#8217;</p>

<pre><code>var express = require('express')
var app = module.exports = express.createServer();

// Configuration
app.configure(function(){
  app.set('views', __dirname + '/views');
  app.set('view engine', 'jade');
  app.use(express.static(__dirname + '/public'));
  app.set('view options', { layout: false });
  app.use(app.router);
});

app.configure('development', function(){
  app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));
});

app.configure('production', function(){
  app.use(express.errorHandler());
});

// Routes
app.get('/',function(req,res) {
  res.writeHead(200);
  res.end("Hello from node.js!");
});

app.listen(9095);
</code></pre>

<p>If you run this, you&#8217;ll see that we have the worlds most basic server, let&#8217;s make it a little more advanced. This next version will set up a route that sends GET&#8217;s on &#8216;/&#8217; to &#8216;views/index.jade&#8217;</p>

<pre><code>app.get('/',function(req,res) {
  res.render('index', {});
});
</code></pre>

<pre><code>-//new file: views/index.jade
!!!
html
  head
    title MVC Webpage
  body
    | This is the main layout
</code></pre>

<p>This is all fine and dandy, but it&#8217;s pretty basic. If we want to make any real web app, we have to minimize code reuse. The great thing about jade is its ability to extend other files.So let&#8217;s make a base layout.jade that holds all the html(in your final blog you&#8217;d want it to load the css, and actually set up the page). Extending in Jade works by creating a file, styling it with css, loading whatever jQuery modules or anything you&#8217;d want to display, and setting &#8216;blocks&#8217;. Blocks will be overridden by child pages, so you&#8217;d want it to be where your content is, or data that will change from view to view. A side note, which you&#8217;ll notice in later snippets, is that you can put inline JavaScript in the jade file, and it can determine what is rendered</p>

<pre><code>-//file is layout.jade...the 'parent' view
!!!
html
  head
    title MVC Webpage
  body
    block content
      | This is the main layout

-//index.jade
extends layout
-//now index is a 'child' of layout
block content
  | This was overridden by the index =)
</code></pre>

<p>Now that we&#8217;ve got a successful, notably basic, MVC framework set, let&#8217;s make it Mongo compatible so we can display some stuff. I tested a few Mongo modules, but enjoyed this one the most. It plays more like the CLI and has minimal overhead</p>

<pre><code>[myoung@F00 tutorial]$ npm install mongodb
</code></pre>

<p>Now the app.js has to be modified to make the connection, and on response to &#8216;/&#8217;, grab the collection as an array, and pass it to the page as a variable.The index.jade also has to be modified to check for the array passed in, and loop through it displaying the title and body</p>

<pre><code>var mongodb = require('mongodb')
  , Db = mongodb.Db
  , Server = mongodb.Server
  , db = new Db('tutorial', new Server('localhost', 27017, {auto_reconnect: true, native_parser: true}), {})
var express = require('express')
var app = module.exports = express.createServer();

// Configuration
app.configure(function(){
  app.set('views', __dirname + '/views');
  app.set('view engine', 'jade');
  app.use(express.static(__dirname + '/public'));
  app.set('view options', { layout: false });
  app.use(app.router);
});

app.configure('development', function(){
  app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));
});

app.configure('production', function(){
  app.use(express.errorHandler());
});

// Routes
//this is the route for /, or the root
app.get('/',function(req,res) {
  var data_collection = function(err,collection) {
    //find all articles in the collection, and sort by article_date...
    //pass it in as db_results
    collection.find().sort({article_date: -1}).toArray(function(err,db_results) {
      console.log(db_results);//just to show some output on the server, log the entire obj
      res.render('index', {//render the index
        blog_content: db_results //pass in the results to the page as a local blog_content
      });
    });
  };

  db.open(function(err, p_client) {
    db.collection('articles', data_collection);//this is the name of the collection...ie db.articles.find()
  });

});

app.listen(9095);
</code></pre>

<pre><code>-//index.jade
extends layout
block content
  -if(locals.blog_content) {
    -for(var i=0; i&lt;blog_content.length; i++) {
      h3=blog_content[i].article_title
      p !{blog_content[i].article_body}
    -}
  -}
</code></pre>

<p>At this point the page will loop through the blog articles in the database and display them all on the same page. To make it a little nicer, let&#8217;s do some creative modifications.Index.jade will take the length of the array, and if it&#8217;s 1, display that article with a blank &#8216;Comment Section&#8217;. If it&#8217;s more than 1, let&#8217;s loop through all of them, and make the title link to the article itself.For this to really do anything, we need the link to go to a distinct article, so App.js will have to be mofied to allow a direct link. In this case, We&#8217;re going to make it go to &#8216;/index/mongos_id_of_article&#8217;.You&#8217;ll notice a little work to get the id from the link. Node.js sees &#8216;/index/mongos_id_of_article&#8217; as &#8216;/index/:article_id&#8217;, which is translated to &#8216;request.paracms.article_id&#8217;. The last part of this is the coersion from this id to a BSON id for a Mongo lookup (BSON.ObjectId).</p>

<pre><code>-//index.jade
extends layout
block content
  -if(locals.blog_content) {
    -if(blog_content.length == 1) {
      h3=blog_content[0].article_title
      p !{blog_content[0].article_body}
      hr(width="100%")
      | Comment Section
    -} else {
      -for(var i=0; i&lt;blog_content.length; i++) {
        h3
          a(href='/article/'+blog_content[i]._id)=blog_content[i].article_title
        p !{blog_content[i].article_body}
      -}
    -}
  -}
</code></pre>

<pre><code>//this is the route for /article/somenumber .. somenumber is available in the request
app.get('/article/:article_id',function(req,res) {
  var data_collection = function(err,collection) {
    var BSON = mongodb.BSONPure;//load the BSON object
    var o_id = new BSON.ObjectID(req.params.article_id);//this is now a searchable
                                                        //id for collection
    collection.find({_id: o_id}).toArray(function(err,db_results) {
      res.render('index', {//render the index
        blog_content: db_results //pass the db_results to a local variable in index
                                 //called blog_content
      });
    });
  };
  db.open(function(err, p_client) {
    db.collection('articles', data_collection);//this is the name of the collection...ie db.articles.find()
  });
});
</code></pre>

<p>If you run it at this point, you&#8217;ll be able to hit the index, see links to articles and go directly to them with a blank comment section. Let&#8217;s make that comment section. To prep for this, we&#8217;ll need a form to POST to /comment</p>

<pre><code>-//index.jade
extends layout
block content
  -if(locals.blog_content) {
    -if(blog_content.length == 1) {
      h3=blog_content[0].article_title
      p !{blog_content[0].article_body}
      hr(width="100%")
      | Comment Section
      form(method='post',action='/comment')
        label Name:
          input(type='text',name='postername')
        label Comment:
          textarea(type='text',name='postercomment')
        input(type='hidden',name='current_id',value=blog_content[0]._id)
        input(type='submit',value='submit')
    -} else {
      -for(var i=0; i&lt;blog_content.length; i++) {
        h3
          a(href='/article/'+blog_content[i]._id)=blog_content[i].article_title
        p !{blog_content[i].article_body}
      -}
    -}
  -}
</code></pre>

<p>If you run this now, you&#8217;ll get an error. That&#8217;s because we don&#8217;t have a route for a POST to /comment, so let&#8217;s set that up.</p>

<pre><code>app.post('/comment',function(req,res) {                                                                         
  var bodyarr = [];                                                                                             
  req.on('data', function(chunk){                                                                               
    bodyarr.push(chunk);                                                                                        
  });                                                                                                           
  req.on('end', function(){
    /* This is hackish but is to only show proof of concept                                                     
       This will split the bodyarr that we've created                                                           
          ex: id=4&amp;body=what%20up&amp;something=somethingelse                                                       
    */                                                                                                          
    var values = bodyarr.join('').split('&amp;');                                                                   
    var BSON = mongodb.BSONPure;//this will load the mongo BSON                                                 
    var article_id = new BSON.ObjectID(values[2].split('=')[1]);//this was the argument for ID                  

    //create a 'comment' object that contains the poster and comment                                            
    var comment_object = {                                                                                      
      'poster': values[].split('=')[1],
      'comment': values[1].split('=')[1]
    };                                                                                                          
    var data_collection = function(err,collection) {                                                            
      //call update on the collection, find by _id, and push the comment object onto it                         
      collection.update({_id: article_id},{$push : { comments : comment_object }});
      res.redirect('back');
    };
    db.open(function(err, p_client) {                                                                           
      db.collection('articles', data_collection);//this is the name of the collection...ie db.articles.find()   
    });
  });
});
</code></pre>

<p>It got a little complicated in that snippet, so here&#8217;s a slight breakdown. The post takes the data as a stream (req.on) and pushes it to an array. On the end of the stream we&#8217;ll break up the values,and push it onto the mongo collection for that id (we know the id from the hidden form element). The push is an Object that&#8217;s a &#8216;poster&#8217; and a &#8216;comment&#8217;. When this is finished, we&#8217;ll redirect backwards. This is dandy, but you&#8217;ll notice we haven&#8217;t set up the view to display comments, only store. The newest code has the addition of a loop. If comments exists(if the collection even has a comment array), we will loop through it and display it. For handiness, you&#8217;ll also notice the addition of a link to &#8216;/&#8217;</p>

<pre><code>-//index.jade 
extends layout
-//overwrite the content block with new data
block content 
  -if(locals.blog_content) {//make sure it has a blog_content (to be safe and not
                            //cause an Express crash
    -if(blog_content.length == 1) {//only 1 article, means they clicked on
                                   //an article link to view it....
                                   //so render it with the comment form data
      h3=blog_content[0].article_title
      p !{blog_content[0].article_body}
      hr(width="100%")
      | Comment Section
      form(method='post',action='/comment')
        label Name:
          input(type='text',name='postername')
        label Comment:
          textarea(type='text',name='postercomment')
        input(type='hidden',name='current_id',value=blog_content[0]._id)
        input(type='submit',value='submit')
      hr(width="100%")
      -var comments = blog_content[0].comments;
      -if(comments &amp;&amp; comments != undefined) {
        -for(var i=0; i&lt;comments.length;i++) {
          h3=comments[i].poster
          | !{comments[i].comment}
        -}
      -}
      hr(width="100%")
      a(href='/') Home
    -} else {//more than one article, meaning they're at the 'blog root',
             //looking at all the links
      -for(var i=0; i&lt;blog_content.length; i++) {//loop through blog array
        h3
          a(href='/article/'+blog_content[i]._id)=blog_content[i].article_title
        p !{blog_content[i].article_body}
      -}
    -}
  -}
</code></pre>

<p>This last snippet is a clean up of the comment post. Since it&#8217;s parsed as parameters, spaces are +&#8217;s. This could be fixed by modifying the way I handle the post as a stream, but for demonstrations sake, let&#8217;s just do a regex replace of /+/ to spaces.</p>

<pre><code>app.post('/comment',function(req,res) {
  var bodyarr = [];
  req.on('data', function(chunk){
    bodyarr.push(chunk);
  });
  req.on('end', function(){//the data has finished coming in
    /* This is hackish but is to only show proof of concept
       This will split the bodyarr that we've created
          ex: id=4&amp;body=what%20up&amp;something=somethingelse
    */
    var values = bodyarr.join('').split('&amp;');
    var BSON = mongodb.BSONPure;//this will load the mongo BSON
    var article_id = new BSON.ObjectID(values[2].split('=')[1]);//this was the argument for ID

    //create a 'comment' object that contains the poster and comment
    var comment_object = {
      'poster': values[].split('=')[1].replace(/+/g,' '),//had +'s for spaces, so replace them
      'comment': values[1].split('=')[1].replace(/+/g,' ')
    };

    var data_collection = function(err,collection) {
      //call update on the collection, find by _id, and push the comment object onto it
      collection.update({_id: article_id},{$push : { comments : comment_object }});
      res.redirect('back');//send the user to the previous page
    };
    db.open(function(err, p_client) {
      db.collection('articles', data_collection);//this is the name of the collection...ie db.articles.find()
    });
  });
});
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HL7 And Node.js]]></title>
    <link href="https://marcyoung.us/post/hl7-and-node-js/"/>
    <updated>2012-03-12T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/hl7-and-node-js</id>
    <content type="html"><![CDATA[<p>This weekend I decided to play around with Node.js and see what was possible in terms of HL7 messaging.I&#8217;ve never touched Node.js, but I&#8217;ve been becoming quite fond of Javavscript, so I decided to pump out some custom code. It was surprisingly nice.</p>

<!--more-->


<p>I originally had the code shown here, but it speaks for itself at <a href="https://github.com/myoung34/Node.hl7">My Repo</a></p>
]]></content>
  </entry>
  
</feed>
