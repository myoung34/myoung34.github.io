<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hardware | Marcus Young]]></title>
  <link href="https://marcyoung.us/blog/categories/hardware/atom.xml" rel="self"/>
  <link href="https://marcyoung.us/"/>
  <updated>2020-06-08T14:53:03+00:00</updated>
  <id>https://marcyoung.us/</id>
  <author>
    <name><![CDATA[Marcus Young]]></name>
    
  </author>
  <generator uri="https://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Barcaderator - Building An Arcade Kegerator]]></title>
    <link href="https://marcyoung.us/post/barcade"/>
    <updated>2019-11-20T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/Barcaderator</id>
    <content type="html"><![CDATA[<p>Introducing a modular arcade kegerator  <!-- more --></p>

<h3>The Backstory</h3>

<p>I recenly got into doing random stuff with arcades.
In October 2018 I got ahold of a completely ripped apart San Fransisco Rush cabinet.
I redid some of the wood, built a computer into it, reversed all the controls into a teensy and made it play Rocket League.
My tattoo shop is currently painting it (build log to come when I have it back).</p>

<p>In trade, I&rsquo;m fixing their arcade machine.</p>

<p>So now apparently I like real arcade machines <a href="https://marcyoung.us/post/mame-cabinet/">and not my now-broken table top</a>.</p>

<p>I also brew beer. Why not combine the two?!</p>

<p>So I introduce to you:</p>

<p><img src="/images/barcade1.jpg">
<img src="/images/barcade2.jpg">
<img src="/images/barcade3.jpg">
<img src="/images/barcade2.gif">
<img src="/images/marquee.gif"></p>

<h3>The Hardware</h3>

<ul>
<li>The Marquee is a custom &ldquo;vintage style neon light&rdquo; from a company on alibaba.</li>
<li>The Computer is a <a href="https://www.dfrobot.com/product-1727.html?search=lattepanda%20alpha&amp;description=true">lattepanda alpha</a></li>
<li>The LED Buttons are <a href="https://groovygamegear.com/webstore/index.php?main_page=product_info&amp;products_id=408">spectra eclipse</a></li>
<li>The LED controller is an <a href="https://www.arcaderenovations.com/ultimarc-pacled64.html">Ultimarc pacled64</a></li>
<li>The Cabinet was custom cut on a CNC</li>
<li>The &ldquo;split&rdquo; frame is based on <a href="https://cdn11.bigcommerce.com/s-ecrovlce13/images/stencil/500x659/products/10801/13177/pygcjgwqewky6od7qomr__54105.1563214651.png?c=2">this style of aluminum tongue/receiver</a> from TCH hardware</li>
<li>The &ldquo;latches&rdquo; and the handles for the split top are from TCH Hardware</li>
</ul>


<h3>The Software</h3>

<p>The lattepanda runs Ubuntu with MAME. I originally chose windows, but LEDBlinky is <em>awful</em>. Just awful.
So instead I&rsquo;ve been working with <a href="https://sourceforge.net/p/ledspicer/wiki/Home/">LEDSpicer by Patricio Rossi</a>. The software worked nearly out of the box and he&rsquo;s been super helpful for getting me up and running.</p>

<h3>Build Pics</h3>

<p><img src="/images/barcade/build2.jpg">
<img src="/images/barcade/build3.jpg">
<img src="/images/barcade/build4.jpg">
<img src="/images/barcade/build5.jpg">
<img src="/images/barcade/build6.jpg">
<img src="/images/barcade/build7.jpg">
<img src="/images/barcade/build8.jpg">
<img src="/images/barcade/build9.jpg">
<img src="/images/barcade/build10.jpg">
<img src="/images/barcade/build11.jpg">
<img src="/images/barcade/build12.jpg">
<img src="/images/barcade/build13.jpg">
<img src="/images/barcade/build14.jpg">
<img src="/images/barcade/build15.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacking "Aviary" Scooters]]></title>
    <link href="https://marcyoung.us/post/scooters"/>
    <updated>2018-12-22T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/scooters</id>
    <content type="html"><![CDATA[<p>Hacking &ldquo;aviary&rdquo; scooters for fun.  <!-- more --></p>

<p><img src="/images/scooters.jpg" title="scooters" ></p>

<p>I recently came across some neglected and forgotten &ldquo;Aviary&rdquo; scooters and wanted to see what could be done.</p>

<h2>Segway ES2/4</h2>

<p><img src="/images/es4.jpg" title="es4" ></p>

<p>This was the easiest hack I&rsquo;ve ever done. Remove the top panel with security bits, and replace the board with one from ebay similar <a href="https://i.ebayimg.com/images/g/EUUAAOSwH2Vb7453/s-l300.jpg">to this</a></p>

<p>Plug it in and go. Done.
Cost: ~$40</p>

<h2>Xiaomi Mijia M365</h2>

<p>This one was much more fun.</p>

<p><img src="/images/m365_1.jpg" title="m365" >
<img src="/images/m365_2.jpg" title="m365" >
<img src="/images/m365_3.jpg" title="m365" >
<img src="/images/m365_4.jpg" title="m365" >
<img src="/images/m365_5.png" title="m365" >
<img src="/images/m365_6.jpg" title="m365" ></p>

<h3>Firmware</h3>

<p>This one was easy. Apparently the Xiaomi Mijia m365 is very commonly hacked already. They&rsquo;re extremely popular overseas, and people have already dedicated their time to reverse engineering the firmware. So much so that you can just use a <a href="https://m365.botox.bz/">webpage to change the settings and download a binary file to upload</a>.</p>

<p>Just download your bin file there, upload <a href="https://m365.botox.bz/static/com.m365downgrade-v7_PATCHED.apk?q=1531494897">with the android app</a> connect to your scooter and go.</p>

<h3>Display</h3>

<p>This one was also slightly trivial.</p>

<p>First thing I did was 3D printed one of <a href="https://www.thingiverse.com/thing:3064321">these bad boys</a>.</p>

<p>Then I ordered a <a href="https://www.amazon.com/Dorhea-Display-3-3V-5V-Arduino-Raspberry/dp/B07FK8GB8T">0.96&#8221; screen (4 pin i2C <em>not</em> 7 pin SPI)</a></p>

<p>Next you&rsquo;ll need an <a href="https://www.amazon.com/HiLetgo-Atmega32U4-Bootloadered-Development-Microcontroller/dp/B01MTU9GOB">arduino micro pro</a> and an <a href="https://www.amazon.com/HiLetgo-FT232RL-Converter-Adapter-Breakout/dp/B00IJXZQ7C">FTD1232 flasher</a> as well as a <a href="https://www.amazon.com/100-Pieces-1N4148-Switching-High-Speed/dp/B079KJ91JZ">diode</a>.</p>

<p>Using <a href="https://github.com/augisbud/m365_dashboard">this code</a> flash the arduino, wire it according to his guides below.</p>

<p>Note: I modified the <a href="https://github.com/augisbud/m365_dashboard/blob/master/M365/language.h">locale files with some maths</a> along with other tweaks I&rsquo;m not publishing to do miles instead of kilometers, change the intro logo and colors.</p>

<p>Cover it using any m365 button cover via ebay.</p>

<p>Done.</p>

<p><img src="/images/m365_7.jpg" title="m365" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slack Is Not Your Bash Prompt]]></title>
    <link href="https://marcyoung.us/post/slack-not-bash"/>
    <updated>2018-11-26T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/Slack-Bash</id>
    <content type="html"><![CDATA[<p>A video of my first and likely last conference talk (lightning talk) about chatops  <!-- more --></p>

<p><a href="https://www.youtube.com/watch?v=Z6LrwUchRaE&amp;list=PLte_zIBj3fx6gNyC_8sleIFAYOvQhXemC&amp;index=7">Video here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hulk-Smash Production]]></title>
    <link href="https://marcyoung.us/post/hulk-smash"/>
    <updated>2018-05-20T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/Hulk-Smash-Prod</id>
    <content type="html"><![CDATA[<p>I one-upped my own bad idea with more badness. Don&rsquo;t do this.  <!-- more --></p>

<p>I, uh. Yeah.</p>

<p>I assume you <a href="/post/deploy-production-button">read my previous post about my physical deploy button</a>. Well: I one-upped it.</p>

<p>Let me explain. Nah let&rsquo;s cut to it. I wanted to play with <a href="https://aws.amazon.com/iot-core/">AWS IoT</a> and I did so shamelessly with much architecture.</p>

<h3>The architecture</h3>

<p>I had a spare Raspberry Pi Zero W with a camera. So I did what any reasonable person would do. Used it with no end-goal.</p>

<p>I hooked it up to AWS IoT and made it <a href="https://docs.aws.amazon.com/iot/latest/developerguide/using-device-shadows.html">listen to the shadow delta MQTT queue</a></p>

<p>Basically whenever it saw a change to the shadow it would:</p>

<ol>
<li>Spin a <a href="https://www.amazon.com/Stepper-Bipolar-4-lead-Connector-Printer/dp/B00PNEQKC0">stepper motor</a> that landed a <a href="https://www.amazon.com/Marvel-Avengers-Gamma-Grip-Fists/dp/B072QMZTZ4">hulk hand</a> on my deploy production button.</li>
<li>Thanks to py3 <a href="https://docs.python.org/3/library/threading.html">threads</a> it would also start the rasp pi camera to watch the hulk smash and send it to <a href="https://www.giphy.com">giphy</a>.</li>
<li>After the gif is done uploading it would send a gif of the hulk smash back to the user in slack.</li>
</ol>


<h3>The finale</h3>

<p>Without further ado I give you: Hulk Smash Production.</p>

<p><img src="/images/hulksmash.png" title="hulksmash" ></p>

<p>The <a href="https://giphy.com/embed/xuW89v9kQXMeQ">initial gif</a></p>

<p>And the final gif (yes the hulk hand is duct taped to a bamboo skewer to a stepper motor):</p>

<p><img src="/images/hulksmash.gif" title="hulksmash" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Physical Deploy-Production Button]]></title>
    <link href="https://marcyoung.us/post/deploy-production-button"/>
    <updated>2018-05-19T00:00:00+00:00</updated>
    <id>https://marcyoung.us/post/deploy-production-button</id>
    <content type="html"><![CDATA[<p>I made a physical button to deploy production and regret nothing.  <!-- more --></p>

<p>Over the last few weeks I&rsquo;ve been looking for a project.</p>

<p>I currently work for a python shop and have really taken a liking to it. Simultaneously, I keep seeing new hardware <a href="https://micropython.org">supporting micropython</a>. I&rsquo;m not against the C&#8217;ish language that the arduino type stuff pushes for, but it&rsquo;s nice to get the best of both worlds: an abstracted language with nice syntax and the ability to do dumb stuff with voltage. So: I did just that.</p>

<h3>The Controller</h3>

<p>I&rsquo;ve really wanted to play with the ESP8266 after seeing some cool projects cross over my feeds. I decided also to kill two birds with one stone and try the Huzzah board <a href="https://www.adafruit.com/product/2821">from adafruit</a> that includes onboard wifi because I hate money. The board itself was fantastic out of the box.</p>

<h3>The Learning Curve</h3>

<p>Without doing any whatsoever much research my brain really thought that micropython was going to be a &ldquo;drop in replacement&rdquo; for the UX of programming a board in the arduino IDE. It&rsquo;s not. This is actually my biggest complaint about micropython. The code itself was very very very straightforward. Write a <code>main.py</code> that does your stuff, and profit. You can load libraries that support micropython, etc.</p>

<p>Getting there? Meh.</p>

<p>First: you have to flash your esp with <a href="https://micropython.org/download">the micropython firmware</a>.</p>

<p>Next: you have to get your code onto the board. The feedback loop for this is the annoying part. The first time you flash the firmware you have to <a href="https://learn.adafruit.com/micropython-basics-esp8266-webrepl/access-webrepl">enable WebREPL</a>. It&rsquo;s a one-time cost but it&rsquo;s smelly. This enables a wifi broadcast from the board that you can then access from webrepl with a password.</p>

<p>If you make it past the previous step you can make <code>main.py</code> join your wireless network (note: 5ghz is not supported) with something like:</p>

<pre><code>import network

sta_if = network.WLAN(network.STA_IF)

def do_connect():
    if not sta_if.isconnected():
        print('connecting to network...')
        sta_if.active(True)
        sta_if.connect('The LAN Before Time', 'hunter2')
        while not sta_if.isconnected():
            print('waiting to connect...')
            sleep(5)
            pass

print('connecting...')
do_connect()
print('network config:', sta_if.ifconfig())
</code></pre>

<p>Now that it&rsquo;s on the network you can use webrepl to the local address of the huzzah. But it still sucks compared to the typical UX of: select board, click compile.</p>

<h3>What You Came To See</h3>

<p>If you&rsquo;re still reading I&rsquo;m sure you want to see what I did. Basically I took 4 mechanical keyboard switches (I have a lot OK?!), wired them to the huzzah, and made it send a slack command to our internal slack bot to <em>force</em> deploy production (ignore all locks, send a message to yours truly).</p>

<pre><code>while True:
    buttons = [
        machine.Pin(4,  machine.Pin.IN, machine.Pin.PULL_UP),
        machine.Pin(5,  machine.Pin.IN, machine.Pin.PULL_UP),
        machine.Pin(2,  machine.Pin.IN, machine.Pin.PULL_UP),
        machine.Pin(15, machine.Pin.IN, machine.Pin.PULL_UP),
    ]

    _sum = 0
    for button in buttons:
        _sum += button.value()
    if (_sum == 0):
        print('generating request')
        print(urequests.post(webhook_url, json={'text': ":alert: DEPLOY BUTTON PRESSED. KLAXON: ACTIVATED :alert:"}, headers={'Content-Type': 'application/json'}).status_code)
        print(urequests.post(webhook_url, json={'text': "!deploy prod master -f"}, headers={'Content-Type': 'application/json'}).status_code)
</code></pre>

<p><img src="/images/huzzah1.jpg" title="huzzah1" >
<img src="/images/huzzah2.png" title="huzzah2" ></p>

<p>It works and it&rsquo;s pretty empowering to smash. We deployed to production a record number of times that day.</p>
]]></content>
  </entry>
  
</feed>
