<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cloud | Marcus Young]]></title>
  <link href="http://marcyoung.us/blog/categories/cloud/atom.xml" rel="self"/>
  <link href="http://marcyoung.us/"/>
  <updated>2017-06-21T12:22:27-05:00</updated>
  <id>http://marcyoung.us/</id>
  <author>
    <name><![CDATA[Marcus Young]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Up and running with Bless and enforced MFA - Part 2]]></title>
    <link href="http://marcyoung.us/post/bless-part2"/>
    <updated>2017-06-21T00:00:00-05:00</updated>
    <id>http://marcyoung.us/post/bless-part2</id>
    <content type="html"><![CDATA[<p>Part 2 of deploying Bless will focus on enforcing MFA and using Lyft&rsquo;s <a href="https://github.com/lyft/python-blessclient">client</a>. <!-- more --></p>

<p>The problem at this point is that anyone in the ops group can bounce without MFA enforced. We can set up the lyft client, which enforces MFA, but if we dont make other changes, there&rsquo;s no <em>enforcement</em> of MFA. ie you can still call the netflix client and bounce right in.</p>

<p>The other issue is that Netflix&rsquo;s bless holds true the idea of a bastion host. In-house, we have IPSec tunnels from our VPC&rsquo;s to our internal network, so I dont need to bounce through a bastion. So I want anyone to be able to bounce, given that they have permissions (ops) and they used MFA. Lyft&rsquo;s doesn&rsquo;t enforce the bastion concept, which is nice.</p>

<h1>Prerequisites</h1>

<p>In the IAM console in AWS, enable an MFA device for your user.</p>

<h1>Setting up the client</h1>

<p>I wrote a wrapper to simplify this. Feel free to not like it, but I put this in my <code>~/.bash_aliases</code> to make it easier:</p>

<pre><code>function bounce() {
  if [[ ! -d ~/.blessclient ]]; then
    pushd . &gt;/dev/null
    git clone https://github.com/lyft/python-blessclient.git ~/.blessclient
    cd $_
    make
    popd &gt;/dev/null
  fi
  INTERNAL_IP=$(ifconfig | grep inet | grep 192 | awk '{ print $2}')
  # This gets weird if you have wired and wifi hooked up (sometimes i do). It might allow the wrong IP and give you a crap error messsage.
  if [[ $(ifconfig | grep inet | grep 192 | awk '{ print $2}' | wc -l) -gt 1 ]] &amp;&amp; [[ -z ${BLESSFIXEDIP} ]]; then
    echo "More than one internal ip found. Disable a network interface or provide it manually via env var 'BLESSFIXEDIP'"
  else
    FILE="$(mktemp)"
    rm -rf ${FILE}*
    ssh-keygen -f ${FILE} -N ""
    BLESS_IDENTITYFILE=${FILE} BLESSFIXEDIP=${BLESSFIXEDIP:-${INTERNAL_IP}} ~/.blessclient/blessclient.run --host $1 --nocache --config ~/.blessclient/blessclient.cfg --region EAST &amp;&amp; ssh -i ${FILE} ec2-user@$1
  fi
}
</code></pre>

<p>Now you can bounce with:</p>

<pre><code>$ bounce 10.0.3.7
Generating public/private rsa key pair.
Your identification has been saved in /var/folders/5j/n9trdvbn3qqdtkshkpvnrkhh0000gp/T/tmp.s2ZdeuJD.
Your public key has been saved in /var/folders/5j/n9trdvbn3qqdtkshkpvnrkhh0000gp/T/tmp.s2ZdeuJD.pub.
The key fingerprint is:
SHA256:CizQBI/ROY8QIeiRjt7rY65jPc/oJDL3MA marcyoung@Admins-MacBook-Pro.local
The key's randomart image is:
+---[RSA 2048]----+
|B*+.             |
|++o              |
|=..              |
|.o.*.            |
|. o  S           |
|...+ . .         |
| E .o.           |
|oo= + .          |
|.=*              |
+----[SHA256]-----+
Enter your AWS MFA code: 477821
Requesting certificate for your public key (set BLESSQUIET=1 to suppress these messages)
Finished getting certificate.
Last login: Fri Jun 16 20:14:52 2017 from ip-192-168-1-124.ec2.internal

       __|  __|_  )
       _|  (     /   Amazon Linux AMI
      ___|\___|___|

https://aws.amazon.com/amazon-linux-ami/2017.03-release-notes/
No packages needed for security; 2 packages available
Run "sudo yum update" to apply all updates.
[marc@server ~]$
</code></pre>

<p>Nice! But again, MFA is used, not enforced. Lets change that.</p>

<p>I hinted at my group policy in part 1 for <code>ops</code> that looked like:</p>

<pre><code>resource "aws_iam_group_policy" "bless-client" {
    name = "bless-client_iam_policy"
    group = "${aws_iam_group.ops.id}"
    policy = &lt;&lt;EOF
{
    "Version": "2012-10-17",
    "Statement": [
      {
        "Effect": "Allow",
        "Action": "sts:AssumeRole",
        "Resource": [
          "${data.terraform_remote_state.bless_client_iam.bless-client-role-arn}"
        ]
      },
      {
        "Action": "kms:Encrypt",
        "Effect": "Allow",
        "Resource": [
          "${data.terraform_remote_state.kms.ops_bless_arn}"
        ],
        "Condition": {
          "StringEquals": {
            "kms:EncryptionContext:user_type": "user",
            "kms:EncryptionContext:from": "$${aws:username}"
          }
        }
      }
    ]
}
EOF
}
</code></pre>

<p>But in actuality, it should look more like:</p>

<pre><code>resource "aws_iam_group_policy" "bless-client" {
    name = "assume-bless-role"
    group = "${aws_iam_group.ops.id}"
    policy = &lt;&lt;EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "sts:AssumeRole",
      "Resource": [
        "${data.terraform_remote_state.bless_client_iam.bless-client-role-arn}"
      ],
      "Condition": {
        "Bool": {
          "aws:MultiFactorAuthPresent": "true"
        }
      }
    },
    {
      "Effect": "Deny",
      "Action": "sts:AssumeRole",
      "Resource": [
        "${data.terraform_remote_state.bless_client_iam.bless-client-role-arn}"
      ],
      "Condition": {"BoolIfExists": {"aws:MultiFactorAuthPresent": false}}
    },
    {
      "Action": "kms:Encrypt",
      "Effect": "Allow",
      "Resource": [
        "${data.terraform_remote_state.kms.ops_bless_arn}"
      ],
      "Condition": {
        "StringEquals": {
          "kms:EncryptionContext:user_type": "user",
          "kms:EncryptionContext:from": "$${aws:username}"
        },
        "Bool": {
          "aws:MultiFactorAuthPresent": "true"
        }
      }
    },
    {
      "Action": "kms:Encrypt",
      "Effect": "Deny",
      "Resource": [
        "${data.terraform_remote_state.kms.ops_bless_arn}"
      ],
      "Condition": {
        "StringEquals": {
          "kms:EncryptionContext:user_type": "user",
          "kms:EncryptionContext:from": "$${aws:username}"
        },
        "BoolIfExists": {
          "aws:MultiFactorAuthPresent": false
        }
      }
    }
  ]
}
EOF
}
</code></pre>

<p>What did we do? We basically said <code>ops</code> users can assume the bless-client role or call kms:Encrypt on that key, but only if they used MFA. If you try the original bless client now, it will fail.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Up and running with Bless and enforced MFA - Part 1]]></title>
    <link href="http://marcyoung.us/post/bless-part1"/>
    <updated>2017-06-21T00:00:00-05:00</updated>
    <id>http://marcyoung.us/post/bless-part1</id>
    <content type="html"><![CDATA[<p>I finally got Netflix&rsquo;s <a href="github.com/netflix/bless">Bless</a> running in production using a forked version of Lyft&rsquo;s <a href="https://github.com/lyft/python-blessclient">client</a>. <!-- more --></p>

<p>This post will focus on the first and easier portion: Bless in Lambda</p>

<h1>Prerequisites</h1>

<p>Time and terraform. I like terraform because I dislike cloudformation. Feel free to adapt.</p>

<h1>Installing Bless</h1>

<p>This is actually the easiest part, because it&rsquo;s straight forward. Side note: I like bless because of its simplicity. It uses lambda + KMS and nothing more. The permissions are stupid simple. The purpose, after talking to one of the guys behind it, was to make it feel native and un-intrusive. It works.</p>

<h2>Setup Config</h2>

<p>This was the hardest to get going, because configuration always is. The <a href="https://github.com/Netflix/bless/blob/master/README.md">readme</a> says to paste in a function to lambda to generate your password. But thats not needed with the super awesome <a href="https://github.com/lambci/docker-lambda">lambda container from lambci</a>. To do this, create a file <code>function.py</code> with the contents:</p>

<pre><code>import boto3
import base64
import os


def lambda_handler(event, context):
    region = os.environ['AWS_REGION']
    client = boto3.client('kms', region_name=region)
    response = client.encrypt(
    KeyId='kms_key_id',
    Plaintext='totallysecure'
    )

    ciphertext = response['CiphertextBlob']
    return base64.b64encode(ciphertext)
</code></pre>

<p>Now lets run that without using the real lambda. Make sure your access key/id have the required permissions to do <code>kms:Encrypt</code>:</p>

<pre><code>docker run -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=AWS_SECRET_ACCESS_KEY -e AWS_REGION=us-east-1 -v "$PWD":/var/task lambci/lambda:python2.7 function.lambda_handler
START RequestId: 42f85048-91e1-4b48-9376-0563722616f0 Version: $LATEST
END RequestId: 42f85048-91e1-4b48-9376-0563722616f0
REPORT RequestId: 42f85048-91e1-4b48-9376-0563722616f0 Duration: 733 ms Billed Duration: 800 ms Memory Size: 1536 MB Max Memory Used: 25 MB
"some base64 encoded key"
</code></pre>

<p>Now lets generate a PEM encoded key with a password of &lsquo;totallysecure&rsquo; (to match the password we encrypted/base64 encoded in KMS):</p>

<pre><code>$ ssh-keygen -t rsa -b 4096 -f foo1 -C "SSH CA Key 1"
$ ssh-keygen -t rsa -b 4096 -f foo2 -C "SSH CA Key 2" #2nd CA for good measure
$ mv foo1 lambda_configs/foo1.pem &amp;&amp; chmod 444 $_
$ mv foo2 lambda_configs/foo2.pem &amp;&amp; chmod 444 $_
$ cat foo1.pub # This will need to go onto your servers into a file /etc/ssh/cas.pub
$ cat foo2.pub # This will need to go onto your servers into a file /etc/ssh/cas.pub
</code></pre>

<h2>The Config</h2>

<p>This is an example of a finished config. Save it as <code>lambda_configs/bless_deploy.cfg</code>:</p>

<pre><code>[Bless Options]
certificate_validity_after_seconds = 120
certificate_validity_before_seconds = 120
entropy_minimum_bits = 2048
random_seed_bytes = 256
logging_level = INFO

[Bless CA]

us-east-1_password = some base64 encoded key from lambci/lambda
ca_private_key_file = foo1.pem

[KMS Auth]
</code></pre>

<h2>Build</h2>

<pre><code>$ virtualenv venv
$ . venv/bin/activate
$ pip install -r requirements.txt
$ make publish
</code></pre>

<h1>Deploy</h1>

<h2>IAM</h2>

<p>The first piece is the IAM portion for Bless. I need to allow it to:</p>

<ol>
<li>Generate random keys from KMS (obvious)</li>
<li>Decrypt the KMS key that&rsquo;s the password for Bless. This is generated and</li>
<li>Create the log group (maybe not necesary since Lambda does that for you?)</li>
<li>Push logs</li>
</ol>


<pre><code>resource "aws_iam_role" "bless_lambda" {
    name = "bless_lambda"
    assume_role_policy = &lt;&lt;EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "lambda.amazonaws.com"
      },
      "Effect": "Allow",
      "Sid": ""
    }
  ]
}
EOF
}

resource "aws_iam_role_policy" "bless_lambda" {
    name = "bless_lambda"
    role = "${aws_iam_role.bless_lambda.id}"
    policy = &lt;&lt;EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
          "Sid": "Stmt1443036478000",
          "Effect": "Allow",
          "Action": [
              "kms:GenerateRandom",
              "kms:Decrypt"
          ],
          "Resource": [
              "${data.terraform_remote_state.kms.ops_bless_arn}"
          ]
        },
        {
            "Effect": "Allow",
            "Action": "logs:CreateLogGroup",
            "Resource": "arn:aws:logs:us-east-1:*:*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
            ],
            "Resource": [
                "arn:aws:logs:us-east-1:*:log-group:/aws/lambda/*"
            ]
        }
    ]
}
EOF
}
</code></pre>

<h2>KMS</h2>

<pre><code>resource "aws_kms_key" "ops-bless" {
    description             = "KMS key for Bless"
    deletion_window_in_days = 7
}

resource "aws_kms_alias" "ops-bless" {
    name          = "alias/ops/bless"
    target_key_id = "${aws_kms_key.ops-bless.key_id}"
}

output "ops_bless_arn" {
  value = "${aws_kms_key.ops-bless.arn}"
}
</code></pre>

<h2>The lambda</h2>

<p>Assuming the .zip is in the cwd as <code>bless_lambda.zip</code>:</p>

<pre><code>resource "aws_lambda_function" "bless" {
  filename         = "bless_lambda.zip"
  function_name    = "bless"
  role             = "${aws_iam_role.bless_lambda.arn}"
  handler          = "bless_lambda.lambda_handler"
  source_code_hash = "${base64sha256(file("bless_lambda.zip"))}"
  runtime          = "python2.7"
  timeout          = "300"
}
</code></pre>

<h1>Client</h1>

<h2>Client IAM role to assume</h2>

<p>It basically just allows the invocation of our deployed function:</p>

<pre><code>resource "aws_iam_role" "bless-client" {
    name               = "bless-client"
    path               = "/"
    assume_role_policy = &lt;&lt;EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": "lambda:InvokeFunction",
            "Effect": "Allow",
            "Resource": [
                "${data.terraform_remote_state.lambda-bless.bless_arn}"
            ]
        }
    ]
}
EOF
}
</code></pre>

<p>I added this to our <code>ops</code> IAM group so that any ops person can assume the role or use kms:Encrypt from the bless KMS key:</p>

<pre><code>resource "aws_iam_group_policy" "bless-client" {
    name = "bless-client_iam_policy"
    group = "${aws_iam_group.ops.id}"
    policy = &lt;&lt;EOF
{
    "Version": "2012-10-17",
    "Statement": [
      {
        "Effect": "Allow",
        "Action": "sts:AssumeRole",
        "Resource": [
          "${data.terraform_remote_state.bless_client_iam.bless-client-role-arn}"
        ]
      },
      {
        "Action": "kms:Encrypt",
        "Effect": "Allow",
        "Resource": [
          "${data.terraform_remote_state.kms.ops_bless_arn}"
        ],
        "Condition": {
          "StringEquals": {
            "kms:EncryptionContext:user_type": "user",
            "kms:EncryptionContext:from": "$${aws:username}"
          }
        }
      }
    ]
}
EOF
}
</code></pre>

<h2>Client config</h2>

<p>This is an example of what my client config looks like:</p>

<pre><code>[MAIN]
region_aliases: east
kms_service_name: bless
bastion_ips: 192.168.1.6
remote_user: ec2-user

[CLIENT]
domain_regex: (.*\.mycompany\.com|.*\.example\.net|\A10\.[0-9](?:\.[0-9]{1,3}){2}\Z)$
cache_dir: .bless/session
cache_file: bless_cache.json
mfa_cache_dir: .aws/session
mfa_cache_file: token_cache.json
ip_urls: http://api.ipify.org, http://canihazip.com
update_script: update_blessclient.sh

[LAMBDA]
user_role: bless-client
account_id: my account id
functionname: bless
functionversion: $LATEST
certlifetime: 120
ipcachelifetime: 120
timeout_connect: 30
timeout_read: 30

[REGION_EAST]
awsregion: us-east-1
kmsauthkey: my kms id that i used for the original password encrypt
</code></pre>

<h1>Test</h1>

<p>You should now have a lambda that can generate certificates to use.
You&rsquo;ll need to put the public keys from <code>foo1.pub</code> and <code>foo2.pub</code> into your servers at <code>/etc/ssh/cas.pub</code> and add <code>TrustedUserCAKeys /etc/ssh/cas.pub</code> to <code>/etc/ssh/sshd_config</code>
You can test this with their client:</p>

<pre><code>bounce () {
  FILE="$(mktemp)"
  rm -rf ${FILE}
  ssh-keygen -f ${FILE} -N ""
  ./bless_client.py \
    us-east-1 \
    bless \
    testdev $(curl --silent http://ipecho.net/plain) \
    ec2-user $(ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1') \
    "" \
    ${FILE}.pub ${FILE}-cert.pub
  ssh -i ${FILE} ec2-user@$1 "${@:2}"
}

bounce 10.0.0.19
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure, Github, and a Corporate Proxy]]></title>
    <link href="http://marcyoung.us/post/azure-github-proxy"/>
    <updated>2015-05-18T00:00:00-05:00</updated>
    <id>http://marcyoung.us/post/aspnet-github</id>
    <content type="html"><![CDATA[<p>Recently I started playing around with Azure and deploying an ASP.NET MVC site via its Github linkage. I had some strange issues.<!-- more --></p>

<h1>Problem 1: I am a masochist</h1>

<p>Under the strange suspicion that I had no idea how to actually build NuGet packages and deploy an ASP.NET site via CI/CD I decided to take on the masochistic task upon myself.
If you <a href="https://github.com/myoung34/HelloWorldASP">take a look at my very basic MVC site</a>, you won&rsquo;t see much of interest. None actually, I&rsquo;m not sure why you possibly clicked that link.</p>

<p>It&rsquo;s a basic MVC app using a terrible NuGet package I&rsquo;ve been deploying that adds some string extension methods. If you run that in Visual Studio, all is well.</p>

<h1>Problem 2: The work proxy</h1>

<p>I tried to publish it to Azure using <a href="http://blogs.technet.com/b/cbernier/archive/2013/09/24/deploy-your-web-application-to-windows-azure-from-with-visual-studio.aspx">the publish feature from VS2013 into Azure</a> but immediately ran into a &lsquo;me&rsquo; problem.</p>

<p>You see, I was deploying from my work PC, which is absolutely blocked from doing anything. All of the traffic from my work PC <strong>must</strong> be published through a web proxy on-site.</p>

<p>This is fine for things like Chrome, which pick those settings up automatically. For cygwin (see problem 1) there are a lot of steps to take.</p>

<ul>
<li>wget/Vagrant: I had to export <code>http_proxy</code>, <code>https_proxy</code>, and <code>ftp_proxy</code> (after pulling down the proxy PAC and finding which proxy address to use).</li>
<li>cURL: I had to write a wrapper <code>/usr/local/bin/curl</code>(higher in the PATH) that basically said <code>/usr/bin/curl --proxy 'http://proxyaddress:80' "$@"</code>.</li>
<li>subversion: I had to add <code>http-proxy-host = proxyaddress</code> into <code>~/.subversion/servers</code> in the <code>[global]</code> section.</li>
<li>git: OMG GIT. So here&rsquo;s the thing. git behind a corporate firewall is hard. It can&rsquo;t resolve through DNS and it can&rsquo;t do anything it needs to do.

<ul>
<li>First I installed <a href="http://ntlmaps.sourceforge.net/">ntmlaps</a> into <code>~/software/ntlmaps</code></li>
<li>Next I set my <code>~.bash_profile</code> to start up a command in screen if it hasn&rsquo;t already to start ntlmaps.

<ul>
<li><code>[[ -n $(screen -ls | grep -E 'git-proxy.\*\((A|De)tached\)$') ]] || screen -d -S git-proxy -m python ~/software/ntlmaps/main.py</code></li>
</ul>
</li>
<li>Next I set git to use this proxy: <code>for i in http https; do git config --global $i.proxy http://localhost:5865</code></li>
</ul>
</li>
</ul>


<h1>Problem 3: Visual Studio and Azure Deploy</h1>

<p><a href="http://blog.kloud.com.au/2014/11/13/publish-to-a-new-azure-website-from-behind-a-proxy/">Visual studio cannot deploy to Azure behind a PAC proxy</a>.</p>

<p>Sites like this one claim you can make changes to the VS2013 executable config but I had zero luck.</p>

<p>So little luck in fact that it just plain failed with an unconnectable error.</p>

<p>From then I said nevermind and decided to just link my Azure app to my github repo using the web UI. All went great and it immediately deployed however when I browsed to my website I was <a href="http://www.dotnetthoughts.net/azure-system-methodaccessexception-attempt-by-security-transparent-method/">greeted with this error.</a>.</p>

<p>All of the blog posts and stack overflow questions say to install the WebHelpers NuGet package via <code>Install-Package -Id  Microsoft.AspNet.WebHelpers</code>, but that didn&rsquo;t solve it. It redeployed and had the same error.</p>

<p>The posts also say to just select the <code>Remove additional files at destination</code> checkbox on Visual Studio deploy. Well that&rsquo;s useless because I cannot deploy via visual studio. After fighting long and hard and redeploying via Github repeatedly, I found the answer.</p>

<h1>Answer: Select the <code>Remove additional files at destination</code> no matter what.</h1>

<p>Yup. I changed to the guest network, selected the checkbox, published successfully and all went well. My app was now live.
I then pushed multiple changes/rebases into the github repo, and it&rsquo;s been working fine since.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Well, I wrote a book]]></title>
    <link href="http://marcyoung.us/post/book"/>
    <updated>2015-04-08T00:00:00-05:00</updated>
    <id>http://marcyoung.us/post/book</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been quite a while since my last post, but I promise I have somewhat of a decent reason. I wrote a book on AWS design patterns!<!-- more --></p>

<p>About 4 months ago I was approached about writing a book on UDOO. I turned it down as I didn&rsquo;t feel like I would have enough content to write anything meaningful on it other than I have no idea what the name means. I then stayed on their list and reviewed a book on <a href="https://www.packtpub.com/virtualization-and-cloud/getting-started-red-hat-enterprise-virtualization">RHEV</a> (or the downstream oVirt) as well as a book on <a href="https://www.packtpub.com/networking-and-servers/learning-puppet-security">puppet security</a>.</p>

<p>After doing these reviews I figured &ldquo;why not&rdquo; and asked if there were any topics I could work on. Long story short I wrote <a href="https://www.packtpub.com/web-development/implementing-cloud-design-patterns-aws">a book on implementing design patterns at AWS</a>.</p>

<p>Writing the book was fairly straight-forward and I didn&rsquo;t have too many issues. Basically I borrowed a lot of concepts from the very outdated topics from the Ninja Of Three pages (and by borrowed I mean don&rsquo;t go there) and adapted them for use, updated them to reflect changes at AWS (which get updated so much my book is already out of date before publication - hawt), and gave in depth information on what these patterns mean to DevOps, developers, and customers.</p>

<p>If you&rsquo;re reading this and <strong>really</strong> want to help a newbie out, please purchase it as 100% of the proceeds go to student loans and nice bourbon (order not guaranteed).</p>

<p>The book is pending a last review before publication right now. I submitted a few images for the cover photo that have not been selected by the publisher yet but I give you my top two rejected images.</p>

<p><img src="http://marcyoung.us/images/book.jpg"/><img src="http://marcyoung.us/images/book-alt.jpg"/></p>

<p>Update 4/29/2015: <a href="http://amzn.to/1zrxpZx">It&rsquo;s back up for sale at amazon</a></p>
]]></content>
  </entry>
  
</feed>
